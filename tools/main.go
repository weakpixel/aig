package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"text/template"

	"github.com/weakpixel/aig/pkg/parser"

	b64 "encoding/base64"

	"flag"
)

func main() {
	modulePath := flag.String("m", "", "Path to ansible modules")
	outPath := flag.String("o", "", "Path to go generated taks")
	flag.Parse()
	dir := *modulePath
	if dir == "" {
		fmt.Println("[ERROR] Please define ansible module path with -m <path>")
		os.Exit(1)
	}
	out := *outPath
	if out == "" {
		fmt.Println("[ERROR] Please define go output path with -o <path>")
		os.Exit(1)
	}
	spec, err := parser.ParseModules(dir)
	if err != nil {
		log.Fatal(err)
	}
	for _, m := range spec.Modules {
		outFile := filepath.Join(out, m.ModuleName+".go")
		f, err := os.Create(outFile)
		if err != nil {
			panic(err)
		}
		defer f.Close()
		t, err := template.New(m.ModuleName).Parse(moduleTemplate)
		if err != nil {
			panic(err)
		}
		err = t.Execute(f, &m)
		if err != nil {
			panic(err)
		}
		f.Close()
	}

	writeModuleSpec(spec, out)
}

func writeModuleSpec(spec *parser.Spec, out string) {
	raw, err := json.Marshal(spec)
	if err != nil {
		panic(err)
	}
	outFile := filepath.Join(out, "spec.go")
	constantFile, err := os.Create(outFile)
	if err != nil {
		panic(err)
	}
	defer constantFile.Close()

	t, err := template.New("spec.go").Parse(contantsTemplate)
	if err != nil {
		panic(err)
	}

	encodedRaw := b64.StdEncoding.EncodeToString(raw)

	err = t.Execute(constantFile, map[string]interface{}{
		"Source": encodedRaw,
	})
	if err != nil {
		panic(err)
	}
}

var (
	contantsTemplate = `
	package module
	import (
		"github.com/weakpixel/aig/pkg/parser"
	)
	func GetSpec() (*parser.Spec, error) {
		return parser.ParseModulesFromSpec(moduleSpecJSON)
	}
	const (
		// ModuleSpecJson contains source model spec base64 encoded
		moduleSpecJSON = "{{ .Source }}"
	)
	`
	moduleTemplate = `
// Autogenerated
package module

import (
	"github.com/weakpixel/aig/pkg/ansible"
	
)

type {{ .NormalizedName }} struct {
	ModuleName string
	Params {{ .NormalizedName }}Params
	Result {{ .NormalizedName }}Result
}

type {{ .NormalizedName }}Params struct {
	{{range $name, $opt := .Params }}
		// {{ $opt.NormalizedName }} 
		{{ $opt.NormalizedName }} {{ $opt.GoType }} {{ $opt.StructTag }}
	{{ end }}
}

type {{ .NormalizedName }}Result struct {
	Raw string 
	{{range $name, $opt := .Returns }}
		// {{ $opt.NormalizedName }} 
		{{ $opt.NormalizedName }} {{ $opt.GoType }} {{ $opt.StructTag }}
	{{ end }}
}

func (m *{{ .NormalizedName }}) Run() error {
	raw, err := ansible.Execute(m.ModuleName, m.Params, &m.Result)
	m.Result.Raw = raw
	return err
}

func New{{.NormalizedName}}() *{{.NormalizedName}} {
	return &{{.NormalizedName}} {
		ModuleName: "{{.ModuleName}}",
	}
}
	`
)
