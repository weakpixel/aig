package module

// Autogenerated file

import (
	"fmt"
	"github.com/weakpixel/aig/pkg/types"
)

func init() {
	addModuleFactory("getent", func() types.Module {
		return NewGetent()
	})
}

//
// Getent (getent) - A wrapper to the unix getent utility
//
func NewGetent() *Getent {
	module := Getent{}
	// Create dynamic param values
	paramValues := map[string]types.Value{}
	paramValues["database"] = types.NewStringValue(&module.Params.Database)
	paramValues["fail_key"] = types.NewBoolValue(&module.Params.FailKey)
	paramValues["key"] = types.NewStringValue(&module.Params.Key)
	paramValues["service"] = types.NewStringValue(&module.Params.Service)
	paramValues["split"] = types.NewStringValue(&module.Params.Split)
	module.Params.values = paramValues

	// Create dynamic result values
	resultValues := map[string]types.Value{}

	module.Result.values = resultValues

	return &module
}

// Getent (getent) - A wrapper to the unix getent utility
//
// Runs getent against one of it's various databases and returns information into the host's facts, in a getent_<database> prefixed variable.
//
//
// Source: https://github.com/ansible/ansible/blob/v2.13.1/lib/ansible/modules/getent.py
type Getent struct {
	Params GetentParams
	Result GetentResult
}

type GetentParams struct {

	// Database
	// The name of a getent database supported by the target system (passwd, group, hosts, etc).
	//
	// Default: <no value>
	// Required: true
	Database string `yaml:"database,omitempty" json:"database,omitempty"`

	// FailKey
	// If a supplied key is missing this will make the task fail if C(yes).
	//
	// Default: yes
	// Required: false
	FailKey bool `yaml:"fail_key,omitempty" json:"fail_key,omitempty"`

	// Key
	// Key from which to return values from the specified database, otherwise the full contents are returned.
	//
	// Default:
	// Required: false
	Key string `yaml:"key,omitempty" json:"key,omitempty"`

	// Service
	// Override all databases with the specified service
	// The underlying system must support the service flag which is not always available.
	//
	// Default: <no value>
	// Required: false
	Service string `yaml:"service,omitempty" json:"service,omitempty"`

	// Split
	// Character used to split the database values into lists/arrays such as ':' or '	', otherwise  it will try to pick one depending on the database.
	//
	// Default: <no value>
	// Required: false
	Split string `yaml:"split,omitempty" json:"split,omitempty"`

	values map[string]types.Value
}

func (p *GetentParams) Names() []string {
	names := []string{}
	for name := range p.values {
		names = append(names, name)
	}
	return []string{}
}

func (p *GetentParams) Set(name string, value interface{}) error {
	v, ok := p.values[name]
	if !ok {
		return fmt.Errorf("no param with name %q", name)
	}
	return v.Set(value)
}

func (p *GetentParams) Get(name string) (interface{}, error) {
	v, ok := p.values[name]
	if !ok {
		return nil, fmt.Errorf("no param with name %q", name)
	}
	return v.Get(), nil
}

type GetentResult struct {
	types.CommonReturn
	Raw string

	// AnsibleFacts
	// Facts to add to ansible_facts.
	AnsibleFacts map[string]interface{} `yaml:"ansible_facts,omitempty" json:"ansible_facts,omitempty"`

	values map[string]types.Value
}

func (r *GetentResult) Names() []string {
	names := []string{}
	for name := range r.values {
		names = append(names, name)
	}
	return []string{}
}

func (r *GetentResult) Set(name string, value interface{}) error {
	v, ok := r.values[name]
	if !ok {
		return fmt.Errorf("no param with name %q", name)
	}
	return v.Set(value)
}

func (r *GetentResult) Get(name string) (interface{}, error) {
	v, ok := r.values[name]
	if !ok {
		return nil, fmt.Errorf("no param with name %q", name)
	}
	return v.Get(), nil
}

func (m *Getent) GetResult() types.Result {
	return &m.Result
}

func (m *Getent) GetResultRaw() string {
	return m.Result.Raw
}

func (m *Getent) GetCommonResult() types.CommonReturn {
	return m.Result.CommonReturn
}

func (m *Getent) GetParams() types.Params {
	return &m.Params
}

func (m *Getent) GetType() string {
	return "getent"
}
