package module

// Autogenerated file

import (
	"github.com/weakpixel/aig/pkg/types"
)

func init() {
	addModuleFactory("group", func() Module {
		return NewGroup()
	})
}

//
// Group (group) - Add or remove groups
//
func NewGroup() *Group {
	return &Group{}
}

// Group (group) - Add or remove groups
//
// Manage presence of groups on a host.
// For Windows targets, use the M(ansible.windows.win_group) module instead.
type Group struct {
	Params GroupParams
	Result GroupResult
}

type GroupParams struct {

	// Gid
	// Optional I(GID) to set for the group.
	//
	// Default: <no value>
	// Required: false
	Gid int `yaml:"gid,omitempty" json:"gid,omitempty"`

	// Local
	// Forces the use of "local" command alternatives on platforms that implement it.
	// This is useful in environments that use centralized authentication when you want to manipulate the local groups. (for example, it uses C(lgroupadd) instead of C(groupadd)).
	// This requires that these commands exist on the targeted host, otherwise it will be a fatal error.
	//
	// Default: no
	// Required: false
	Local bool `yaml:"local,omitempty" json:"local,omitempty"`

	// Name
	// Name of the group to manage.
	//
	// Default: <no value>
	// Required: true
	Name string `yaml:"name,omitempty" json:"name,omitempty"`

	// NonUnique
	// This option allows to change the group ID to a non-unique value. Requires C(gid).
	// Not supported on macOS or BusyBox distributions.
	//
	// Default: no
	// Required: false
	NonUnique bool `yaml:"non_unique,omitempty" json:"non_unique,omitempty"`

	// State
	// Whether the group should be present or not on the remote host.
	//
	// Default: present
	// Required: false
	State string `yaml:"state,omitempty" json:"state,omitempty"`

	// System
	// If I(yes), indicates that the group created is a system group.
	//
	// Default: no
	// Required: false
	System bool `yaml:"system,omitempty" json:"system,omitempty"`
}

type GroupResult struct {
	types.CommonReturn
	Raw string

	// Gid
	// Group ID of the group.
	Gid int `yaml:"gid,omitempty" json:"gid,omitempty"`

	// Name
	// Group name.
	Name string `yaml:"name,omitempty" json:"name,omitempty"`

	// State
	// Whether the group is present or not.
	State string `yaml:"state,omitempty" json:"state,omitempty"`

	// System
	// Whether the group is a system group or not.
	System bool `yaml:"system,omitempty" json:"system,omitempty"`
}

func (m *Group) GetResult() interface{} {
	return &m.Result
}

func (m *Group) GetResultRaw() string {
	return m.Result.Raw
}

func (m *Group) GetCommonResult() types.CommonReturn {
	return m.Result.CommonReturn
}

func (m *Group) GetParams() interface{} {
	return &m.Params
}

func (m *Group) GetType() string {
	return "group"
}
