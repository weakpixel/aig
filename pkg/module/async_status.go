package module

// Autogenerated file

import (
	"fmt"
	"github.com/weakpixel/aig/pkg/types"
)

func init() {
	addModuleFactory("async_status", func() types.Module {
		return NewAsyncStatus()
	})
}

//
// AsyncStatus (async_status) - Obtain status of asynchronous task
//
func NewAsyncStatus() *AsyncStatus {
	module := AsyncStatus{}
	// Create dynamic param values
	paramValues := map[string]types.Value{}
	paramValues["jid"] = types.NewStringValue(&module.Params.Jid)
	paramValues["mode"] = types.NewStringValue(&module.Params.Mode)
	module.Params.values = paramValues

	// Create dynamic result values
	resultValues := map[string]types.Value{}

	resultValues["ansible_job_id"] = types.NewStringValue(&module.Result.AnsibleJobId)
	resultValues["erased"] = types.NewStringValue(&module.Result.Erased)
	resultValues["finished"] = types.NewIntValue(&module.Result.Finished)
	resultValues["started"] = types.NewIntValue(&module.Result.Started)
	resultValues["stderr"] = types.NewStringValue(&module.Result.Stderr)
	resultValues["stdout"] = types.NewStringValue(&module.Result.Stdout)
	module.Result.values = resultValues

	return &module
}

// AsyncStatus (async_status) - Obtain status of asynchronous task
//
// This module gets the status of an asynchronous task.
//
// This module is also supported for Windows targets.
//
//
// Source: https://github.com/ansible/ansible/blob/v2.13.1/lib/ansible/modules/async_status.py
type AsyncStatus struct {
	Params AsyncStatusParams
	Result AsyncStatusResult
}

type AsyncStatusParams struct {

	// Jid
	// Job or task identifier
	//
	// Default: <no value>
	// Required: true
	Jid string `yaml:"jid,omitempty" json:"jid,omitempty" cty:"jid"`

	// Mode
	// If C(status), obtain the status.
	// If C(cleanup), clean up the async job cache (by default in C(~/.ansible_async/)) for the specified job I(jid).
	//
	// Default: status
	// Required: false
	Mode string `yaml:"mode,omitempty" json:"mode,omitempty" cty:"mode"`

	values map[string]types.Value
}

func (p *AsyncStatusParams) Names() []string {
	names := []string{}
	for name := range p.values {
		names = append(names, name)
	}
	return names
}

func (p *AsyncStatusParams) Set(name string, value interface{}) error {
	v, ok := p.values[name]
	if !ok {
		return fmt.Errorf("no param with name %q", name)
	}
	return v.Set(value)
}

func (p *AsyncStatusParams) Get(name string) (interface{}, error) {
	v, ok := p.values[name]
	if !ok {
		return nil, fmt.Errorf("no param with name %q", name)
	}
	return v.Get(), nil
}

type AsyncStatusResult struct {
	types.CommonReturn
	Raw string

	// AnsibleJobId
	// The asynchronous job id
	AnsibleJobId string `yaml:"ansible_job_id,omitempty" json:"ansible_job_id,omitempty" cty:"ansible_job_id"`

	// Erased
	// Path to erased job file
	Erased string `yaml:"erased,omitempty" json:"erased,omitempty" cty:"erased"`

	// Finished
	// Whether the asynchronous job has finished (C(1)) or not (C(0))
	Finished int `yaml:"finished,omitempty" json:"finished,omitempty" cty:"finished"`

	// Started
	// Whether the asynchronous job has started (C(1)) or not (C(0))
	Started int `yaml:"started,omitempty" json:"started,omitempty" cty:"started"`

	// Stderr
	// Any errors returned by async_wrapper
	Stderr string `yaml:"stderr,omitempty" json:"stderr,omitempty" cty:"stderr"`

	// Stdout
	// Any output returned by async_wrapper
	Stdout string `yaml:"stdout,omitempty" json:"stdout,omitempty" cty:"stdout"`

	values map[string]types.Value
}

func (r *AsyncStatusResult) Names() []string {
	names := []string{}
	for name := range r.values {
		names = append(names, name)
	}
	return names
}

func (r *AsyncStatusResult) Set(name string, value interface{}) error {
	v, ok := r.values[name]
	if !ok {
		return fmt.Errorf("no param with name %q", name)
	}
	return v.Set(value)
}

func (r *AsyncStatusResult) Get(name string) (interface{}, error) {
	v, ok := r.values[name]
	if !ok {
		return nil, fmt.Errorf("no param with name %q", name)
	}
	return v.Get(), nil
}

func (m *AsyncStatus) GetResult() types.Result {
	return &m.Result
}

func (m *AsyncStatus) GetResultRaw() string {
	return m.Result.Raw
}

func (m *AsyncStatus) GetCommonResult() types.CommonReturn {
	return m.Result.CommonReturn
}

func (m *AsyncStatus) GetParams() types.Params {
	return &m.Params
}

func (m *AsyncStatus) GetType() string {
	return "async_status"
}
