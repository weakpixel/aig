package module

// Autogenerated file

import (
	"github.com/weakpixel/aig/pkg/types"
)

func init() {
	addModuleFactory("subversion", func() Module {
		return NewSubversion()
	})
}

//
// Subversion (subversion) - Deploys a subversion repository
//
func NewSubversion() *Subversion {
	return &Subversion{}
}

// Subversion (subversion) - Deploys a subversion repository
//
// Deploy given repository URL / revision to dest. If dest exists, update to the specified revision, otherwise perform a checkout.
//
// Source: https://github.com/ansible/ansible/blob/v2.13.1/lib/ansible/modules/subversion.py
type Subversion struct {
	Params SubversionParams
	Result SubversionResult
}

type SubversionParams struct {

	// Checkout
	// If C(no), do not check out the repository if it does not exist locally.
	//
	// Default: yes
	// Required: false
	Checkout bool `yaml:"checkout,omitempty" json:"checkout,omitempty"`

	// Dest
	// Absolute path where the repository should be deployed.
	// The destination directory must be specified unless I(checkout=no), I(update=no), and I(export=no).
	//
	// Default: <no value>
	// Required: false
	Dest string `yaml:"dest,omitempty" json:"dest,omitempty"`

	// Executable
	// Path to svn executable to use. If not supplied, the normal mechanism for resolving binary paths will be used.
	//
	// Default: <no value>
	// Required: false
	Executable string `yaml:"executable,omitempty" json:"executable,omitempty"`

	// Export
	// If C(yes), do export instead of checkout/update.
	//
	// Default: no
	// Required: false
	Export bool `yaml:"export,omitempty" json:"export,omitempty"`

	// Force
	// If C(yes), modified files will be discarded. If C(no), module will fail if it encounters modified files. Prior to 1.9 the default was C(yes).
	//
	// Default: no
	// Required: false
	Force bool `yaml:"force,omitempty" json:"force,omitempty"`

	// InPlace
	// If the directory exists, then the working copy will be checked-out over-the-top using svn checkout --force; if force is specified then existing files with different content are reverted.
	//
	// Default: no
	// Required: false
	InPlace bool `yaml:"in_place,omitempty" json:"in_place,omitempty"`

	// Password
	// C(--password) parameter passed to svn when svn is less than version 1.10.0. This is not secure and the password will be leaked to argv.
	// C(--password-from-stdin) parameter when svn is greater or equal to version 1.10.0.
	//
	// Default: <no value>
	// Required: false
	Password string `yaml:"password,omitempty" json:"password,omitempty"`

	// Repo
	// The subversion URL to the repository.
	//
	// Default: <no value>
	// Required: true
	Repo string `yaml:"repo,omitempty" json:"repo,omitempty"`

	// Revision
	// Specific revision to checkout.
	//
	// Default: HEAD
	// Required: false
	Revision string `yaml:"revision,omitempty" json:"revision,omitempty"`

	// Switch
	// If C(no), do not call svn switch before update.
	//
	// Default: yes
	// Required: false
	Switch bool `yaml:"switch,omitempty" json:"switch,omitempty"`

	// Update
	// If C(no), do not retrieve new revisions from the origin repository.
	//
	// Default: yes
	// Required: false
	Update bool `yaml:"update,omitempty" json:"update,omitempty"`

	// Username
	// C(--username) parameter passed to svn.
	//
	// Default: <no value>
	// Required: false
	Username string `yaml:"username,omitempty" json:"username,omitempty"`

	// ValidateCerts
	// If C(no), passes the C(--trust-server-cert) flag to svn.
	// If C(yes), does not pass the flag.
	//
	// Default: no
	// Required: false
	ValidateCerts bool `yaml:"validate_certs,omitempty" json:"validate_certs,omitempty"`
}

type SubversionResult struct {
	types.CommonReturn
	Raw string
}

func (m *Subversion) GetResult() interface{} {
	return &m.Result
}

func (m *Subversion) GetResultRaw() string {
	return m.Result.Raw
}

func (m *Subversion) GetCommonResult() types.CommonReturn {
	return m.Result.CommonReturn
}

func (m *Subversion) GetParams() interface{} {
	return &m.Params
}

func (m *Subversion) GetType() string {
	return "subversion"
}
