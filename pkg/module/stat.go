package module

// Autogenerated file

import (
	"github.com/weakpixel/aig/pkg/types"
)

func init() {
	addModuleFactory("stat", func() Module {
		return NewStat()
	})
}

//
// Stat (stat) - Retrieve file or file system status
//
func NewStat() *Stat {
	return &Stat{}
}

// Stat (stat) - Retrieve file or file system status
//
// Retrieves facts for a file similar to the Linux/Unix 'stat' command.
// For Windows targets, use the M(ansible.windows.win_stat) module instead.
type Stat struct {
	Params StatParams
	Result StatResult
}

type StatParams struct {

	// ChecksumAlgorithm
	// Algorithm to determine checksum of file.
	// Will throw an error if the host is unable to use specified algorithm.
	// The remote host has to support the hashing method specified, C(md5) can be unavailable if the host is FIPS-140 compliant.
	//
	// Default: sha1
	// Required: false
	ChecksumAlgorithm string `yaml:"checksum_algorithm,omitempty" json:"checksum_algorithm,omitempty"`

	// Follow
	// Whether to follow symlinks.
	//
	// Default: no
	// Required: false
	Follow bool `yaml:"follow,omitempty" json:"follow,omitempty"`

	// GetAttributes
	// Get file attributes using lsattr tool if present.
	//
	// Default: yes
	// Required: false
	GetAttributes bool `yaml:"get_attributes,omitempty" json:"get_attributes,omitempty"`

	// GetChecksum
	// Whether to return a checksum of the file.
	//
	// Default: yes
	// Required: false
	GetChecksum bool `yaml:"get_checksum,omitempty" json:"get_checksum,omitempty"`

	// GetMime
	// Use file magic and return data about the nature of the file. this uses the 'file' utility found on most Linux/Unix systems.
	// This will add both C(mime_type) and C(charset) fields to the return, if possible.
	// In Ansible 2.3 this option changed from I(mime) to I(get_mime) and the default changed to C(yes).
	//
	// Default: yes
	// Required: false
	GetMime bool `yaml:"get_mime,omitempty" json:"get_mime,omitempty"`

	// Path
	// The full path of the file/object to get the facts of.
	//
	// Default: <no value>
	// Required: true
	Path string `yaml:"path,omitempty" json:"path,omitempty"`
}

type StatResult struct {
	types.CommonReturn
	Raw string

	// Stat
	// Dictionary containing all the stat data, some platforms might add additional fields.
	Stat interface{} `yaml:"stat,omitempty" json:"stat,omitempty"`
}

func (m *Stat) GetResult() interface{} {
	return &m.Result
}

func (m *Stat) GetResultRaw() string {
	return m.Result.Raw
}

func (m *Stat) GetCommonResult() types.CommonReturn {
	return m.Result.CommonReturn
}

func (m *Stat) GetParams() interface{} {
	return &m.Params
}

func (m *Stat) GetType() string {
	return "stat"
}
