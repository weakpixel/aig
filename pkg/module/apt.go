// Autogenerated
package module

import (
	"aig/pkg/ansible"
)

type Apt struct {
	ModuleName string
	Params     AptParams
	Result     AptResult
}

type AptParams struct {

	// AllowChangeHeldPackages
	AllowChangeHeldPackages bool `yaml:"allow_change_held_packages,omitempty" json:"allow_change_held_packages,omitempty"`

	// AllowDowngrade
	AllowDowngrade bool `yaml:"allow_downgrade,omitempty" json:"allow_downgrade,omitempty"`

	// AllowUnauthenticated
	AllowUnauthenticated bool `yaml:"allow_unauthenticated,omitempty" json:"allow_unauthenticated,omitempty"`

	// Autoclean
	Autoclean bool `yaml:"autoclean,omitempty" json:"autoclean,omitempty"`

	// Autoremove
	Autoremove bool `yaml:"autoremove,omitempty" json:"autoremove,omitempty"`

	// CacheValidTime
	CacheValidTime int `yaml:"cache_valid_time,omitempty" json:"cache_valid_time,omitempty"`

	// Clean
	Clean bool `yaml:"clean,omitempty" json:"clean,omitempty"`

	// Deb
	Deb string `yaml:"deb,omitempty" json:"deb,omitempty"`

	// DefaultRelease
	DefaultRelease string `yaml:"default_release,omitempty" json:"default_release,omitempty"`

	// DpkgOptions
	DpkgOptions string `yaml:"dpkg_options,omitempty" json:"dpkg_options,omitempty"`

	// FailOnAutoremove
	FailOnAutoremove bool `yaml:"fail_on_autoremove,omitempty" json:"fail_on_autoremove,omitempty"`

	// Force
	Force bool `yaml:"force,omitempty" json:"force,omitempty"`

	// ForceAptGet
	ForceAptGet bool `yaml:"force_apt_get,omitempty" json:"force_apt_get,omitempty"`

	// InstallRecommends
	InstallRecommends bool `yaml:"install_recommends,omitempty" json:"install_recommends,omitempty"`

	// LockTimeout
	LockTimeout int `yaml:"lock_timeout,omitempty" json:"lock_timeout,omitempty"`

	// Name
	Name []string `yaml:"name,omitempty" json:"name,omitempty"`

	// OnlyUpgrade
	OnlyUpgrade bool `yaml:"only_upgrade,omitempty" json:"only_upgrade,omitempty"`

	// PolicyRcD
	PolicyRcD int `yaml:"policy_rc_d,omitempty" json:"policy_rc_d,omitempty"`

	// Purge
	Purge bool `yaml:"purge,omitempty" json:"purge,omitempty"`

	// State
	State string `yaml:"state,omitempty" json:"state,omitempty"`

	// UpdateCache
	UpdateCache bool `yaml:"update_cache,omitempty" json:"update_cache,omitempty"`

	// UpdateCacheRetries
	UpdateCacheRetries int `yaml:"update_cache_retries,omitempty" json:"update_cache_retries,omitempty"`

	// UpdateCacheRetryMaxDelay
	UpdateCacheRetryMaxDelay int `yaml:"update_cache_retry_max_delay,omitempty" json:"update_cache_retry_max_delay,omitempty"`

	// Upgrade
	Upgrade string `yaml:"upgrade,omitempty" json:"upgrade,omitempty"`
}

type AptResult struct {
	Raw string

	// CacheUpdateTime
	CacheUpdateTime int `yaml:"cache_update_time,omitempty" json:"cache_update_time,omitempty"`

	// CacheUpdated
	CacheUpdated bool `yaml:"cache_updated,omitempty" json:"cache_updated,omitempty"`

	// Stderr
	Stderr string `yaml:"stderr,omitempty" json:"stderr,omitempty"`

	// Stdout
	Stdout string `yaml:"stdout,omitempty" json:"stdout,omitempty"`
}

func (m *Apt) Run() error {
	raw, err := ansible.Execute(m.ModuleName, m.Params, &m.Result)
	m.Result.Raw = raw
	return err
}

func NewApt() *Apt {
	return &Apt{
		ModuleName: "apt",
	}
}
