package module

// Autogenerated file

import (
	"fmt"
	"github.com/weakpixel/aig/pkg/types"
)

func init() {
	addModuleFactory("slurp", func() types.Module {
		return NewSlurp()
	})
}

//
// Slurp (slurp) - Slurps a file from remote nodes
//
func NewSlurp() *Slurp {
	module := Slurp{}
	// Create dynamic param values
	paramValues := map[string]types.Value{}
	paramValues["src"] = types.NewStringValue(&module.Params.Src)
	module.Params.values = paramValues

	// Create dynamic result values
	resultValues := map[string]types.Value{}

	resultValues["content"] = types.NewStringValue(&module.Result.Content)
	resultValues["encoding"] = types.NewStringValue(&module.Result.Encoding)
	resultValues["source"] = types.NewStringValue(&module.Result.Source)
	module.Result.values = resultValues

	return &module
}

// Slurp (slurp) - Slurps a file from remote nodes
//
// This module works like M(ansible.builtin.fetch). It is used for fetching a base64- encoded blob containing the data in a remote file.
//
// This module is also supported for Windows targets.
//
//
// Source: https://github.com/ansible/ansible/blob/v2.13.1/lib/ansible/modules/slurp.py
type Slurp struct {
	Params SlurpParams
	Result SlurpResult
}

type SlurpParams struct {

	// Src
	// The file on the remote system to fetch. This I(must) be a file, not a directory.
	//
	// Default: <no value>
	// Required: true
	Src string `yaml:"src,omitempty" json:"src,omitempty"`

	values map[string]types.Value
}

func (p *SlurpParams) Names() []string {
	names := []string{}
	for name := range p.values {
		names = append(names, name)
	}
	return names
}

func (p *SlurpParams) Set(name string, value interface{}) error {
	v, ok := p.values[name]
	if !ok {
		return fmt.Errorf("no param with name %q", name)
	}
	return v.Set(value)
}

func (p *SlurpParams) Get(name string) (interface{}, error) {
	v, ok := p.values[name]
	if !ok {
		return nil, fmt.Errorf("no param with name %q", name)
	}
	return v.Get(), nil
}

type SlurpResult struct {
	types.CommonReturn
	Raw string

	// Content
	// Encoded file content
	Content string `yaml:"content,omitempty" json:"content,omitempty"`

	// Encoding
	// Type of encoding used for file
	Encoding string `yaml:"encoding,omitempty" json:"encoding,omitempty"`

	// Source
	// Actual path of file slurped
	Source string `yaml:"source,omitempty" json:"source,omitempty"`

	values map[string]types.Value
}

func (r *SlurpResult) Names() []string {
	names := []string{}
	for name := range r.values {
		names = append(names, name)
	}
	return names
}

func (r *SlurpResult) Set(name string, value interface{}) error {
	v, ok := r.values[name]
	if !ok {
		return fmt.Errorf("no param with name %q", name)
	}
	return v.Set(value)
}

func (r *SlurpResult) Get(name string) (interface{}, error) {
	v, ok := r.values[name]
	if !ok {
		return nil, fmt.Errorf("no param with name %q", name)
	}
	return v.Get(), nil
}

func (m *Slurp) GetResult() types.Result {
	return &m.Result
}

func (m *Slurp) GetResultRaw() string {
	return m.Result.Raw
}

func (m *Slurp) GetCommonResult() types.CommonReturn {
	return m.Result.CommonReturn
}

func (m *Slurp) GetParams() types.Params {
	return &m.Params
}

func (m *Slurp) GetType() string {
	return "slurp"
}
