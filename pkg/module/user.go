package module

// Autogenerated file

import (
	"fmt"
	"github.com/weakpixel/aig/pkg/types"
)

func init() {
	addModuleFactory("user", func() types.Module {
		return NewUser()
	})
}

//
// User (user) - Manage user accounts
//
func NewUser() *User {
	module := User{}
	// Create dynamic param values
	paramValues := map[string]types.Value{}
	paramValues["append"] = types.NewBoolValue(&module.Params.Append)
	paramValues["authorization"] = types.NewStringValue(&module.Params.Authorization)
	paramValues["comment"] = types.NewStringValue(&module.Params.Comment)
	paramValues["create_home"] = types.NewBoolValue(&module.Params.CreateHome)
	paramValues["expires"] = types.NewFloat64Value(&module.Params.Expires)
	paramValues["force"] = types.NewBoolValue(&module.Params.Force)
	paramValues["generate_ssh_key"] = types.NewBoolValue(&module.Params.GenerateSshKey)
	paramValues["group"] = types.NewStringValue(&module.Params.Group)
	paramValues["groups"] = types.NewStringArrayValue(&module.Params.Groups)
	paramValues["hidden"] = types.NewBoolValue(&module.Params.Hidden)
	paramValues["home"] = types.NewStringValue(&module.Params.Home)
	paramValues["local"] = types.NewBoolValue(&module.Params.Local)
	paramValues["login_class"] = types.NewStringValue(&module.Params.LoginClass)
	paramValues["move_home"] = types.NewBoolValue(&module.Params.MoveHome)
	paramValues["name"] = types.NewStringValue(&module.Params.Name)
	paramValues["non_unique"] = types.NewBoolValue(&module.Params.NonUnique)
	paramValues["password"] = types.NewStringValue(&module.Params.Password)
	paramValues["password_expire_max"] = types.NewIntValue(&module.Params.PasswordExpireMax)
	paramValues["password_expire_min"] = types.NewIntValue(&module.Params.PasswordExpireMin)
	paramValues["password_lock"] = types.NewBoolValue(&module.Params.PasswordLock)
	paramValues["profile"] = types.NewStringValue(&module.Params.Profile)
	paramValues["remove"] = types.NewBoolValue(&module.Params.Remove)
	paramValues["role"] = types.NewStringValue(&module.Params.Role)
	paramValues["seuser"] = types.NewStringValue(&module.Params.Seuser)
	paramValues["shell"] = types.NewStringValue(&module.Params.Shell)
	paramValues["skeleton"] = types.NewStringValue(&module.Params.Skeleton)
	paramValues["ssh_key_bits"] = types.NewIntValue(&module.Params.SshKeyBits)
	paramValues["ssh_key_comment"] = types.NewStringValue(&module.Params.SshKeyComment)
	paramValues["ssh_key_file"] = types.NewStringValue(&module.Params.SshKeyFile)
	paramValues["ssh_key_passphrase"] = types.NewStringValue(&module.Params.SshKeyPassphrase)
	paramValues["ssh_key_type"] = types.NewStringValue(&module.Params.SshKeyType)
	paramValues["state"] = types.NewStringValue(&module.Params.State)
	paramValues["system"] = types.NewBoolValue(&module.Params.System)
	paramValues["uid"] = types.NewIntValue(&module.Params.Uid)
	paramValues["umask"] = types.NewStringValue(&module.Params.Umask)
	paramValues["update_password"] = types.NewStringValue(&module.Params.UpdatePassword)
	module.Params.values = paramValues

	// Create dynamic result values
	resultValues := map[string]types.Value{}

	resultValues["append"] = types.NewBoolValue(&module.Result.Append)
	resultValues["comment"] = types.NewStringValue(&module.Result.Comment)
	resultValues["create_home"] = types.NewBoolValue(&module.Result.CreateHome)
	resultValues["force"] = types.NewBoolValue(&module.Result.Force)
	resultValues["group"] = types.NewIntValue(&module.Result.Group)
	resultValues["groups"] = types.NewStringValue(&module.Result.Groups)
	resultValues["home"] = types.NewStringValue(&module.Result.Home)
	resultValues["move_home"] = types.NewBoolValue(&module.Result.MoveHome)
	resultValues["name"] = types.NewStringValue(&module.Result.Name)
	resultValues["password"] = types.NewStringValue(&module.Result.Password)
	resultValues["password_expire_max"] = types.NewIntValue(&module.Result.PasswordExpireMax)
	resultValues["password_expire_min"] = types.NewIntValue(&module.Result.PasswordExpireMin)
	resultValues["remove"] = types.NewBoolValue(&module.Result.Remove)
	resultValues["shell"] = types.NewStringValue(&module.Result.Shell)
	resultValues["ssh_fingerprint"] = types.NewStringValue(&module.Result.SshFingerprint)
	resultValues["ssh_key_file"] = types.NewStringValue(&module.Result.SshKeyFile)
	resultValues["ssh_public_key"] = types.NewStringValue(&module.Result.SshPublicKey)
	resultValues["stderr"] = types.NewStringValue(&module.Result.Stderr)
	resultValues["stdout"] = types.NewStringValue(&module.Result.Stdout)
	resultValues["system"] = types.NewBoolValue(&module.Result.System)
	resultValues["uid"] = types.NewIntValue(&module.Result.Uid)
	module.Result.values = resultValues

	return &module
}

// User (user) - Manage user accounts
//
// Manage user accounts and user attributes.
//
// For Windows targets, use the M(ansible.windows.win_user) module instead.
//
//
// Source: https://github.com/ansible/ansible/blob/v2.13.1/lib/ansible/modules/user.py
type User struct {
	Params UserParams
	Result UserResult
}

type UserParams struct {

	// Append
	// If C(yes), add the user to the groups specified in C(groups).
	// If C(no), user will only be added to the groups specified in C(groups), removing them from all other groups.
	//
	// Default: no
	// Required: false
	Append bool `yaml:"append,omitempty" json:"append,omitempty"`

	// Authorization
	// Sets the authorization of the user.
	// Does nothing when used with other platforms.
	// Can set multiple authorizations using comma separation.
	// To delete all authorizations, use C(authorization='').
	// Currently supported on Illumos/Solaris.
	//
	// Default: <no value>
	// Required: false
	Authorization string `yaml:"authorization,omitempty" json:"authorization,omitempty"`

	// Comment
	// Optionally sets the description (aka I(GECOS)) of user account.
	//
	// Default: <no value>
	// Required: false
	Comment string `yaml:"comment,omitempty" json:"comment,omitempty"`

	// CreateHome
	// Unless set to C(no), a home directory will be made for the user when the account is created or if the home directory does not exist.
	// Changed from C(createhome) to C(create_home) in Ansible 2.5.
	//
	// Default: yes
	// Required: false
	CreateHome bool `yaml:"create_home,omitempty" json:"create_home,omitempty"`

	// Expires
	// An expiry time for the user in epoch, it will be ignored on platforms that do not support this.
	// Currently supported on GNU/Linux, FreeBSD, and DragonFlyBSD.
	// Since Ansible 2.6 you can remove the expiry time by specifying a negative value. Currently supported on GNU/Linux and FreeBSD.
	//
	// Default: <no value>
	// Required: false
	Expires float64 `yaml:"expires,omitempty" json:"expires,omitempty"`

	// Force
	// This only affects C(state=absent), it forces removal of the user and associated directories on supported platforms.
	// The behavior is the same as C(userdel --force), check the man page for C(userdel) on your system for details and support.
	// When used with C(generate_ssh_key=yes) this forces an existing key to be overwritten.
	//
	// Default: no
	// Required: false
	Force bool `yaml:"force,omitempty" json:"force,omitempty"`

	// GenerateSshKey
	// Whether to generate a SSH key for the user in question.
	// This will B(not) overwrite an existing SSH key unless used with C(force=yes).
	//
	// Default: no
	// Required: false
	GenerateSshKey bool `yaml:"generate_ssh_key,omitempty" json:"generate_ssh_key,omitempty"`

	// Group
	// Optionally sets the user's primary group (takes a group name).
	//
	// Default: <no value>
	// Required: false
	Group string `yaml:"group,omitempty" json:"group,omitempty"`

	// Groups
	// List of groups user will be added to.
	// By default, the user is removed from all other groups. Configure C(append) to modify this.
	// When set to an empty string C(''), the user is removed from all groups except the primary group.
	// Before Ansible 2.3, the only input format allowed was a comma separated string.
	//
	// Default: <no value>
	// Required: false
	Groups []string `yaml:"groups,omitempty" json:"groups,omitempty"`

	// Hidden
	// macOS only, optionally hide the user from the login window and system preferences.
	// The default will be C(yes) if the I(system) option is used.
	//
	// Default: <no value>
	// Required: false
	Hidden bool `yaml:"hidden,omitempty" json:"hidden,omitempty"`

	// Home
	// Optionally set the user's home directory.
	//
	// Default: <no value>
	// Required: false
	Home string `yaml:"home,omitempty" json:"home,omitempty"`

	// Local
	// Forces the use of "local" command alternatives on platforms that implement it.
	// This is useful in environments that use centralized authentication when you want to manipulate the local users (in other words, it uses C(luseradd) instead of C(useradd)).
	// This will check C(/etc/passwd) for an existing account before invoking commands. If the local account database exists somewhere other than C(/etc/passwd), this setting will not work properly.
	// This requires that the above commands as well as C(/etc/passwd) must exist on the target host, otherwise it will be a fatal error.
	//
	// Default: no
	// Required: false
	Local bool `yaml:"local,omitempty" json:"local,omitempty"`

	// LoginClass
	// Optionally sets the user's login class, a feature of most BSD OSs.
	//
	// Default: <no value>
	// Required: false
	LoginClass string `yaml:"login_class,omitempty" json:"login_class,omitempty"`

	// MoveHome
	// If set to C(yes) when used with C(home: ), attempt to move the user's old home directory to the specified directory if it isn't there already and the old home exists.
	//
	// Default: no
	// Required: false
	MoveHome bool `yaml:"move_home,omitempty" json:"move_home,omitempty"`

	// Name
	// Name of the user to create, remove or modify.
	//
	// Default: <no value>
	// Required: true
	Name string `yaml:"name,omitempty" json:"name,omitempty"`

	// NonUnique
	// Optionally when used with the -u option, this option allows to change the user ID to a non-unique value.
	//
	// Default: no
	// Required: false
	NonUnique bool `yaml:"non_unique,omitempty" json:"non_unique,omitempty"`

	// Password
	// Optionally set the user's password to this crypted value.
	// On macOS systems, this value has to be cleartext. Beware of security issues.
	// To create a an account with a locked/disabled password on Linux systems, set this to C('!') or C('*').
	// To create a an account with a locked/disabled password on OpenBSD, set this to C('*************').
	// See L(FAQ entry,https://docs.ansible.com/ansible/latest/reference_appendices/faq.html#how-do-i-generate-encrypted-passwords-for-the-user-module) for details on various ways to generate these password values.
	//
	// Default: <no value>
	// Required: false
	Password string `yaml:"password,omitempty" json:"password,omitempty"`

	// PasswordExpireMax
	// Maximum number of days between password change.
	// Supported on Linux only.
	//
	// Default: <no value>
	// Required: false
	PasswordExpireMax int `yaml:"password_expire_max,omitempty" json:"password_expire_max,omitempty"`

	// PasswordExpireMin
	// Minimum number of days between password change.
	// Supported on Linux only.
	//
	// Default: <no value>
	// Required: false
	PasswordExpireMin int `yaml:"password_expire_min,omitempty" json:"password_expire_min,omitempty"`

	// PasswordLock
	// Lock the password (C(usermod -L), C(usermod -U), C(pw lock)).
	// Implementation differs by platform. This option does not always mean the user cannot login using other methods.
	// This option does not disable the user, only lock the password.
	// This must be set to C(False) in order to unlock a currently locked password. The absence of this parameter will not unlock a password.
	// Currently supported on Linux, FreeBSD, DragonFlyBSD, NetBSD, OpenBSD.
	//
	// Default: <no value>
	// Required: false
	PasswordLock bool `yaml:"password_lock,omitempty" json:"password_lock,omitempty"`

	// Profile
	// Sets the profile of the user.
	// Does nothing when used with other platforms.
	// Can set multiple profiles using comma separation.
	// To delete all the profiles, use C(profile='').
	// Currently supported on Illumos/Solaris.
	//
	// Default: <no value>
	// Required: false
	Profile string `yaml:"profile,omitempty" json:"profile,omitempty"`

	// Remove
	// This only affects C(state=absent), it attempts to remove directories associated with the user.
	// The behavior is the same as C(userdel --remove), check the man page for details and support.
	//
	// Default: no
	// Required: false
	Remove bool `yaml:"remove,omitempty" json:"remove,omitempty"`

	// Role
	// Sets the role of the user.
	// Does nothing when used with other platforms.
	// Can set multiple roles using comma separation.
	// To delete all roles, use C(role='').
	// Currently supported on Illumos/Solaris.
	//
	// Default: <no value>
	// Required: false
	Role string `yaml:"role,omitempty" json:"role,omitempty"`

	// Seuser
	// Optionally sets the seuser type (user_u) on selinux enabled systems.
	//
	// Default: <no value>
	// Required: false
	Seuser string `yaml:"seuser,omitempty" json:"seuser,omitempty"`

	// Shell
	// Optionally set the user's shell.
	// On macOS, before Ansible 2.5, the default shell for non-system users was C(/usr/bin/false). Since Ansible 2.5, the default shell for non-system users on macOS is C(/bin/bash).
	// See notes for details on how other operating systems determine the default shell by the underlying tool.
	//
	// Default: <no value>
	// Required: false
	Shell string `yaml:"shell,omitempty" json:"shell,omitempty"`

	// Skeleton
	// Optionally set a home skeleton directory.
	// Requires C(create_home) option!
	//
	// Default: <no value>
	// Required: false
	Skeleton string `yaml:"skeleton,omitempty" json:"skeleton,omitempty"`

	// SshKeyBits
	// Optionally specify number of bits in SSH key to create.
	// The default value depends on ssh-keygen.
	//
	// Default: <no value>
	// Required: false
	SshKeyBits int `yaml:"ssh_key_bits,omitempty" json:"ssh_key_bits,omitempty"`

	// SshKeyComment
	// Optionally define the comment for the SSH key.
	//
	// Default: ansible-generated on $HOSTNAME
	// Required: false
	SshKeyComment string `yaml:"ssh_key_comment,omitempty" json:"ssh_key_comment,omitempty"`

	// SshKeyFile
	// Optionally specify the SSH key filename.
	// If this is a relative filename then it will be relative to the user's home directory.
	// This parameter defaults to I(.ssh/id_rsa).
	//
	// Default: <no value>
	// Required: false
	SshKeyFile string `yaml:"ssh_key_file,omitempty" json:"ssh_key_file,omitempty"`

	// SshKeyPassphrase
	// Set a passphrase for the SSH key.
	// If no passphrase is provided, the SSH key will default to having no passphrase.
	//
	// Default: <no value>
	// Required: false
	SshKeyPassphrase string `yaml:"ssh_key_passphrase,omitempty" json:"ssh_key_passphrase,omitempty"`

	// SshKeyType
	// Optionally specify the type of SSH key to generate.
	// Available SSH key types will depend on implementation present on target host.
	//
	// Default: rsa
	// Required: false
	SshKeyType string `yaml:"ssh_key_type,omitempty" json:"ssh_key_type,omitempty"`

	// State
	// Whether the account should exist or not, taking action if the state is different from what is stated.
	//
	// Default: present
	// Required: false
	State string `yaml:"state,omitempty" json:"state,omitempty"`

	// System
	// When creating an account C(state=present), setting this to C(yes) makes the user a system account.
	// This setting cannot be changed on existing users.
	//
	// Default: no
	// Required: false
	System bool `yaml:"system,omitempty" json:"system,omitempty"`

	// Uid
	// Optionally sets the I(UID) of the user.
	//
	// Default: <no value>
	// Required: false
	Uid int `yaml:"uid,omitempty" json:"uid,omitempty"`

	// Umask
	// Sets the umask of the user.
	// Does nothing when used with other platforms.
	// Currently supported on Linux.
	// Requires C(local) is omitted or False.
	//
	// Default: <no value>
	// Required: false
	Umask string `yaml:"umask,omitempty" json:"umask,omitempty"`

	// UpdatePassword
	// C(always) will update passwords if they differ.
	// C(on_create) will only set the password for newly created users.
	//
	// Default: always
	// Required: false
	UpdatePassword string `yaml:"update_password,omitempty" json:"update_password,omitempty"`

	values map[string]types.Value
}

func (p *UserParams) Names() []string {
	names := []string{}
	for name := range p.values {
		names = append(names, name)
	}
	return names
}

func (p *UserParams) Set(name string, value interface{}) error {
	v, ok := p.values[name]
	if !ok {
		return fmt.Errorf("no param with name %q", name)
	}
	return v.Set(value)
}

func (p *UserParams) Get(name string) (interface{}, error) {
	v, ok := p.values[name]
	if !ok {
		return nil, fmt.Errorf("no param with name %q", name)
	}
	return v.Get(), nil
}

type UserResult struct {
	types.CommonReturn
	Raw string

	// Append
	// Whether or not to append the user to groups.
	Append bool `yaml:"append,omitempty" json:"append,omitempty"`

	// Comment
	// Comment section from passwd file, usually the user name.
	Comment string `yaml:"comment,omitempty" json:"comment,omitempty"`

	// CreateHome
	// Whether or not to create the home directory.
	CreateHome bool `yaml:"create_home,omitempty" json:"create_home,omitempty"`

	// Force
	// Whether or not a user account was forcibly deleted.
	Force bool `yaml:"force,omitempty" json:"force,omitempty"`

	// Group
	// Primary user group ID
	Group int `yaml:"group,omitempty" json:"group,omitempty"`

	// Groups
	// List of groups of which the user is a member.
	Groups string `yaml:"groups,omitempty" json:"groups,omitempty"`

	// Home
	// Path to user's home directory.
	Home string `yaml:"home,omitempty" json:"home,omitempty"`

	// MoveHome
	// Whether or not to move an existing home directory.
	MoveHome bool `yaml:"move_home,omitempty" json:"move_home,omitempty"`

	// Name
	// User account name.
	Name string `yaml:"name,omitempty" json:"name,omitempty"`

	// Password
	// Masked value of the password.
	Password string `yaml:"password,omitempty" json:"password,omitempty"`

	// PasswordExpireMax
	// Maximum number of days during which a password is valid.
	PasswordExpireMax int `yaml:"password_expire_max,omitempty" json:"password_expire_max,omitempty"`

	// PasswordExpireMin
	// Minimum number of days between password change
	PasswordExpireMin int `yaml:"password_expire_min,omitempty" json:"password_expire_min,omitempty"`

	// Remove
	// Whether or not to remove the user account.
	Remove bool `yaml:"remove,omitempty" json:"remove,omitempty"`

	// Shell
	// User login shell.
	Shell string `yaml:"shell,omitempty" json:"shell,omitempty"`

	// SshFingerprint
	// Fingerprint of generated SSH key.
	SshFingerprint string `yaml:"ssh_fingerprint,omitempty" json:"ssh_fingerprint,omitempty"`

	// SshKeyFile
	// Path to generated SSH private key file.
	SshKeyFile string `yaml:"ssh_key_file,omitempty" json:"ssh_key_file,omitempty"`

	// SshPublicKey
	// Generated SSH public key file.
	SshPublicKey string `yaml:"ssh_public_key,omitempty" json:"ssh_public_key,omitempty"`

	// Stderr
	// Standard error from running commands.
	Stderr string `yaml:"stderr,omitempty" json:"stderr,omitempty"`

	// Stdout
	// Standard output from running commands.
	Stdout string `yaml:"stdout,omitempty" json:"stdout,omitempty"`

	// System
	// Whether or not the account is a system account.
	System bool `yaml:"system,omitempty" json:"system,omitempty"`

	// Uid
	// User ID of the user account.
	Uid int `yaml:"uid,omitempty" json:"uid,omitempty"`

	values map[string]types.Value
}

func (r *UserResult) Names() []string {
	names := []string{}
	for name := range r.values {
		names = append(names, name)
	}
	return names
}

func (r *UserResult) Set(name string, value interface{}) error {
	v, ok := r.values[name]
	if !ok {
		return fmt.Errorf("no param with name %q", name)
	}
	return v.Set(value)
}

func (r *UserResult) Get(name string) (interface{}, error) {
	v, ok := r.values[name]
	if !ok {
		return nil, fmt.Errorf("no param with name %q", name)
	}
	return v.Get(), nil
}

func (m *User) GetResult() types.Result {
	return &m.Result
}

func (m *User) GetResultRaw() string {
	return m.Result.Raw
}

func (m *User) GetCommonResult() types.CommonReturn {
	return m.Result.CommonReturn
}

func (m *User) GetParams() types.Params {
	return &m.Params
}

func (m *User) GetType() string {
	return "user"
}
