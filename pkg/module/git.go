package module

// Autogenerated file

import (
	"github.com/weakpixel/aig/pkg/types"
)

func init() {
	addModuleFactory("git", func() Module {
		return NewGit()
	})
}

//
// Git (git) - Deploy software (or files) from git checkouts
//
func NewGit() *Git {
	return &Git{}
}

// Git (git) - Deploy software (or files) from git checkouts
//
// Manage I(git) checkouts of repositories to deploy files or software.
type Git struct {
	Params GitParams
	Result GitResult
}

type GitParams struct {

	// AcceptHostkey
	// Will ensure or not that "-o StrictHostKeyChecking=no" is present as an ssh option.
	// Be aware that this disables a protection against MITM attacks.
	// Those using OpenSSH >= 7.5 might want to set I(ssh_opt) to 'StrictHostKeyChecking=accept-new' instead, it does not remove the MITM issue but it does restrict it to the first attempt.
	//
	// Default: no
	// Required: false
	AcceptHostkey bool `yaml:"accept_hostkey,omitempty" json:"accept_hostkey,omitempty"`

	// AcceptNewhostkey
	// As of OpenSSH 7.5, "-o StrictHostKeyChecking=accept-new" can be used which is safer and will only accepts host keys which are not present or are the same. if C(yes), ensure that "-o StrictHostKeyChecking=accept-new" is present as an ssh option.
	//
	// Default: no
	// Required: false
	AcceptNewhostkey bool `yaml:"accept_newhostkey,omitempty" json:"accept_newhostkey,omitempty"`

	// Archive
	// Specify archive file path with extension. If specified, creates an archive file of the specified format containing the tree structure for the source tree. Allowed archive formats ["zip", "tar.gz", "tar", "tgz"].
	// This will clone and perform git archive from local directory as not all git servers support git archive.
	//
	// Default: <no value>
	// Required: false
	Archive string `yaml:"archive,omitempty" json:"archive,omitempty"`

	// ArchivePrefix
	// Specify a prefix to add to each file path in archive. Requires I(archive) to be specified.
	//
	// Default: <no value>
	// Required: false
	ArchivePrefix string `yaml:"archive_prefix,omitempty" json:"archive_prefix,omitempty"`

	// Bare
	// If C(yes), repository will be created as a bare repo, otherwise it will be a standard repo with a workspace.
	//
	// Default: no
	// Required: false
	Bare bool `yaml:"bare,omitempty" json:"bare,omitempty"`

	// Clone
	// If C(no), do not clone the repository even if it does not exist locally.
	//
	// Default: yes
	// Required: false
	Clone bool `yaml:"clone,omitempty" json:"clone,omitempty"`

	// Depth
	// Create a shallow clone with a history truncated to the specified number or revisions. The minimum possible value is C(1), otherwise ignored. Needs I(git>=1.9.1) to work correctly.
	//
	// Default: <no value>
	// Required: false
	Depth int `yaml:"depth,omitempty" json:"depth,omitempty"`

	// Dest
	// The path of where the repository should be checked out. This is equivalent to C(git clone [repo_url] [directory]). The repository named in I(repo) is not appended to this path and the destination directory must be empty. This parameter is required, unless I(clone) is set to C(no).
	//
	// Default: <no value>
	// Required: true
	Dest string `yaml:"dest,omitempty" json:"dest,omitempty"`

	// Executable
	// Path to git executable to use. If not supplied, the normal mechanism for resolving binary paths will be used.
	//
	// Default: <no value>
	// Required: false
	Executable string `yaml:"executable,omitempty" json:"executable,omitempty"`

	// Force
	// If C(yes), any modified files in the working repository will be discarded.  Prior to 0.7, this was always C(yes) and could not be disabled.  Prior to 1.9, the default was C(yes).
	//
	// Default: no
	// Required: false
	Force bool `yaml:"force,omitempty" json:"force,omitempty"`

	// GpgWhitelist
	// A list of trusted GPG fingerprints to compare to the fingerprint of the GPG-signed commit.
	// Only used when I(verify_commit=yes).
	// Use of this feature requires Git 2.6+ due to its reliance on git's C(--raw) flag to C(verify-commit) and C(verify-tag).
	//
	// Default: []
	// Required: false
	GpgWhitelist []string `yaml:"gpg_whitelist,omitempty" json:"gpg_whitelist,omitempty"`

	// KeyFile
	// Specify an optional private key file path, on the target host, to use for the checkout.
	// This ensures 'IdentitiesOnly=yes' is present in ssh_opts.
	//
	// Default: <no value>
	// Required: false
	KeyFile string `yaml:"key_file,omitempty" json:"key_file,omitempty"`

	// Recursive
	// If C(no), repository will be cloned without the --recursive option, skipping sub-modules.
	//
	// Default: yes
	// Required: false
	Recursive bool `yaml:"recursive,omitempty" json:"recursive,omitempty"`

	// Reference
	// Reference repository (see "git clone --reference ...").
	//
	// Default: <no value>
	// Required: false
	Reference string `yaml:"reference,omitempty" json:"reference,omitempty"`

	// Refspec
	// Add an additional refspec to be fetched. If version is set to a I(SHA-1) not reachable from any branch or tag, this option may be necessary to specify the ref containing the I(SHA-1). Uses the same syntax as the C(git fetch) command. An example value could be "refs/meta/config".
	//
	// Default: <no value>
	// Required: false
	Refspec string `yaml:"refspec,omitempty" json:"refspec,omitempty"`

	// Remote
	// Name of the remote.
	//
	// Default: origin
	// Required: false
	Remote string `yaml:"remote,omitempty" json:"remote,omitempty"`

	// Repo
	// git, SSH, or HTTP(S) protocol address of the git repository.
	//
	// Default: <no value>
	// Required: true
	Repo string `yaml:"repo,omitempty" json:"repo,omitempty"`

	// SeparateGitDir
	// The path to place the cloned repository. If specified, Git repository can be separated from working tree.
	//
	// Default: <no value>
	// Required: false
	SeparateGitDir string `yaml:"separate_git_dir,omitempty" json:"separate_git_dir,omitempty"`

	// SingleBranch
	// Clone only the history leading to the tip of the specified revision.
	//
	// Default: no
	// Required: false
	SingleBranch bool `yaml:"single_branch,omitempty" json:"single_branch,omitempty"`

	// SshOpts
	// Options git will pass to ssh when used as protocol, it works via C(git)'s GIT_SSH/GIT_SSH_COMMAND environment variables.
	// For older versions it appends GIT_SSH_OPTS (specific to this module) to the variables above or via a wrapper script.
	// Other options can add to this list, like I(key_file) and I(accept_hostkey).
	// An example value could be "-o StrictHostKeyChecking=no" (although this particular option is better set by I(accept_hostkey)).
	// The module ensures that 'BatchMode=yes' is always present to avoid prompts.
	//
	// Default: <no value>
	// Required: false
	SshOpts string `yaml:"ssh_opts,omitempty" json:"ssh_opts,omitempty"`

	// TrackSubmodules
	// If C(yes), submodules will track the latest commit on their master branch (or other branch specified in .gitmodules).  If C(no), submodules will be kept at the revision specified by the main project. This is equivalent to specifying the --remote flag to git submodule update.
	//
	// Default: no
	// Required: false
	TrackSubmodules bool `yaml:"track_submodules,omitempty" json:"track_submodules,omitempty"`

	// Umask
	// The umask to set before doing any checkouts, or any other repository maintenance.
	//
	// Default: <no value>
	// Required: false
	Umask string `yaml:"umask,omitempty" json:"umask,omitempty"`

	// Update
	// If C(no), do not retrieve new revisions from the origin repository.
	// Operations like archive will work on the existing (old) repository and might not respond to changes to the options version or remote.
	//
	// Default: yes
	// Required: false
	Update bool `yaml:"update,omitempty" json:"update,omitempty"`

	// VerifyCommit
	// If C(yes), when cloning or checking out a I(version) verify the signature of a GPG signed commit. This requires git version>=2.1.0 to be installed. The commit MUST be signed and the public key MUST be present in the GPG keyring.
	//
	// Default: no
	// Required: false
	VerifyCommit bool `yaml:"verify_commit,omitempty" json:"verify_commit,omitempty"`

	// Version
	// What version of the repository to check out. This can be the literal string C(HEAD), a branch name, a tag name. It can also be a I(SHA-1) hash, in which case I(refspec) needs to be specified if the given revision is not already available.
	//
	// Default: HEAD
	// Required: false
	Version string `yaml:"version,omitempty" json:"version,omitempty"`
}

type GitResult struct {
	types.CommonReturn
	Raw string

	// After
	// Last commit revision of the repository retrieved during the update.
	After string `yaml:"after,omitempty" json:"after,omitempty"`

	// Before
	// Commit revision before the repository was updated, "null" for new repository.
	Before string `yaml:"before,omitempty" json:"before,omitempty"`

	// GitDirBefore
	// Contains the original path of .git directory if it is changed.
	GitDirBefore string `yaml:"git_dir_before,omitempty" json:"git_dir_before,omitempty"`

	// GitDirNow
	// Contains the new path of .git directory if it is changed.
	GitDirNow string `yaml:"git_dir_now,omitempty" json:"git_dir_now,omitempty"`

	// RemoteUrlChanged
	// Contains True or False whether or not the remote URL was changed.
	RemoteUrlChanged bool `yaml:"remote_url_changed,omitempty" json:"remote_url_changed,omitempty"`

	// Warnings
	// List of warnings if requested features were not available due to a too old git version.
	Warnings string `yaml:"warnings,omitempty" json:"warnings,omitempty"`
}

func (m *Git) GetResult() interface{} {
	return &m.Result
}

func (m *Git) GetResultRaw() string {
	return m.Result.Raw
}

func (m *Git) GetCommonResult() types.CommonReturn {
	return m.Result.CommonReturn
}

func (m *Git) GetParams() interface{} {
	return &m.Params
}

func (m *Git) GetType() string {
	return "git"
}
