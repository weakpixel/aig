package module

import (
	b64 "encoding/base64"
	"github.com/weakpixel/aig/pkg/types"
)

func GetSpec() (*types.Spec, error) {
	jsonRaw, err := b64.StdEncoding.DecodeString(moduleSpecJSON)
	if err != nil {
		return nil, err
	}
	return types.Parse(jsonRaw)
}

const (
	// ModuleSpecJson contains source model spec base64 encoded
	moduleSpecJSON = "{"modules":[{"normalizedName":"Apt","module":"apt","short_description":"Manages apt-packages","description":["Manages I(apt) packages (such as for Debian/Ubuntu)."],"options":{"allow_change_held_packages":{"normalizedName":"AllowChangeHeldPackages","structTag":"`yaml:\"allow_change_held_packages,omitempty\" json:\"allow_change_held_packages,omitempty\"`","goType":"bool","goElements":"","description":["Allows changing the version of a package which is on the apt hold list"],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"allow_downgrade":{"normalizedName":"AllowDowngrade","structTag":"`yaml:\"allow_downgrade,omitempty\" json:\"allow_downgrade,omitempty\"`","goType":"bool","goElements":"","description":["Corresponds to the C(--allow-downgrades) option for I(apt).","This option enables the named package and version to replace an already installed higher version of that package.","Note that setting I(allow_downgrade=true) can make this module behave in a non-idempotent way.","(The task could end up with a set of packages that does not match the complete list of specified packages to install)."],"type":"bool","required":false,"default":"no","elements":"","aliases":["allow-downgrade","allow_downgrades","allow-downgrades"]},"allow_unauthenticated":{"normalizedName":"AllowUnauthenticated","structTag":"`yaml:\"allow_unauthenticated,omitempty\" json:\"allow_unauthenticated,omitempty\"`","goType":"bool","goElements":"","description":["Ignore if packages cannot be authenticated. This is useful for bootstrapping environments that manage their own apt-key setup.","C(allow_unauthenticated) is only supported with state: I(install)/I(present)"],"type":"bool","required":false,"default":"no","elements":"","aliases":["allow-unauthenticated"]},"autoclean":{"normalizedName":"Autoclean","structTag":"`yaml:\"autoclean,omitempty\" json:\"autoclean,omitempty\"`","goType":"bool","goElements":"","description":["If C(yes), cleans the local repository of retrieved package files that can no longer be downloaded."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"autoremove":{"normalizedName":"Autoremove","structTag":"`yaml:\"autoremove,omitempty\" json:\"autoremove,omitempty\"`","goType":"bool","goElements":"","description":["If C(yes), remove unused dependency packages for all module states except I(build-dep). It can also be used as the only option.","Previous to version 2.4, autoclean was also an alias for autoremove, now it is its own separate command. See documentation for further information."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"cache_valid_time":{"normalizedName":"CacheValidTime","structTag":"`yaml:\"cache_valid_time,omitempty\" json:\"cache_valid_time,omitempty\"`","goType":"int","goElements":"","description":["Update the apt cache if it is older than the I(cache_valid_time). This option is set in seconds.","As of Ansible 2.4, if explicitly set, this sets I(update_cache=yes)."],"type":"int","required":false,"default":0,"elements":"","aliases":null},"clean":{"normalizedName":"Clean","structTag":"`yaml:\"clean,omitempty\" json:\"clean,omitempty\"`","goType":"bool","goElements":"","description":["Run the equivalent of C(apt-get clean) to clear out the local repository of retrieved package files. It removes everything but the lock file from /var/cache/apt/archives/ and /var/cache/apt/archives/partial/.","Can be run as part of the package installation (clean runs before install) or as a separate step."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"deb":{"normalizedName":"Deb","structTag":"`yaml:\"deb,omitempty\" json:\"deb,omitempty\"`","goType":"string","goElements":"","description":["Path to a .deb package on the remote machine.","If :// in the path, ansible will attempt to download deb before installing. (Version added 2.1)","Requires the C(xz-utils) package to extract the control file of the deb package to install."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"default_release":{"normalizedName":"DefaultRelease","structTag":"`yaml:\"default_release,omitempty\" json:\"default_release,omitempty\"`","goType":"string","goElements":"","description":["Corresponds to the C(-t) option for I(apt) and sets pin priorities"],"type":"str","required":false,"default":null,"elements":"","aliases":["default-release"]},"dpkg_options":{"normalizedName":"DpkgOptions","structTag":"`yaml:\"dpkg_options,omitempty\" json:\"dpkg_options,omitempty\"`","goType":"string","goElements":"","description":["Add dpkg options to apt command. Defaults to '-o \"Dpkg::Options::=--force-confdef\" -o \"Dpkg::Options::=--force-confold\"'","Options should be supplied as comma separated list"],"type":"str","required":false,"default":"force-confdef,force-confold","elements":"","aliases":null},"fail_on_autoremove":{"normalizedName":"FailOnAutoremove","structTag":"`yaml:\"fail_on_autoremove,omitempty\" json:\"fail_on_autoremove,omitempty\"`","goType":"bool","goElements":"","description":["Corresponds to the C(--no-remove) option for C(apt).","If C(yes), it is ensured that no packages will be removed or the task will fail.","C(fail_on_autoremove) is only supported with state except C(absent)"],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"force":{"normalizedName":"Force","structTag":"`yaml:\"force,omitempty\" json:\"force,omitempty\"`","goType":"bool","goElements":"","description":["Corresponds to the C(--force-yes) to I(apt-get) and implies C(allow_unauthenticated: yes) and C(allow_downgrade: yes)","This option will disable checking both the packages' signatures and the certificates of the web servers they are downloaded from.","This option *is not* the equivalent of passing the C(-f) flag to I(apt-get) on the command line","**This is a destructive operation with the potential to destroy your system, and it should almost never be used.** Please also see C(man apt-get) for more information."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"force_apt_get":{"normalizedName":"ForceAptGet","structTag":"`yaml:\"force_apt_get,omitempty\" json:\"force_apt_get,omitempty\"`","goType":"bool","goElements":"","description":["Force usage of apt-get instead of aptitude"],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"install_recommends":{"normalizedName":"InstallRecommends","structTag":"`yaml:\"install_recommends,omitempty\" json:\"install_recommends,omitempty\"`","goType":"bool","goElements":"","description":["Corresponds to the C(--no-install-recommends) option for I(apt). C(yes) installs recommended packages.  C(no) does not install recommended packages. By default, Ansible will use the same defaults as the operating system. Suggested packages are never installed."],"type":"bool","required":false,"default":null,"elements":"","aliases":["install-recommends"]},"lock_timeout":{"normalizedName":"LockTimeout","structTag":"`yaml:\"lock_timeout,omitempty\" json:\"lock_timeout,omitempty\"`","goType":"int","goElements":"","description":["How many seconds will this action wait to acquire a lock on the apt db.","Sometimes there is a transitory lock and this will retry at least until timeout is hit."],"type":"int","required":false,"default":60,"elements":"","aliases":null},"name":{"normalizedName":"Name","structTag":"`yaml:\"name,omitempty\" json:\"name,omitempty\"`","goType":"[]string","goElements":"","description":["A list of package names, like C(foo), or package specifier with version, like C(foo=1.0) or C(foo\u003e=1.0). Name wildcards (fnmatch) like C(apt*) and version wildcards like C(foo=1.0*) are also supported."],"type":"list","required":false,"default":null,"elements":"str","aliases":["package","pkg"]},"only_upgrade":{"normalizedName":"OnlyUpgrade","structTag":"`yaml:\"only_upgrade,omitempty\" json:\"only_upgrade,omitempty\"`","goType":"bool","goElements":"","description":["Only upgrade a package if it is already installed."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"policy_rc_d":{"normalizedName":"PolicyRcD","structTag":"`yaml:\"policy_rc_d,omitempty\" json:\"policy_rc_d,omitempty\"`","goType":"int","goElements":"","description":["Force the exit code of /usr/sbin/policy-rc.d.","For example, if I(policy_rc_d=101) the installed package will not trigger a service start.","If /usr/sbin/policy-rc.d already exists, it is backed up and restored after the package installation.","If C(null), the /usr/sbin/policy-rc.d isn't created/changed."],"type":"int","required":false,"default":null,"elements":"","aliases":null},"purge":{"normalizedName":"Purge","structTag":"`yaml:\"purge,omitempty\" json:\"purge,omitempty\"`","goType":"bool","goElements":"","description":["Will force purging of configuration files if the module state is set to I(absent)."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"state":{"normalizedName":"State","structTag":"`yaml:\"state,omitempty\" json:\"state,omitempty\"`","goType":"string","goElements":"","description":["Indicates the desired package state. C(latest) ensures that the latest version is installed. C(build-dep) ensures the package build dependencies are installed. C(fixed) attempt to correct a system with broken dependencies in place."],"type":"str","required":false,"default":"present","elements":"","aliases":null},"update_cache":{"normalizedName":"UpdateCache","structTag":"`yaml:\"update_cache,omitempty\" json:\"update_cache,omitempty\"`","goType":"bool","goElements":"","description":["Run the equivalent of C(apt-get update) before the operation. Can be run as part of the package installation or as a separate step.","Default is not to update the cache."],"type":"bool","required":false,"default":null,"elements":"","aliases":["update-cache"]},"update_cache_retries":{"normalizedName":"UpdateCacheRetries","structTag":"`yaml:\"update_cache_retries,omitempty\" json:\"update_cache_retries,omitempty\"`","goType":"int","goElements":"","description":["Amount of retries if the cache update fails. Also see I(update_cache_retry_max_delay)."],"type":"int","required":false,"default":5,"elements":"","aliases":null},"update_cache_retry_max_delay":{"normalizedName":"UpdateCacheRetryMaxDelay","structTag":"`yaml:\"update_cache_retry_max_delay,omitempty\" json:\"update_cache_retry_max_delay,omitempty\"`","goType":"int","goElements":"","description":["Use an exponential backoff delay for each retry (see I(update_cache_retries)) up to this max delay in seconds."],"type":"int","required":false,"default":12,"elements":"","aliases":null},"upgrade":{"normalizedName":"Upgrade","structTag":"`yaml:\"upgrade,omitempty\" json:\"upgrade,omitempty\"`","goType":"string","goElements":"","description":["If yes or safe, performs an aptitude safe-upgrade.","If full, performs an aptitude full-upgrade.","If dist, performs an apt-get dist-upgrade.","Note: This does not upgrade a specific package, use state=latest for that.","Note: Since 2.4, apt-get is used as a fall-back if aptitude is not present."],"type":"str","required":false,"default":"no","elements":"","aliases":null}},"returns":{"cache_update_time":{"normalizedName":"CacheUpdateTime","description":"time of the last cache update (0 if unknown)","returned":"success, in some cases","type":"int","sample":1425828348000,"goType":"int","structTag":"`yaml:\"cache_update_time,omitempty\" json:\"cache_update_time,omitempty\"`"},"cache_updated":{"normalizedName":"CacheUpdated","description":"if the cache was updated or not","returned":"success, in some cases","type":"bool","sample":true,"goType":"bool","structTag":"`yaml:\"cache_updated,omitempty\" json:\"cache_updated,omitempty\"`"},"stderr":{"normalizedName":"Stderr","description":"error output from apt","returned":"success, when needed","type":"str","sample":"AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to ...","goType":"string","structTag":"`yaml:\"stderr,omitempty\" json:\"stderr,omitempty\"`"},"stdout":{"normalizedName":"Stdout","description":"output from apt","returned":"success, when needed","type":"str","sample":"Reading package lists... Building dependency tree... Reading state information... The following extra packages will be installed: apache2-bin ...","goType":"string","structTag":"`yaml:\"stdout,omitempty\" json:\"stdout,omitempty\"`"}},"doc":"\n---\nmodule: apt\nshort_description: Manages apt-packages\ndescription:\n  - Manages I(apt) packages (such as for Debian/Ubuntu).\nversion_added: \"0.0.2\"\noptions:\n  name:\n    description:\n      - A list of package names, like C(foo), or package specifier with version, like C(foo=1.0) or C(foo\u003e=1.0).\n        Name wildcards (fnmatch) like C(apt*) and version wildcards like C(foo=1.0*) are also supported.\n    aliases: [ package, pkg ]\n    type: list\n    elements: str\n  state:\n    description:\n      - Indicates the desired package state. C(latest) ensures that the latest version is installed. C(build-dep) ensures the package build dependencies\n        are installed. C(fixed) attempt to correct a system with broken dependencies in place.\n    type: str\n    default: present\n    choices: [ absent, build-dep, latest, present, fixed ]\n  update_cache:\n    description:\n      - Run the equivalent of C(apt-get update) before the operation. Can be run as part of the package installation or as a separate step.\n      - Default is not to update the cache.\n    aliases: [ update-cache ]\n    type: bool\n  update_cache_retries:\n    description:\n      - Amount of retries if the cache update fails. Also see I(update_cache_retry_max_delay).\n    type: int\n    default: 5\n    version_added: '2.10'\n  update_cache_retry_max_delay:\n    description:\n      - Use an exponential backoff delay for each retry (see I(update_cache_retries)) up to this max delay in seconds.\n    type: int\n    default: 12\n    version_added: '2.10'\n  cache_valid_time:\n    description:\n      - Update the apt cache if it is older than the I(cache_valid_time). This option is set in seconds.\n      - As of Ansible 2.4, if explicitly set, this sets I(update_cache=yes).\n    type: int\n    default: 0\n  purge:\n    description:\n     - Will force purging of configuration files if the module state is set to I(absent).\n    type: bool\n    default: 'no'\n  default_release:\n    description:\n      - Corresponds to the C(-t) option for I(apt) and sets pin priorities\n    aliases: [ default-release ]\n    type: str\n  install_recommends:\n    description:\n      - Corresponds to the C(--no-install-recommends) option for I(apt). C(yes) installs recommended packages.  C(no) does not install\n        recommended packages. By default, Ansible will use the same defaults as the operating system. Suggested packages are never installed.\n    aliases: [ install-recommends ]\n    type: bool\n  force:\n    description:\n      - 'Corresponds to the C(--force-yes) to I(apt-get) and implies C(allow_unauthenticated: yes) and C(allow_downgrade: yes)'\n      - \"This option will disable checking both the packages' signatures and the certificates of the\n        web servers they are downloaded from.\"\n      - 'This option *is not* the equivalent of passing the C(-f) flag to I(apt-get) on the command line'\n      - '**This is a destructive operation with the potential to destroy your system, and it should almost never be used.**\n         Please also see C(man apt-get) for more information.'\n    type: bool\n    default: 'no'\n  clean:\n    description:\n      - Run the equivalent of C(apt-get clean) to clear out the local repository of retrieved package files. It removes everything but\n        the lock file from /var/cache/apt/archives/ and /var/cache/apt/archives/partial/.\n      - Can be run as part of the package installation (clean runs before install) or as a separate step.\n    type: bool\n    default: 'no'\n    version_added: \"2.13\"\n  allow_unauthenticated:\n    description:\n      - Ignore if packages cannot be authenticated. This is useful for bootstrapping environments that manage their own apt-key setup.\n      - 'C(allow_unauthenticated) is only supported with state: I(install)/I(present)'\n    aliases: [ allow-unauthenticated ]\n    type: bool\n    default: 'no'\n    version_added: \"2.1\"\n  allow_downgrade:\n    description:\n      - Corresponds to the C(--allow-downgrades) option for I(apt).\n      - This option enables the named package and version to replace an already installed higher version of that package.\n      - Note that setting I(allow_downgrade=true) can make this module behave in a non-idempotent way.\n      - (The task could end up with a set of packages that does not match the complete list of specified packages to install).\n    aliases: [ allow-downgrade, allow_downgrades, allow-downgrades ]\n    type: bool\n    default: 'no'\n    version_added: \"2.12\"\n  allow_change_held_packages:\n    description:\n      - Allows changing the version of a package which is on the apt hold list\n    type: bool\n    default: 'no'\n    version_added: '2.13'\n  upgrade:\n    description:\n      - If yes or safe, performs an aptitude safe-upgrade.\n      - If full, performs an aptitude full-upgrade.\n      - If dist, performs an apt-get dist-upgrade.\n      - 'Note: This does not upgrade a specific package, use state=latest for that.'\n      - 'Note: Since 2.4, apt-get is used as a fall-back if aptitude is not present.'\n    version_added: \"1.1\"\n    choices: [ dist, full, 'no', safe, 'yes' ]\n    default: 'no'\n    type: str\n  dpkg_options:\n    description:\n      - Add dpkg options to apt command. Defaults to '-o \"Dpkg::Options::=--force-confdef\" -o \"Dpkg::Options::=--force-confold\"'\n      - Options should be supplied as comma separated list\n    default: force-confdef,force-confold\n    type: str\n  deb:\n     description:\n       - Path to a .deb package on the remote machine.\n       - If :// in the path, ansible will attempt to download deb before installing. (Version added 2.1)\n       - Requires the C(xz-utils) package to extract the control file of the deb package to install.\n     type: path\n     required: false\n     version_added: \"1.6\"\n  autoremove:\n    description:\n      - If C(yes), remove unused dependency packages for all module states except I(build-dep). It can also be used as the only option.\n      - Previous to version 2.4, autoclean was also an alias for autoremove, now it is its own separate command. See documentation for further information.\n    type: bool\n    default: 'no'\n    version_added: \"2.1\"\n  autoclean:\n    description:\n      - If C(yes), cleans the local repository of retrieved package files that can no longer be downloaded.\n    type: bool\n    default: 'no'\n    version_added: \"2.4\"\n  policy_rc_d:\n    description:\n      - Force the exit code of /usr/sbin/policy-rc.d.\n      - For example, if I(policy_rc_d=101) the installed package will not trigger a service start.\n      - If /usr/sbin/policy-rc.d already exists, it is backed up and restored after the package installation.\n      - If C(null), the /usr/sbin/policy-rc.d isn't created/changed.\n    type: int\n    default: null\n    version_added: \"2.8\"\n  only_upgrade:\n    description:\n      - Only upgrade a package if it is already installed.\n    type: bool\n    default: 'no'\n    version_added: \"2.1\"\n  fail_on_autoremove:\n    description:\n      - 'Corresponds to the C(--no-remove) option for C(apt).'\n      - 'If C(yes), it is ensured that no packages will be removed or the task will fail.'\n      - 'C(fail_on_autoremove) is only supported with state except C(absent)'\n    type: bool\n    default: 'no'\n    version_added: \"2.11\"\n  force_apt_get:\n    description:\n      - Force usage of apt-get instead of aptitude\n    type: bool\n    default: 'no'\n    version_added: \"2.4\"\n  lock_timeout:\n    description:\n      - How many seconds will this action wait to acquire a lock on the apt db.\n      - Sometimes there is a transitory lock and this will retry at least until timeout is hit.\n    type: int\n    default: 60\n    version_added: \"2.12\"\nrequirements:\n   - python-apt (python 2)\n   - python3-apt (python 3)\n   - aptitude (before 2.4)\nauthor: \"Matthew Williams (@mgwilliams)\"\nextends_documentation_fragment: action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        platforms: debian\nnotes:\n   - Three of the upgrade modes (C(full), C(safe) and its alias C(yes)) required C(aptitude) up to 2.3, since 2.4 C(apt-get) is used as a fall-back.\n   - In most cases, packages installed with apt will start newly installed services by default. Most distributions have mechanisms to avoid this.\n     For example when installing Postgresql-9.5 in Debian 9, creating an excutable shell script (/usr/sbin/policy-rc.d) that throws\n     a return code of 101 will stop Postgresql 9.5 starting up after install. Remove the file or remove its execute permission afterwards.\n   - The apt-get commandline supports implicit regex matches here but we do not because it can let typos through easier\n     (If you typo C(foo) as C(fo) apt-get would install packages that have \"fo\" in their name with a warning and a prompt for the user.\n     Since we don't have warnings and prompts before installing we disallow this.Use an explicit fnmatch pattern if you want wildcarding)\n   - When used with a C(loop:) each package will be processed individually, it is much more efficient to pass the list directly to the I(name) option.\n","return":"\ncache_updated:\n    description: if the cache was updated or not\n    returned: success, in some cases\n    type: bool\n    sample: True\ncache_update_time:\n    description: time of the last cache update (0 if unknown)\n    returned: success, in some cases\n    type: int\n    sample: 1425828348000\nstdout:\n    description: output from apt\n    returned: success, when needed\n    type: str\n    sample: \"Reading package lists...\nBuilding dependency tree...\nReading state information...\nThe following extra packages will be installed:\n  apache2-bin ...\"\nstderr:\n    description: error output from apt\n    returned: success, when needed\n    type: str\n    sample: \"AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to ...\"\n"},{"normalizedName":"AptKey","module":"apt_key","short_description":"Add or remove an apt key","description":["Add or remove an I(apt) key, optionally downloading it."],"options":{"data":{"normalizedName":"Data","structTag":"`yaml:\"data,omitempty\" json:\"data,omitempty\"`","goType":"string","goElements":"","description":["The keyfile contents to add to the keyring."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"file":{"normalizedName":"File","structTag":"`yaml:\"file,omitempty\" json:\"file,omitempty\"`","goType":"string","goElements":"","description":["The path to a keyfile on the remote server to add to the keyring."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"id":{"normalizedName":"Id","structTag":"`yaml:\"id,omitempty\" json:\"id,omitempty\"`","goType":"string","goElements":"","description":["The identifier of the key.","Including this allows check mode to correctly report the changed state.","If specifying a subkey's id be aware that apt-key does not understand how to remove keys via a subkey id.  Specify the primary key's id instead.","This parameter is required when C(state) is set to C(absent)."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"keyring":{"normalizedName":"Keyring","structTag":"`yaml:\"keyring,omitempty\" json:\"keyring,omitempty\"`","goType":"string","goElements":"","description":["The full path to specific keyring file in C(/etc/apt/trusted.gpg.d/)."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"keyserver":{"normalizedName":"Keyserver","structTag":"`yaml:\"keyserver,omitempty\" json:\"keyserver,omitempty\"`","goType":"string","goElements":"","description":["The keyserver to retrieve key from."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"state":{"normalizedName":"State","structTag":"`yaml:\"state,omitempty\" json:\"state,omitempty\"`","goType":"string","goElements":"","description":["Ensures that the key is present (added) or absent (revoked)."],"type":"str","required":false,"default":"present","elements":"","aliases":null},"url":{"normalizedName":"Url","structTag":"`yaml:\"url,omitempty\" json:\"url,omitempty\"`","goType":"string","goElements":"","description":["The URL to retrieve key from."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"validate_certs":{"normalizedName":"ValidateCerts","structTag":"`yaml:\"validate_certs,omitempty\" json:\"validate_certs,omitempty\"`","goType":"bool","goElements":"","description":["If C(no), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null}},"returns":{"after":{"normalizedName":"After","description":"List of apt key ids or fingerprints after any modification","returned":"on change","type":"list","sample":["D8576A8BA88D21E9","3B4FE6ACC0B21F32","D94AA3F0EFE21092","871920D1991BC93C"],"goType":"[]map[string]interface{}","structTag":"`yaml:\"after,omitempty\" json:\"after,omitempty\"`"},"before":{"normalizedName":"Before","description":"List of apt key ids or fingprints before any modifications","returned":"always","type":"list","sample":["3B4FE6ACC0B21F32","D94AA3F0EFE21092","871920D1991BC93C"],"goType":"[]map[string]interface{}","structTag":"`yaml:\"before,omitempty\" json:\"before,omitempty\"`"},"fp":{"normalizedName":"Fp","description":"Fingerprint of the key to import","returned":"always","type":"str","sample":"D8576A8BA88D21E9","goType":"string","structTag":"`yaml:\"fp,omitempty\" json:\"fp,omitempty\"`"},"id":{"normalizedName":"Id","description":"key id from source","returned":"always","type":"str","sample":"36A1D7869245C8950F966E92D8576A8BA88D21E9","goType":"string","structTag":"`yaml:\"id,omitempty\" json:\"id,omitempty\"`"},"key_id":{"normalizedName":"KeyId","description":"calculated key id, it should be same as 'id', but can be different","returned":"always","type":"str","sample":"36A1D7869245C8950F966E92D8576A8BA88D21E9","goType":"string","structTag":"`yaml:\"key_id,omitempty\" json:\"key_id,omitempty\"`"},"short_id":{"normalizedName":"ShortId","description":"caclulated short key id","returned":"always","type":"str","sample":"A88D21E9","goType":"string","structTag":"`yaml:\"short_id,omitempty\" json:\"short_id,omitempty\"`"}},"doc":"\n---\nmodule: apt_key\nauthor:\n- Jayson Vantuyl (@jvantuyl)\nversion_added: \"1.0\"\nshort_description: Add or remove an apt key\ndescription:\n    - Add or remove an I(apt) key, optionally downloading it.\nextends_documentation_fragment: action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    platform:\n        platforms: debian\nnotes:\n    - The apt-key command has been deprecated and suggests to 'manage keyring files in trusted.gpg.d instead'. See the Debian wiki for details.\n      This module is kept for backwards compatiblity for systems that still use apt-key as the main way to manage apt repository keys.\n    - As a sanity check, downloaded key id must match the one specified.\n    - \"Use full fingerprint (40 characters) key ids to avoid key collisions.\n      To generate a full-fingerprint imported key: C(apt-key adv --list-public-keys --with-fingerprint --with-colons).\"\n    - If you specify both the key id and the URL with C(state=present), the task can verify or add the key as needed.\n    - Adding a new key requires an apt cache update (e.g. using the M(ansible.builtin.apt) module's update_cache option).\nrequirements:\n    - gpg\noptions:\n    id:\n        description:\n            - The identifier of the key.\n            - Including this allows check mode to correctly report the changed state.\n            - If specifying a subkey's id be aware that apt-key does not understand how to remove keys via a subkey id.  Specify the primary key's id instead.\n            - This parameter is required when C(state) is set to C(absent).\n        type: str\n    data:\n        description:\n            - The keyfile contents to add to the keyring.\n        type: str\n    file:\n        description:\n            - The path to a keyfile on the remote server to add to the keyring.\n        type: path\n    keyring:\n        description:\n            - The full path to specific keyring file in C(/etc/apt/trusted.gpg.d/).\n        type: path\n        version_added: \"1.3\"\n    url:\n        description:\n            - The URL to retrieve key from.\n        type: str\n    keyserver:\n        description:\n            - The keyserver to retrieve key from.\n        type: str\n        version_added: \"1.6\"\n    state:\n        description:\n            - Ensures that the key is present (added) or absent (revoked).\n        type: str\n        choices: [ absent, present ]\n        default: present\n    validate_certs:\n        description:\n            - If C(no), SSL certificates for the target url will not be validated. This should only be used\n              on personally controlled sites using self-signed certificates.\n        type: bool\n        default: 'yes'\n","return":"\nafter:\n    description: List of apt key ids or fingerprints after any modification\n    returned: on change\n    type: list\n    sample: [\"D8576A8BA88D21E9\", \"3B4FE6ACC0B21F32\", \"D94AA3F0EFE21092\", \"871920D1991BC93C\"]\nbefore:\n    description: List of apt key ids or fingprints before any modifications\n    returned: always\n    type: list\n    sample: [\"3B4FE6ACC0B21F32\", \"D94AA3F0EFE21092\", \"871920D1991BC93C\"]\nfp:\n    description: Fingerprint of the key to import\n    returned: always\n    type: str\n    sample: \"D8576A8BA88D21E9\"\nid:\n    description: key id from source\n    returned: always\n    type: str\n    sample: \"36A1D7869245C8950F966E92D8576A8BA88D21E9\"\nkey_id:\n    description: calculated key id, it should be same as 'id', but can be different\n    returned: always\n    type: str\n    sample: \"36A1D7869245C8950F966E92D8576A8BA88D21E9\"\nshort_id:\n    description: caclulated short key id\n    returned: always\n    type: str\n    sample: \"A88D21E9\"\n"},{"normalizedName":"AptRepository","module":"apt_repository","short_description":"Add and remove APT repositories","description":["Add or remove an APT repositories in Ubuntu and Debian."],"options":{"codename":{"normalizedName":"Codename","structTag":"`yaml:\"codename,omitempty\" json:\"codename,omitempty\"`","goType":"string","goElements":"","description":["Override the distribution codename to use for PPA repositories. Should usually only be set when working with a PPA on a non-Ubuntu target (for example, Debian or Mint)."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"filename":{"normalizedName":"Filename","structTag":"`yaml:\"filename,omitempty\" json:\"filename,omitempty\"`","goType":"string","goElements":"","description":["Sets the name of the source list file in sources.list.d. Defaults to a file name based on the repository source url. The .list extension will be automatically added."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"install_python_apt":{"normalizedName":"InstallPythonApt","structTag":"`yaml:\"install_python_apt,omitempty\" json:\"install_python_apt,omitempty\"`","goType":"bool","goElements":"","description":["Whether to automatically try to install the Python apt library or not, if it is not already installed. Without this library, the module does not work.","Runs C(apt-get install python-apt) for Python 2, and C(apt-get install python3-apt) for Python 3.","Only works with the system Python 2 or Python 3. If you are using a Python on the remote that is not the system Python, set I(install_python_apt=false) and ensure that the Python apt library for your Python version is installed some other way."],"type":"bool","required":false,"default":true,"elements":"","aliases":null},"mode":{"normalizedName":"Mode","structTag":"`yaml:\"mode,omitempty\" json:\"mode,omitempty\"`","goType":"string","goElements":"","description":["The octal mode for newly created files in sources.list.d.","Default is what system uses (probably 0644)."],"type":"raw","required":false,"default":null,"elements":"","aliases":null},"repo":{"normalizedName":"Repo","structTag":"`yaml:\"repo,omitempty\" json:\"repo,omitempty\"`","goType":"string","goElements":"","description":["A source string for the repository."],"type":"str","required":true,"default":null,"elements":"","aliases":null},"state":{"normalizedName":"State","structTag":"`yaml:\"state,omitempty\" json:\"state,omitempty\"`","goType":"string","goElements":"","description":["A source string state."],"type":"str","required":false,"default":"present","elements":"","aliases":null},"update_cache":{"normalizedName":"UpdateCache","structTag":"`yaml:\"update_cache,omitempty\" json:\"update_cache,omitempty\"`","goType":"bool","goElements":"","description":["Run the equivalent of C(apt-get update) when a change occurs.  Cache updates are run after making changes."],"type":"bool","required":false,"default":"yes","elements":"","aliases":["update-cache"]},"update_cache_retries":{"normalizedName":"UpdateCacheRetries","structTag":"`yaml:\"update_cache_retries,omitempty\" json:\"update_cache_retries,omitempty\"`","goType":"int","goElements":"","description":["Amount of retries if the cache update fails. Also see I(update_cache_retry_max_delay)."],"type":"int","required":false,"default":5,"elements":"","aliases":null},"update_cache_retry_max_delay":{"normalizedName":"UpdateCacheRetryMaxDelay","structTag":"`yaml:\"update_cache_retry_max_delay,omitempty\" json:\"update_cache_retry_max_delay,omitempty\"`","goType":"int","goElements":"","description":["Use an exponential backoff delay for each retry (see I(update_cache_retries)) up to this max delay in seconds."],"type":"int","required":false,"default":12,"elements":"","aliases":null},"validate_certs":{"normalizedName":"ValidateCerts","structTag":"`yaml:\"validate_certs,omitempty\" json:\"validate_certs,omitempty\"`","goType":"bool","goElements":"","description":["If C(no), SSL certificates for the target repo will not be validated. This should only be used on personally controlled sites using self-signed certificates."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null}},"returns":{},"doc":"\n---\nmodule: apt_repository\nshort_description: Add and remove APT repositories\ndescription:\n    - Add or remove an APT repositories in Ubuntu and Debian.\nextends_documentation_fragment: action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        platforms: debian\nnotes:\n    - This module supports Debian Squeeze (version 6) as well as its successors and derivatives.\noptions:\n    repo:\n        description:\n            - A source string for the repository.\n        type: str\n        required: true\n    state:\n        description:\n            - A source string state.\n        type: str\n        choices: [ absent, present ]\n        default: \"present\"\n    mode:\n        description:\n            - The octal mode for newly created files in sources.list.d.\n            - Default is what system uses (probably 0644).\n        type: raw\n        version_added: \"1.6\"\n    update_cache:\n        description:\n            - Run the equivalent of C(apt-get update) when a change occurs.  Cache updates are run after making changes.\n        type: bool\n        default: \"yes\"\n        aliases: [ update-cache ]\n    update_cache_retries:\n        description:\n        - Amount of retries if the cache update fails. Also see I(update_cache_retry_max_delay).\n        type: int\n        default: 5\n        version_added: '2.10'\n    update_cache_retry_max_delay:\n        description:\n        - Use an exponential backoff delay for each retry (see I(update_cache_retries)) up to this max delay in seconds.\n        type: int\n        default: 12\n        version_added: '2.10'\n    validate_certs:\n        description:\n            - If C(no), SSL certificates for the target repo will not be validated. This should only be used\n              on personally controlled sites using self-signed certificates.\n        type: bool\n        default: 'yes'\n        version_added: '1.8'\n    filename:\n        description:\n            - Sets the name of the source list file in sources.list.d.\n              Defaults to a file name based on the repository source url.\n              The .list extension will be automatically added.\n        type: str\n        version_added: '2.1'\n    codename:\n        description:\n            - Override the distribution codename to use for PPA repositories.\n              Should usually only be set when working with a PPA on\n              a non-Ubuntu target (for example, Debian or Mint).\n        type: str\n        version_added: '2.3'\n    install_python_apt:\n        description:\n            - Whether to automatically try to install the Python apt library or not, if it is not already installed.\n              Without this library, the module does not work.\n            - Runs C(apt-get install python-apt) for Python 2, and C(apt-get install python3-apt) for Python 3.\n            - Only works with the system Python 2 or Python 3. If you are using a Python on the remote that is not\n               the system Python, set I(install_python_apt=false) and ensure that the Python apt library\n               for your Python version is installed some other way.\n        type: bool\n        default: true\nauthor:\n- Alexander Saltanov (@sashka)\nversion_added: \"0.7\"\nrequirements:\n   - python-apt (python 2)\n   - python3-apt (python 3)\n","return":"#"},{"normalizedName":"Assemble","module":"assemble","short_description":"Assemble configuration files from fragments","description":["Assembles a configuration file from fragments.","Often a particular program will take a single configuration file and does not support a C(conf.d) style structure where it is easy to build up the configuration from multiple sources. C(assemble) will take a directory of files that can be local or have already been transferred to the system, and concatenate them together to produce a destination file.","Files are assembled in string sorting order.","Puppet calls this idea I(fragments)."],"options":{"backup":{"normalizedName":"Backup","structTag":"`yaml:\"backup,omitempty\" json:\"backup,omitempty\"`","goType":"bool","goElements":"","description":["Create a backup file (if C(yes)), including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"delimiter":{"normalizedName":"Delimiter","structTag":"`yaml:\"delimiter,omitempty\" json:\"delimiter,omitempty\"`","goType":"string","goElements":"","description":["A delimiter to separate the file contents."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"dest":{"normalizedName":"Dest","structTag":"`yaml:\"dest,omitempty\" json:\"dest,omitempty\"`","goType":"string","goElements":"","description":["A file to create using the concatenation of all of the source files."],"type":"path","required":true,"default":null,"elements":"","aliases":null},"ignore_hidden":{"normalizedName":"IgnoreHidden","structTag":"`yaml:\"ignore_hidden,omitempty\" json:\"ignore_hidden,omitempty\"`","goType":"bool","goElements":"","description":["A boolean that controls if files that start with a '.' will be included or not."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"regexp":{"normalizedName":"Regexp","structTag":"`yaml:\"regexp,omitempty\" json:\"regexp,omitempty\"`","goType":"string","goElements":"","description":["Assemble files only if C(regex) matches the filename.","If not set, all files are assembled.","Every \"\\\" (backslash) must be escaped as \"\\\\\" to comply to YAML syntax.","Uses L(Python regular expressions,https://docs.python.org/3/library/re.html)."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"remote_src":{"normalizedName":"RemoteSrc","structTag":"`yaml:\"remote_src,omitempty\" json:\"remote_src,omitempty\"`","goType":"bool","goElements":"","description":["If C(no), it will search for src at originating/master machine.","If C(yes), it will go to the remote/target machine for the src."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null},"src":{"normalizedName":"Src","structTag":"`yaml:\"src,omitempty\" json:\"src,omitempty\"`","goType":"string","goElements":"","description":["An already existing directory full of source files."],"type":"path","required":true,"default":null,"elements":"","aliases":null},"validate":{"normalizedName":"Validate","structTag":"`yaml:\"validate,omitempty\" json:\"validate,omitempty\"`","goType":"string","goElements":"","description":["The validation command to run before copying into place.","The path to the file to validate is passed in via '%s' which must be present as in the sshd example below.","The command is passed securely so shell features like expansion and pipes won't work."],"type":"str","required":false,"default":null,"elements":"","aliases":null}},"returns":{},"doc":"\n---\nmodule: assemble\nshort_description: Assemble configuration files from fragments\ndescription:\n- Assembles a configuration file from fragments.\n- Often a particular program will take a single configuration file and does not support a\n  C(conf.d) style structure where it is easy to build up the configuration\n  from multiple sources. C(assemble) will take a directory of files that can be\n  local or have already been transferred to the system, and concatenate them\n  together to produce a destination file.\n- Files are assembled in string sorting order.\n- Puppet calls this idea I(fragments).\nversion_added: '0.5'\noptions:\n  src:\n    description:\n    - An already existing directory full of source files.\n    type: path\n    required: true\n  dest:\n    description:\n    - A file to create using the concatenation of all of the source files.\n    type: path\n    required: true\n  backup:\n    description:\n    - Create a backup file (if C(yes)), including the timestamp information so\n      you can get the original file back if you somehow clobbered it\n      incorrectly.\n    type: bool\n    default: no\n  delimiter:\n    description:\n    - A delimiter to separate the file contents.\n    type: str\n    version_added: '1.4'\n  remote_src:\n    description:\n    - If C(no), it will search for src at originating/master machine.\n    - If C(yes), it will go to the remote/target machine for the src.\n    type: bool\n    default: yes\n    version_added: '1.4'\n  regexp:\n    description:\n    - Assemble files only if C(regex) matches the filename.\n    - If not set, all files are assembled.\n    - Every \"\\\" (backslash) must be escaped as \"\\\\\" to comply to YAML syntax.\n    - Uses L(Python regular expressions,https://docs.python.org/3/library/re.html).\n    type: str\n  ignore_hidden:\n    description:\n    - A boolean that controls if files that start with a '.' will be included or not.\n    type: bool\n    default: no\n    version_added: '2.0'\n  validate:\n    description:\n    - The validation command to run before copying into place.\n    - The path to the file to validate is passed in via '%s' which must be present as in the sshd example below.\n    - The command is passed securely so shell features like expansion and pipes won't work.\n    type: str\n    version_added: '2.0'\nattributes:\n    action:\n      support: full\n    async:\n      support: none\n    bypass_host_loop:\n      support: none\n    check_mode:\n      support: none\n    diff_mode:\n      support: full\n    platform:\n      platforms: posix\n    safe_file_operations:\n      support: full\n    vault:\n      support: full\n      version_added: '2.2'\nseealso:\n- module: ansible.builtin.copy\n- module: ansible.builtin.template\n- module: ansible.windows.win_copy\nauthor:\n- Stephen Fromm (@sfromm)\nextends_documentation_fragment:\n    - action_common_attributes\n    - action_common_attributes.flow\n    - action_common_attributes.files\n    - decrypt\n    - files\n","return":"#"},{"normalizedName":"AsyncStatus","module":"async_status","short_description":"Obtain status of asynchronous task","description":["This module gets the status of an asynchronous task.","This module is also supported for Windows targets."],"options":{"jid":{"normalizedName":"Jid","structTag":"`yaml:\"jid,omitempty\" json:\"jid,omitempty\"`","goType":"string","goElements":"","description":["Job or task identifier"],"type":"str","required":true,"default":null,"elements":"","aliases":null},"mode":{"normalizedName":"Mode","structTag":"`yaml:\"mode,omitempty\" json:\"mode,omitempty\"`","goType":"string","goElements":"","description":["If C(status), obtain the status.","If C(cleanup), clean up the async job cache (by default in C(~/.ansible_async/)) for the specified job I(jid)."],"type":"str","required":false,"default":"status","elements":"","aliases":null}},"returns":{"ansible_job_id":{"normalizedName":"AnsibleJobId","description":"The asynchronous job id","returned":"success","type":"str","sample":"360874038559.4169","goType":"string","structTag":"`yaml:\"ansible_job_id,omitempty\" json:\"ansible_job_id,omitempty\"`"},"erased":{"normalizedName":"Erased","description":"Path to erased job file","returned":"when file is erased","type":"str","sample":null,"goType":"string","structTag":"`yaml:\"erased,omitempty\" json:\"erased,omitempty\"`"},"finished":{"normalizedName":"Finished","description":"Whether the asynchronous job has finished (C(1)) or not (C(0))","returned":"always","type":"int","sample":1,"goType":"int","structTag":"`yaml:\"finished,omitempty\" json:\"finished,omitempty\"`"},"started":{"normalizedName":"Started","description":"Whether the asynchronous job has started (C(1)) or not (C(0))","returned":"always","type":"int","sample":1,"goType":"int","structTag":"`yaml:\"started,omitempty\" json:\"started,omitempty\"`"},"stderr":{"normalizedName":"Stderr","description":"Any errors returned by async_wrapper","returned":"always","type":"str","sample":null,"goType":"string","structTag":"`yaml:\"stderr,omitempty\" json:\"stderr,omitempty\"`"},"stdout":{"normalizedName":"Stdout","description":"Any output returned by async_wrapper","returned":"always","type":"str","sample":null,"goType":"string","structTag":"`yaml:\"stdout,omitempty\" json:\"stdout,omitempty\"`"}},"doc":"\n---\nmodule: async_status\nshort_description: Obtain status of asynchronous task\ndescription:\n- This module gets the status of an asynchronous task.\n- This module is also supported for Windows targets.\nversion_added: \"0.5\"\noptions:\n  jid:\n    description:\n    - Job or task identifier\n    type: str\n    required: true\n  mode:\n    description:\n    - If C(status), obtain the status.\n    - If C(cleanup), clean up the async job cache (by default in C(~/.ansible_async/)) for the specified job I(jid).\n    type: str\n    choices: [ cleanup, status ]\n    default: status\nextends_documentation_fragment:\n- action_common_attributes\n- action_common_attributes.flow\nattributes:\n    action:\n        support: full\n    async:\n        support: none\n    check_mode:\n        support: none\n    diff_mode:\n        support: none\n    bypass_host_loop:\n        support: none\n    platform:\n        support: full\n        platforms: posix, windows\nseealso:\n- ref: playbooks_async\n  description: Detailed information on how to use asynchronous actions and polling.\nauthor:\n- Ansible Core Team\n- Michael DeHaan\n","return":"\nansible_job_id:\n  description: The asynchronous job id\n  returned: success\n  type: str\n  sample: '360874038559.4169'\nfinished:\n  description: Whether the asynchronous job has finished (C(1)) or not (C(0))\n  returned: always\n  type: int\n  sample: 1\nstarted:\n  description: Whether the asynchronous job has started (C(1)) or not (C(0))\n  returned: always\n  type: int\n  sample: 1\nstdout:\n  description: Any output returned by async_wrapper\n  returned: always\n  type: str\nstderr:\n  description: Any errors returned by async_wrapper\n  returned: always\n  type: str\nerased:\n  description: Path to erased job file\n  returned: when file is erased\n  type: str\n"},{"normalizedName":"Blockinfile","module":"blockinfile","short_description":"Insert/update/remove a text block surrounded by marker lines","description":["This module will insert/update/remove a block of multi-line text surrounded by customizable marker lines."],"options":{"backup":{"normalizedName":"Backup","structTag":"`yaml:\"backup,omitempty\" json:\"backup,omitempty\"`","goType":"bool","goElements":"","description":["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"block":{"normalizedName":"Block","structTag":"`yaml:\"block,omitempty\" json:\"block,omitempty\"`","goType":"string","goElements":"","description":["The text to insert inside the marker lines.","If it is missing or an empty string, the block will be removed as if C(state) were specified to C(absent)."],"type":"str","required":false,"default":"","elements":"","aliases":["content"]},"create":{"normalizedName":"Create","structTag":"`yaml:\"create,omitempty\" json:\"create,omitempty\"`","goType":"bool","goElements":"","description":["Create a new file if it does not exist."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"insertafter":{"normalizedName":"Insertafter","structTag":"`yaml:\"insertafter,omitempty\" json:\"insertafter,omitempty\"`","goType":"string","goElements":"","description":["If specified and no begin/ending C(marker) lines are found, the block will be inserted after the last match of specified regular expression.","A special value is available; C(EOF) for inserting the block at the end of the file.","If specified regular expression has no matches, C(EOF) will be used instead."],"type":"str","required":false,"default":"EOF","elements":"","aliases":null},"insertbefore":{"normalizedName":"Insertbefore","structTag":"`yaml:\"insertbefore,omitempty\" json:\"insertbefore,omitempty\"`","goType":"string","goElements":"","description":["If specified and no begin/ending C(marker) lines are found, the block will be inserted before the last match of specified regular expression.","A special value is available; C(BOF) for inserting the block at the beginning of the file.","If specified regular expression has no matches, the block will be inserted at the end of the file."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"marker":{"normalizedName":"Marker","structTag":"`yaml:\"marker,omitempty\" json:\"marker,omitempty\"`","goType":"string","goElements":"","description":["The marker line template.","C({mark}) will be replaced with the values in C(marker_begin) (default=\"BEGIN\") and C(marker_end) (default=\"END\").","Using a custom marker without the C({mark}) variable may result in the block being repeatedly inserted on subsequent playbook runs."],"type":"str","required":false,"default":"# {mark} ANSIBLE MANAGED BLOCK","elements":"","aliases":null},"marker_begin":{"normalizedName":"MarkerBegin","structTag":"`yaml:\"marker_begin,omitempty\" json:\"marker_begin,omitempty\"`","goType":"string","goElements":"","description":["This will be inserted at C({mark}) in the opening ansible block marker."],"type":"str","required":false,"default":"BEGIN","elements":"","aliases":null},"marker_end":{"normalizedName":"MarkerEnd","structTag":"`yaml:\"marker_end,omitempty\" json:\"marker_end,omitempty\"`","goType":"string","goElements":"","description":["This will be inserted at C({mark}) in the closing ansible block marker."],"type":"str","required":false,"default":"END","elements":"","aliases":null},"path":{"normalizedName":"Path","structTag":"`yaml:\"path,omitempty\" json:\"path,omitempty\"`","goType":"string","goElements":"","description":["The file to modify.","Before Ansible 2.3 this option was only usable as I(dest), I(destfile) and I(name)."],"type":"path","required":true,"default":null,"elements":"","aliases":["dest","destfile","name"]},"state":{"normalizedName":"State","structTag":"`yaml:\"state,omitempty\" json:\"state,omitempty\"`","goType":"string","goElements":"","description":["Whether the block should be there or not."],"type":"str","required":false,"default":"present","elements":"","aliases":null}},"returns":{},"doc":"\n---\nmodule: blockinfile\nshort_description: Insert/update/remove a text block surrounded by marker lines\nversion_added: '2.0'\ndescription:\n- This module will insert/update/remove a block of multi-line text surrounded by customizable marker lines.\nauthor:\n- Yaegashi Takeshi (@yaegashi)\noptions:\n  path:\n    description:\n    - The file to modify.\n    - Before Ansible 2.3 this option was only usable as I(dest), I(destfile) and I(name).\n    type: path\n    required: yes\n    aliases: [ dest, destfile, name ]\n  state:\n    description:\n    - Whether the block should be there or not.\n    type: str\n    choices: [ absent, present ]\n    default: present\n  marker:\n    description:\n    - The marker line template.\n    - C({mark}) will be replaced with the values in C(marker_begin) (default=\"BEGIN\") and C(marker_end) (default=\"END\").\n    - Using a custom marker without the C({mark}) variable may result in the block being repeatedly inserted on subsequent playbook runs.\n    type: str\n    default: '# {mark} ANSIBLE MANAGED BLOCK'\n  block:\n    description:\n    - The text to insert inside the marker lines.\n    - If it is missing or an empty string, the block will be removed as if C(state) were specified to C(absent).\n    type: str\n    default: ''\n    aliases: [ content ]\n  insertafter:\n    description:\n    - If specified and no begin/ending C(marker) lines are found, the block will be inserted after the last match of specified regular expression.\n    - A special value is available; C(EOF) for inserting the block at the end of the file.\n    - If specified regular expression has no matches, C(EOF) will be used instead.\n    type: str\n    choices: [ EOF, '*regex*' ]\n    default: EOF\n  insertbefore:\n    description:\n    - If specified and no begin/ending C(marker) lines are found, the block will be inserted before the last match of specified regular expression.\n    - A special value is available; C(BOF) for inserting the block at the beginning of the file.\n    - If specified regular expression has no matches, the block will be inserted at the end of the file.\n    type: str\n    choices: [ BOF, '*regex*' ]\n  create:\n    description:\n    - Create a new file if it does not exist.\n    type: bool\n    default: no\n  backup:\n    description:\n    - Create a backup file including the timestamp information so you can\n      get the original file back if you somehow clobbered it incorrectly.\n    type: bool\n    default: no\n  marker_begin:\n    description:\n    - This will be inserted at C({mark}) in the opening ansible block marker.\n    type: str\n    default: BEGIN\n    version_added: '2.5'\n  marker_end:\n    required: false\n    description:\n    - This will be inserted at C({mark}) in the closing ansible block marker.\n    type: str\n    default: END\n    version_added: '2.5'\nnotes:\n  - When using 'with_*' loops be aware that if you do not set a unique mark the block will be overwritten on each iteration.\n  - As of Ansible 2.3, the I(dest) option has been changed to I(path) as default, but I(dest) still works as well.\n  - Option I(follow) has been removed in Ansible 2.5, because this module modifies the contents of the file so I(follow=no) doesn't make sense.\n  - When more then one block should be handled in one file you must change the I(marker) per task.\nextends_documentation_fragment:\n    - action_common_attributes\n    - action_common_attributes.files\n    - files\n    - validate\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    safe_file_operations:\n      support: full\n    platform:\n      support: full\n      platforms: posix\n    vault:\n      support: none\n","return":""},{"normalizedName":"Command","module":"command","short_description":"Execute commands on targets","description":["The C(command) module takes the command name followed by a list of space-delimited arguments.","The given command will be executed on all selected nodes.","The command(s) will not be processed through the shell, so variables like C($HOSTNAME) and operations like C(\"*\"), C(\"\u003c\"), C(\"\u003e\"), C(\"|\"), C(\";\") and C(\"\u0026\") will not work. Use the M(ansible.builtin.shell) module if you need these features.","To create C(command) tasks that are easier to read than the ones using space-delimited arguments, pass parameters using the C(args) L(task keyword,../reference_appendices/playbooks_keywords.html#task) or use C(cmd) parameter.","Either a free form command or C(cmd) parameter is required, see the examples.","For Windows targets, use the M(ansible.windows.win_command) module instead."],"options":{"argv":{"normalizedName":"Argv","structTag":"`yaml:\"argv,omitempty\" json:\"argv,omitempty\"`","goType":"[]string","goElements":"","description":["Passes the command as a list rather than a string.","Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").","Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided."],"type":"list","required":false,"default":null,"elements":"str","aliases":null},"chdir":{"normalizedName":"Chdir","structTag":"`yaml:\"chdir,omitempty\" json:\"chdir,omitempty\"`","goType":"string","goElements":"","description":["Change into this directory before running the command."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"cmd":{"normalizedName":"Cmd","structTag":"`yaml:\"cmd,omitempty\" json:\"cmd,omitempty\"`","goType":"string","goElements":"","description":["The command to run."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"creates":{"normalizedName":"Creates","structTag":"`yaml:\"creates,omitempty\" json:\"creates,omitempty\"`","goType":"string","goElements":"","description":["A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.","This is checked before I(removes) is checked."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"free_form":{"normalizedName":"FreeForm","structTag":"`yaml:\"free_form,omitempty\" json:\"free_form,omitempty\"`","goType":"string","goElements":"","description":["The command module takes a free form string as a command to run.","There is no actual parameter named 'free form'."],"type":"","required":false,"default":null,"elements":"","aliases":null},"removes":{"normalizedName":"Removes","structTag":"`yaml:\"removes,omitempty\" json:\"removes,omitempty\"`","goType":"string","goElements":"","description":["A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.","This is checked after I(creates) is checked."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"stdin":{"normalizedName":"Stdin","structTag":"`yaml:\"stdin,omitempty\" json:\"stdin,omitempty\"`","goType":"string","goElements":"","description":["Set the stdin of the command directly to the specified value."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"stdin_add_newline":{"normalizedName":"StdinAddNewline","structTag":"`yaml:\"stdin_add_newline,omitempty\" json:\"stdin_add_newline,omitempty\"`","goType":"bool","goElements":"","description":["If set to C(yes), append a newline to stdin data."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null},"strip_empty_ends":{"normalizedName":"StripEmptyEnds","structTag":"`yaml:\"strip_empty_ends,omitempty\" json:\"strip_empty_ends,omitempty\"`","goType":"bool","goElements":"","description":["Strip empty lines from the end of stdout/stderr in result."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null},"warn":{"normalizedName":"Warn","structTag":"`yaml:\"warn,omitempty\" json:\"warn,omitempty\"`","goType":"bool","goElements":"","description":["(deprecated) Enable or disable task warnings.","This feature is deprecated and will be removed in 2.14.","As of version 2.11, this option is now disabled by default."],"type":"bool","required":false,"default":"no","elements":"","aliases":null}},"returns":{"cmd":{"normalizedName":"Cmd","description":"The command executed by the task.","returned":"always","type":"list","sample":["echo","hello"],"goType":"[]map[string]interface{}","structTag":"`yaml:\"cmd,omitempty\" json:\"cmd,omitempty\"`"},"delta":{"normalizedName":"Delta","description":"The command execution delta time.","returned":"always","type":"str","sample":"0:00:00.001529","goType":"string","structTag":"`yaml:\"delta,omitempty\" json:\"delta,omitempty\"`"},"end":{"normalizedName":"End","description":"The command execution end time.","returned":"always","type":"str","sample":"2017-09-29 22:03:48.084657","goType":"string","structTag":"`yaml:\"end,omitempty\" json:\"end,omitempty\"`"},"msg":{"normalizedName":"Msg","description":"changed","returned":"always","type":"bool","sample":true,"goType":"bool","structTag":"`yaml:\"msg,omitempty\" json:\"msg,omitempty\"`"},"rc":{"normalizedName":"Rc","description":"The command return code (0 means success).","returned":"always","type":"int","sample":0,"goType":"int","structTag":"`yaml:\"rc,omitempty\" json:\"rc,omitempty\"`"},"start":{"normalizedName":"Start","description":"The command execution start time.","returned":"always","type":"str","sample":"2017-09-29 22:03:48.083128","goType":"string","structTag":"`yaml:\"start,omitempty\" json:\"start,omitempty\"`"},"stderr":{"normalizedName":"Stderr","description":"The command standard error.","returned":"always","type":"str","sample":"ls cannot access foo: No such file or directory","goType":"string","structTag":"`yaml:\"stderr,omitempty\" json:\"stderr,omitempty\"`"},"stderr_lines":{"normalizedName":"StderrLines","description":"The command standard error split in lines.","returned":"always","type":"list","sample":[{"u'ls cannot access foo":"No such file or directory'"},"u'ls …'"],"goType":"[]map[string]interface{}","structTag":"`yaml:\"stderr_lines,omitempty\" json:\"stderr_lines,omitempty\"`"},"stdout":{"normalizedName":"Stdout","description":"The command standard output.","returned":"always","type":"str","sample":"Clustering node rabbit@slave1 with rabbit@master …","goType":"string","structTag":"`yaml:\"stdout,omitempty\" json:\"stdout,omitempty\"`"},"stdout_lines":{"normalizedName":"StdoutLines","description":"The command standard output split in lines.","returned":"always","type":"list","sample":["u'Clustering node rabbit@slave1 with rabbit@master …'"],"goType":"[]map[string]interface{}","structTag":"`yaml:\"stdout_lines,omitempty\" json:\"stdout_lines,omitempty\"`"}},"doc":"\n---\nmodule: command\nshort_description: Execute commands on targets\nversion_added: historical\ndescription:\n     - The C(command) module takes the command name followed by a list of space-delimited arguments.\n     - The given command will be executed on all selected nodes.\n     - The command(s) will not be\n       processed through the shell, so variables like C($HOSTNAME) and operations\n       like C(\"*\"), C(\"\u003c\"), C(\"\u003e\"), C(\"|\"), C(\";\") and C(\"\u0026\") will not work.\n       Use the M(ansible.builtin.shell) module if you need these features.\n     - To create C(command) tasks that are easier to read than the ones using space-delimited\n       arguments, pass parameters using the C(args) L(task keyword,../reference_appendices/playbooks_keywords.html#task)\n       or use C(cmd) parameter.\n     - Either a free form command or C(cmd) parameter is required, see the examples.\n     - For Windows targets, use the M(ansible.windows.win_command) module instead.\nextends_documentation_fragment:\n    - action_common_attributes\n    - action_common_attributes.raw\nattributes:\n    check_mode:\n        details: while the command itself is arbitrary and cannot be subject to the check mode semantics it adds C(creates)/C(removes) options as a workaround\n        support: partial\n    diff_mode:\n        support: none\n    platform:\n      support: full\n      platforms: posix\n    raw:\n      support: full\noptions:\n  free_form:\n    description:\n      - The command module takes a free form string as a command to run.\n      - There is no actual parameter named 'free form'.\n  cmd:\n    type: str\n    description:\n      - The command to run.\n  argv:\n    type: list\n    elements: str\n    description:\n      - Passes the command as a list rather than a string.\n      - Use C(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example \"user name\").\n      - Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided.\n    version_added: \"2.6\"\n  creates:\n    type: path\n    description:\n      - A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.\n      - This is checked before I(removes) is checked.\n  removes:\n    type: path\n    description:\n      - A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.\n      - This is checked after I(creates) is checked.\n    version_added: \"0.8\"\n  chdir:\n    type: path\n    description:\n      - Change into this directory before running the command.\n    version_added: \"0.6\"\n  warn:\n    description:\n      - (deprecated) Enable or disable task warnings.\n      - This feature is deprecated and will be removed in 2.14.\n      - As of version 2.11, this option is now disabled by default.\n    type: bool\n    default: no\n    version_added: \"1.8\"\n  stdin:\n    description:\n      - Set the stdin of the command directly to the specified value.\n    type: str\n    version_added: \"2.4\"\n  stdin_add_newline:\n    type: bool\n    default: yes\n    description:\n      - If set to C(yes), append a newline to stdin data.\n    version_added: \"2.8\"\n  strip_empty_ends:\n    description:\n      - Strip empty lines from the end of stdout/stderr in result.\n    version_added: \"2.8\"\n    type: bool\n    default: yes\nnotes:\n    -  If you want to run a command through the shell (say you are using C(\u003c), C(\u003e), C(|), and so on),\n       you actually want the M(ansible.builtin.shell) module instead.\n       Parsing shell metacharacters can lead to unexpected commands being executed if quoting is not done correctly so it is more secure to\n       use the C(command) module when possible.\n    -  C(creates), C(removes), and C(chdir) can be specified after the command.\n       For instance, if you only want to run a command if a certain file does not exist, use this.\n    -  Check mode is supported when passing C(creates) or C(removes). If running in check mode and either of these are specified, the module will\n       check for the existence of the file and report the correct changed status. If these are not supplied, the task will be skipped.\n    -  The C(executable) parameter is removed since version 2.4. If you have a need for this parameter, use the M(ansible.builtin.shell) module instead.\n    -  For Windows targets, use the M(ansible.windows.win_command) module instead.\n    -  For rebooting systems, use the M(ansible.builtin.reboot) or M(ansible.windows.win_reboot) module.\nseealso:\n- module: ansible.builtin.raw\n- module: ansible.builtin.script\n- module: ansible.builtin.shell\n- module: ansible.windows.win_command\nauthor:\n    - Ansible Core Team\n    - Michael DeHaan\n","return":"\nmsg:\n  description: changed\n  returned: always\n  type: bool\n  sample: True\nstart:\n  description: The command execution start time.\n  returned: always\n  type: str\n  sample: '2017-09-29 22:03:48.083128'\nend:\n  description: The command execution end time.\n  returned: always\n  type: str\n  sample: '2017-09-29 22:03:48.084657'\ndelta:\n  description: The command execution delta time.\n  returned: always\n  type: str\n  sample: '0:00:00.001529'\nstdout:\n  description: The command standard output.\n  returned: always\n  type: str\n  sample: 'Clustering node rabbit@slave1 with rabbit@master …'\nstderr:\n  description: The command standard error.\n  returned: always\n  type: str\n  sample: 'ls cannot access foo: No such file or directory'\ncmd:\n  description: The command executed by the task.\n  returned: always\n  type: list\n  sample:\n  - echo\n  - hello\nrc:\n  description: The command return code (0 means success).\n  returned: always\n  type: int\n  sample: 0\nstdout_lines:\n  description: The command standard output split in lines.\n  returned: always\n  type: list\n  sample: [u'Clustering node rabbit@slave1 with rabbit@master …']\nstderr_lines:\n  description: The command standard error split in lines.\n  returned: always\n  type: list\n  sample: [u'ls cannot access foo: No such file or directory', u'ls …']\n"},{"normalizedName":"Cron","module":"cron","short_description":"Manage cron.d and crontab entries","description":["Use this module to manage crontab and environment variables entries. This module allows you to create environment variables and named crontab entries, update, or delete them.","When crontab jobs are managed: the module includes one line with the description of the crontab entry C(\"#Ansible: \u003cname\u003e\") corresponding to the \"name\" passed to the module, which is used by future ansible/module calls to find/check the state. The \"name\" parameter should be unique, and changing the \"name\" value will result in a new cron task being created (or a different one being removed).","When environment variables are managed, no comment line is added, but, when the module needs to find/check the state, it uses the \"name\" parameter to find the environment variable definition line.","When using symbols such as %, they must be properly escaped."],"options":{"backup":{"normalizedName":"Backup","structTag":"`yaml:\"backup,omitempty\" json:\"backup,omitempty\"`","goType":"bool","goElements":"","description":["If set, create a backup of the crontab before it is modified. The location of the backup is returned in the C(backup_file) variable by this module."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"cron_file":{"normalizedName":"CronFile","structTag":"`yaml:\"cron_file,omitempty\" json:\"cron_file,omitempty\"`","goType":"string","goElements":"","description":["If specified, uses this file instead of an individual user's crontab. The assumption is that this file is exclusively managed by the module, do not use if the file contains multiple entries, NEVER use for /etc/crontab.","If this is a relative path, it is interpreted with respect to I(/etc/cron.d).","Many linux distros expect (and some require) the filename portion to consist solely of upper- and lower-case letters, digits, underscores, and hyphens.","Using this parameter requires you to specify the I(user) as well, unless I(state) is not I(present).","Either this parameter or I(name) is required"],"type":"path","required":false,"default":null,"elements":"","aliases":null},"day":{"normalizedName":"Day","structTag":"`yaml:\"day,omitempty\" json:\"day,omitempty\"`","goType":"string","goElements":"","description":["Day of the month the job should run (C(1-31), C(*), C(*/2), and so on)."],"type":"str","required":false,"default":"*","elements":"","aliases":["dom"]},"disabled":{"normalizedName":"Disabled","structTag":"`yaml:\"disabled,omitempty\" json:\"disabled,omitempty\"`","goType":"bool","goElements":"","description":["If the job should be disabled (commented out) in the crontab.","Only has effect if I(state=present)."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"env":{"normalizedName":"Env","structTag":"`yaml:\"env,omitempty\" json:\"env,omitempty\"`","goType":"bool","goElements":"","description":["If set, manages a crontab's environment variable.","New variables are added on top of crontab.","I(name) and I(value) parameters are the name and the value of environment variable."],"type":"bool","required":false,"default":false,"elements":"","aliases":null},"hour":{"normalizedName":"Hour","structTag":"`yaml:\"hour,omitempty\" json:\"hour,omitempty\"`","goType":"string","goElements":"","description":["Hour when the job should run (C(0-23), C(*), C(*/2), and so on)."],"type":"str","required":false,"default":"*","elements":"","aliases":null},"insertafter":{"normalizedName":"Insertafter","structTag":"`yaml:\"insertafter,omitempty\" json:\"insertafter,omitempty\"`","goType":"string","goElements":"","description":["Used with I(state=present) and I(env).","If specified, the environment variable will be inserted after the declaration of specified environment variable."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"insertbefore":{"normalizedName":"Insertbefore","structTag":"`yaml:\"insertbefore,omitempty\" json:\"insertbefore,omitempty\"`","goType":"string","goElements":"","description":["Used with I(state=present) and I(env).","If specified, the environment variable will be inserted before the declaration of specified environment variable."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"job":{"normalizedName":"Job","structTag":"`yaml:\"job,omitempty\" json:\"job,omitempty\"`","goType":"string","goElements":"","description":["The command to execute or, if env is set, the value of environment variable.","The command should not contain line breaks.","Required if I(state=present)."],"type":"str","required":false,"default":null,"elements":"","aliases":["value"]},"minute":{"normalizedName":"Minute","structTag":"`yaml:\"minute,omitempty\" json:\"minute,omitempty\"`","goType":"string","goElements":"","description":["Minute when the job should run (C(0-59), C(*), C(*/2), and so on)."],"type":"str","required":false,"default":"*","elements":"","aliases":null},"month":{"normalizedName":"Month","structTag":"`yaml:\"month,omitempty\" json:\"month,omitempty\"`","goType":"string","goElements":"","description":["Month of the year the job should run (C(1-12), C(*), C(*/2), and so on)."],"type":"str","required":false,"default":"*","elements":"","aliases":null},"name":{"normalizedName":"Name","structTag":"`yaml:\"name,omitempty\" json:\"name,omitempty\"`","goType":"string","goElements":"","description":["Description of a crontab entry or, if env is set, the name of environment variable.","This parameter is always required as of ansible-core 2.12."],"type":"str","required":true,"default":null,"elements":"","aliases":null},"special_time":{"normalizedName":"SpecialTime","structTag":"`yaml:\"special_time,omitempty\" json:\"special_time,omitempty\"`","goType":"string","goElements":"","description":["Special time specification nickname."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"state":{"normalizedName":"State","structTag":"`yaml:\"state,omitempty\" json:\"state,omitempty\"`","goType":"string","goElements":"","description":["Whether to ensure the job or environment variable is present or absent."],"type":"str","required":false,"default":"present","elements":"","aliases":null},"user":{"normalizedName":"User","structTag":"`yaml:\"user,omitempty\" json:\"user,omitempty\"`","goType":"string","goElements":"","description":["The specific user whose crontab should be modified.","When unset, this parameter defaults to the current user."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"weekday":{"normalizedName":"Weekday","structTag":"`yaml:\"weekday,omitempty\" json:\"weekday,omitempty\"`","goType":"string","goElements":"","description":["Day of the week that the job should run (C(0-6) for Sunday-Saturday, C(*), and so on)."],"type":"str","required":false,"default":"*","elements":"","aliases":["dow"]}},"returns":{},"doc":"\n---\nmodule: cron\nshort_description: Manage cron.d and crontab entries\ndescription:\n  - Use this module to manage crontab and environment variables entries. This module allows\n    you to create environment variables and named crontab entries, update, or delete them.\n  - 'When crontab jobs are managed: the module includes one line with the description of the\n    crontab entry C(\"#Ansible: \u003cname\u003e\") corresponding to the \"name\" passed to the module,\n    which is used by future ansible/module calls to find/check the state. The \"name\"\n    parameter should be unique, and changing the \"name\" value will result in a new cron\n    task being created (or a different one being removed).'\n  - When environment variables are managed, no comment line is added, but, when the module\n    needs to find/check the state, it uses the \"name\" parameter to find the environment\n    variable definition line.\n  - When using symbols such as %, they must be properly escaped.\nversion_added: \"0.9\"\noptions:\n  name:\n    description:\n      - Description of a crontab entry or, if env is set, the name of environment variable.\n      - This parameter is always required as of ansible-core 2.12.\n    type: str\n    required: yes\n  user:\n    description:\n      - The specific user whose crontab should be modified.\n      - When unset, this parameter defaults to the current user.\n    type: str\n  job:\n    description:\n      - The command to execute or, if env is set, the value of environment variable.\n      - The command should not contain line breaks.\n      - Required if I(state=present).\n    type: str\n    aliases: [ value ]\n  state:\n    description:\n      - Whether to ensure the job or environment variable is present or absent.\n    type: str\n    choices: [ absent, present ]\n    default: present\n  cron_file:\n    description:\n      - If specified, uses this file instead of an individual user's crontab.\n        The assumption is that this file is exclusively managed by the module,\n        do not use if the file contains multiple entries, NEVER use for /etc/crontab.\n      - If this is a relative path, it is interpreted with respect to I(/etc/cron.d).\n      - Many linux distros expect (and some require) the filename portion to consist solely\n        of upper- and lower-case letters, digits, underscores, and hyphens.\n      - Using this parameter requires you to specify the I(user) as well, unless I(state) is not I(present).\n      - Either this parameter or I(name) is required\n    type: path\n  backup:\n    description:\n      - If set, create a backup of the crontab before it is modified.\n        The location of the backup is returned in the C(backup_file) variable by this module.\n    type: bool\n    default: no\n  minute:\n    description:\n      - Minute when the job should run (C(0-59), C(*), C(*/2), and so on).\n    type: str\n    default: \"*\"\n  hour:\n    description:\n      - Hour when the job should run (C(0-23), C(*), C(*/2), and so on).\n    type: str\n    default: \"*\"\n  day:\n    description:\n      - Day of the month the job should run (C(1-31), C(*), C(*/2), and so on).\n    type: str\n    default: \"*\"\n    aliases: [ dom ]\n  month:\n    description:\n      - Month of the year the job should run (C(1-12), C(*), C(*/2), and so on).\n    type: str\n    default: \"*\"\n  weekday:\n    description:\n      - Day of the week that the job should run (C(0-6) for Sunday-Saturday, C(*), and so on).\n    type: str\n    default: \"*\"\n    aliases: [ dow ]\n  special_time:\n    description:\n      - Special time specification nickname.\n    type: str\n    choices: [ annually, daily, hourly, monthly, reboot, weekly, yearly ]\n    version_added: \"1.3\"\n  disabled:\n    description:\n      - If the job should be disabled (commented out) in the crontab.\n      - Only has effect if I(state=present).\n    type: bool\n    default: no\n    version_added: \"2.0\"\n  env:\n    description:\n      - If set, manages a crontab's environment variable.\n      - New variables are added on top of crontab.\n      - I(name) and I(value) parameters are the name and the value of environment variable.\n    type: bool\n    default: false\n    version_added: \"2.1\"\n  insertafter:\n    description:\n      - Used with I(state=present) and I(env).\n      - If specified, the environment variable will be inserted after the declaration of specified environment variable.\n    type: str\n    version_added: \"2.1\"\n  insertbefore:\n    description:\n      - Used with I(state=present) and I(env).\n      - If specified, the environment variable will be inserted before the declaration of specified environment variable.\n    type: str\n    version_added: \"2.1\"\nrequirements:\n  - cron (any 'vixie cron' conformant variant, like cronie)\nauthor:\n  - Dane Summers (@dsummersl)\n  - Mike Grozak (@rhaido)\n  - Patrick Callahan (@dirtyharrycallahan)\n  - Evan Kaufman (@EvanK)\n  - Luca Berruti (@lberruti)\nextends_documentation_fragment:\n    - action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: posix\n","return":"#"},{"normalizedName":"Debconf","module":"debconf","short_description":"Configure a .deb package","description":["Configure a .deb package using debconf-set-selections.","Or just query existing selections."],"options":{"name":{"normalizedName":"Name","structTag":"`yaml:\"name,omitempty\" json:\"name,omitempty\"`","goType":"string","goElements":"","description":["Name of package to configure."],"type":"str","required":true,"default":null,"elements":"","aliases":["pkg"]},"question":{"normalizedName":"Question","structTag":"`yaml:\"question,omitempty\" json:\"question,omitempty\"`","goType":"string","goElements":"","description":["A debconf configuration setting."],"type":"str","required":false,"default":null,"elements":"","aliases":["selection","setting"]},"unseen":{"normalizedName":"Unseen","structTag":"`yaml:\"unseen,omitempty\" json:\"unseen,omitempty\"`","goType":"bool","goElements":"","description":["Do not set 'seen' flag when pre-seeding."],"type":"bool","required":false,"default":false,"elements":"","aliases":null},"value":{"normalizedName":"Value","structTag":"`yaml:\"value,omitempty\" json:\"value,omitempty\"`","goType":"string","goElements":"","description":["Value to set the configuration to."],"type":"str","required":false,"default":null,"elements":"","aliases":["answer"]},"vtype":{"normalizedName":"Vtype","structTag":"`yaml:\"vtype,omitempty\" json:\"vtype,omitempty\"`","goType":"string","goElements":"","description":["The type of the value supplied.","It is highly recommended to add I(no_log=True) to task while specifying I(vtype=password).","C(seen) was added in Ansible 2.2."],"type":"str","required":false,"default":null,"elements":"","aliases":null}},"returns":{},"doc":"\n---\nmodule: debconf\nshort_description: Configure a .deb package\ndescription:\n     - Configure a .deb package using debconf-set-selections.\n     - Or just query existing selections.\nversion_added: \"1.6\"\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module requires the command line debconf tools.\n    - A number of questions have to be answered (depending on the package).\n      Use 'debconf-show \u003cpackage\u003e' on any Debian or derivative with the package\n      installed to see questions/settings available.\n    - Some distros will always record tasks involving the setting of passwords as changed. This is due to debconf-get-selections masking passwords.\n    - It is highly recommended to add I(no_log=True) to task while handling sensitive information using this module.\nrequirements:\n- debconf\n- debconf-utils\noptions:\n  name:\n    description:\n      - Name of package to configure.\n    type: str\n    required: true\n    aliases: [ pkg ]\n  question:\n    description:\n      - A debconf configuration setting.\n    type: str\n    aliases: [ selection, setting ]\n  vtype:\n    description:\n      - The type of the value supplied.\n      - It is highly recommended to add I(no_log=True) to task while specifying I(vtype=password).\n      - C(seen) was added in Ansible 2.2.\n    type: str\n    choices: [ boolean, error, multiselect, note, password, seen, select, string, text, title ]\n  value:\n    description:\n      -  Value to set the configuration to.\n    type: str\n    aliases: [ answer ]\n  unseen:\n    description:\n      - Do not set 'seen' flag when pre-seeding.\n    type: bool\n    default: false\nauthor:\n- Brian Coca (@bcoca)\n","return":"#"},{"normalizedName":"Dnf","module":"dnf","short_description":"Manages packages with the I(dnf) package manager","description":["Installs, upgrade, removes, and lists packages and groups with the I(dnf) package manager."],"options":{"allow_downgrade":{"normalizedName":"AllowDowngrade","structTag":"`yaml:\"allow_downgrade,omitempty\" json:\"allow_downgrade,omitempty\"`","goType":"bool","goElements":"","description":["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"allowerasing":{"normalizedName":"Allowerasing","structTag":"`yaml:\"allowerasing,omitempty\" json:\"allowerasing,omitempty\"`","goType":"bool","goElements":"","description":["If C(yes) it allows  erasing  of  installed  packages to resolve dependencies."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"autoremove":{"normalizedName":"Autoremove","structTag":"`yaml:\"autoremove,omitempty\" json:\"autoremove,omitempty\"`","goType":"bool","goElements":"","description":["If C(yes), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)"],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"bugfix":{"normalizedName":"Bugfix","structTag":"`yaml:\"bugfix,omitempty\" json:\"bugfix,omitempty\"`","goType":"bool","goElements":"","description":["If set to C(yes), and C(state=latest) then only installs updates that have been marked bugfix related.","Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"cacheonly":{"normalizedName":"Cacheonly","structTag":"`yaml:\"cacheonly,omitempty\" json:\"cacheonly,omitempty\"`","goType":"bool","goElements":"","description":["Tells dnf to run entirely from system cache; does not download or update metadata."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"conf_file":{"normalizedName":"ConfFile","structTag":"`yaml:\"conf_file,omitempty\" json:\"conf_file,omitempty\"`","goType":"string","goElements":"","description":["The remote dnf configuration file to use for the transaction."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"disable_excludes":{"normalizedName":"DisableExcludes","structTag":"`yaml:\"disable_excludes,omitempty\" json:\"disable_excludes,omitempty\"`","goType":"string","goElements":"","description":["Disable the excludes defined in DNF config files.","If set to C(all), disables all excludes.","If set to C(main), disable excludes defined in [main] in dnf.conf.","If set to C(repoid), disable excludes defined for given repo id."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"disable_gpg_check":{"normalizedName":"DisableGpgCheck","structTag":"`yaml:\"disable_gpg_check,omitempty\" json:\"disable_gpg_check,omitempty\"`","goType":"bool","goElements":"","description":["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest).","This setting affects packages installed from a repository as well as \"local\" packages installed from the filesystem or a URL."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"disable_plugin":{"normalizedName":"DisablePlugin","structTag":"`yaml:\"disable_plugin,omitempty\" json:\"disable_plugin,omitempty\"`","goType":"[]string","goElements":"","description":["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."],"type":"list","required":false,"default":null,"elements":"str","aliases":null},"disablerepo":{"normalizedName":"Disablerepo","structTag":"`yaml:\"disablerepo,omitempty\" json:\"disablerepo,omitempty\"`","goType":"[]string","goElements":"","description":["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."],"type":"list","required":false,"default":null,"elements":"str","aliases":null},"download_dir":{"normalizedName":"DownloadDir","structTag":"`yaml:\"download_dir,omitempty\" json:\"download_dir,omitempty\"`","goType":"string","goElements":"","description":["Specifies an alternate directory to store packages.","Has an effect only if I(download_only) is specified."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"download_only":{"normalizedName":"DownloadOnly","structTag":"`yaml:\"download_only,omitempty\" json:\"download_only,omitempty\"`","goType":"bool","goElements":"","description":["Only download the packages, do not install them."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"enable_plugin":{"normalizedName":"EnablePlugin","structTag":"`yaml:\"enable_plugin,omitempty\" json:\"enable_plugin,omitempty\"`","goType":"[]string","goElements":"","description":["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."],"type":"list","required":false,"default":null,"elements":"str","aliases":null},"enablerepo":{"normalizedName":"Enablerepo","structTag":"`yaml:\"enablerepo,omitempty\" json:\"enablerepo,omitempty\"`","goType":"[]string","goElements":"","description":["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."],"type":"list","required":false,"default":null,"elements":"str","aliases":null},"exclude":{"normalizedName":"Exclude","structTag":"`yaml:\"exclude,omitempty\" json:\"exclude,omitempty\"`","goType":"[]string","goElements":"","description":["Package name(s) to exclude when state=present, or latest. This can be a list or a comma separated string."],"type":"list","required":false,"default":null,"elements":"str","aliases":null},"install_repoquery":{"normalizedName":"InstallRepoquery","structTag":"`yaml:\"install_repoquery,omitempty\" json:\"install_repoquery,omitempty\"`","goType":"bool","goElements":"","description":["This is effectively a no-op in DNF as it is not needed with DNF, but is an accepted parameter for feature parity/compatibility with the I(yum) module."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null},"install_weak_deps":{"normalizedName":"InstallWeakDeps","structTag":"`yaml:\"install_weak_deps,omitempty\" json:\"install_weak_deps,omitempty\"`","goType":"bool","goElements":"","description":["Will also install all packages linked by a weak dependency relation."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null},"installroot":{"normalizedName":"Installroot","structTag":"`yaml:\"installroot,omitempty\" json:\"installroot,omitempty\"`","goType":"string","goElements":"","description":["Specifies an alternative installroot, relative to which all packages will be installed."],"type":"str","required":false,"default":"/","elements":"","aliases":null},"list":{"normalizedName":"List","structTag":"`yaml:\"list,omitempty\" json:\"list,omitempty\"`","goType":"string","goElements":"","description":["Various (non-idempotent) commands for usage with C(/usr/bin/ansible) and I(not) playbooks. See examples."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"lock_timeout":{"normalizedName":"LockTimeout","structTag":"`yaml:\"lock_timeout,omitempty\" json:\"lock_timeout,omitempty\"`","goType":"int","goElements":"","description":["Amount of time to wait for the dnf lockfile to be freed."],"type":"int","required":false,"default":30,"elements":"","aliases":null},"name":{"normalizedName":"Name","structTag":"`yaml:\"name,omitempty\" json:\"name,omitempty\"`","goType":"[]string","goElements":"","description":["A package name or package specifier with version, like C(name-1.0). When using state=latest, this can be '*' which means run: dnf -y update. You can also pass a url or a local path to a rpm file. To operate on several packages this can accept a comma separated string of packages or a list of packages.","Comparison operators for package version are valid here C(\u003e), C(\u003c), C(\u003e=), C(\u003c=). Example - C(name\u003e=1.0)","You can also pass an absolute path for a binary which is provided by the package to install. See examples for more information."],"type":"list","required":true,"default":null,"elements":"str","aliases":["pkg"]},"nobest":{"normalizedName":"Nobest","structTag":"`yaml:\"nobest,omitempty\" json:\"nobest,omitempty\"`","goType":"bool","goElements":"","description":["Set best option to False, so that transactions are not limited to best candidates only."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"releasever":{"normalizedName":"Releasever","structTag":"`yaml:\"releasever,omitempty\" json:\"releasever,omitempty\"`","goType":"string","goElements":"","description":["Specifies an alternative release from which all packages will be installed."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"security":{"normalizedName":"Security","structTag":"`yaml:\"security,omitempty\" json:\"security,omitempty\"`","goType":"bool","goElements":"","description":["If set to C(yes), and C(state=latest) then only installs updates that have been marked security related.","Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"skip_broken":{"normalizedName":"SkipBroken","structTag":"`yaml:\"skip_broken,omitempty\" json:\"skip_broken,omitempty\"`","goType":"bool","goElements":"","description":["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"sslverify":{"normalizedName":"Sslverify","structTag":"`yaml:\"sslverify,omitempty\" json:\"sslverify,omitempty\"`","goType":"bool","goElements":"","description":["Disables SSL validation of the repository server for this transaction.","This should be set to C(no) if one of the configured repositories is using an untrusted or self-signed certificate."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null},"state":{"normalizedName":"State","structTag":"`yaml:\"state,omitempty\" json:\"state,omitempty\"`","goType":"string","goElements":"","description":["Whether to install (C(present), C(latest)), or remove (C(absent)) a package.","Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"update_cache":{"normalizedName":"UpdateCache","structTag":"`yaml:\"update_cache,omitempty\" json:\"update_cache,omitempty\"`","goType":"bool","goElements":"","description":["Force dnf to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."],"type":"bool","required":false,"default":"no","elements":"","aliases":["expire-cache"]},"update_only":{"normalizedName":"UpdateOnly","structTag":"`yaml:\"update_only,omitempty\" json:\"update_only,omitempty\"`","goType":"bool","goElements":"","description":["When using latest, only update installed packages. Do not install packages.","Has an effect only if state is I(latest)"],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"validate_certs":{"normalizedName":"ValidateCerts","structTag":"`yaml:\"validate_certs,omitempty\" json:\"validate_certs,omitempty\"`","goType":"bool","goElements":"","description":["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(no), the SSL certificates will not be validated.","This should only set to C(no) used on personally controlled sites using self-signed certificates as it avoids verifying the source site."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null}},"returns":{},"doc":"\n---\nmodule: dnf\nversion_added: 1.9\nshort_description: Manages packages with the I(dnf) package manager\ndescription:\n     - Installs, upgrade, removes, and lists packages and groups with the I(dnf) package manager.\noptions:\n  name:\n    description:\n      - \"A package name or package specifier with version, like C(name-1.0).\n        When using state=latest, this can be '*' which means run: dnf -y update.\n        You can also pass a url or a local path to a rpm file.\n        To operate on several packages this can accept a comma separated string of packages or a list of packages.\"\n      - Comparison operators for package version are valid here C(\u003e), C(\u003c), C(\u003e=), C(\u003c=). Example - C(name\u003e=1.0)\n      - You can also pass an absolute path for a binary which is provided by the package to install.\n        See examples for more information.\n    required: true\n    aliases:\n        - pkg\n    type: list\n    elements: str\n\n  list:\n    description:\n      - Various (non-idempotent) commands for usage with C(/usr/bin/ansible) and I(not) playbooks. See examples.\n    type: str\n\n  state:\n    description:\n      - Whether to install (C(present), C(latest)), or remove (C(absent)) a package.\n      - Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is\n        enabled for this module, then C(absent) is inferred.\n    choices: ['absent', 'present', 'installed', 'removed', 'latest']\n    type: str\n\n  enablerepo:\n    description:\n      - I(Repoid) of repositories to enable for the install/update operation.\n        These repos will not persist beyond the transaction.\n        When specifying multiple repos, separate them with a \",\".\n    type: list\n    elements: str\n\n  disablerepo:\n    description:\n      - I(Repoid) of repositories to disable for the install/update operation.\n        These repos will not persist beyond the transaction.\n        When specifying multiple repos, separate them with a \",\".\n    type: list\n    elements: str\n\n  conf_file:\n    description:\n      - The remote dnf configuration file to use for the transaction.\n    type: str\n\n  disable_gpg_check:\n    description:\n      - Whether to disable the GPG checking of signatures of packages being\n        installed. Has an effect only if state is I(present) or I(latest).\n      - This setting affects packages installed from a repository as well as\n        \"local\" packages installed from the filesystem or a URL.\n    type: bool\n    default: 'no'\n\n  installroot:\n    description:\n      - Specifies an alternative installroot, relative to which all packages\n        will be installed.\n    version_added: \"2.3\"\n    default: \"/\"\n    type: str\n\n  releasever:\n    description:\n      - Specifies an alternative release from which all packages will be\n        installed.\n    version_added: \"2.6\"\n    type: str\n\n  autoremove:\n    description:\n      - If C(yes), removes all \"leaf\" packages from the system that were originally\n        installed as dependencies of user-installed packages but which are no longer\n        required by any such package. Should be used alone or when state is I(absent)\n    type: bool\n    default: \"no\"\n    version_added: \"2.4\"\n  exclude:\n    description:\n      - Package name(s) to exclude when state=present, or latest. This can be a\n        list or a comma separated string.\n    version_added: \"2.7\"\n    type: list\n    elements: str\n  skip_broken:\n    description:\n      - Skip all unavailable packages or packages with broken dependencies\n        without raising an error. Equivalent to passing the --skip-broken option.\n    type: bool\n    default: \"no\"\n    version_added: \"2.7\"\n  update_cache:\n    description:\n      - Force dnf to check if cache is out of date and redownload if needed.\n        Has an effect only if state is I(present) or I(latest).\n    type: bool\n    default: \"no\"\n    aliases: [ expire-cache ]\n    version_added: \"2.7\"\n  update_only:\n    description:\n      - When using latest, only update installed packages. Do not install packages.\n      - Has an effect only if state is I(latest)\n    default: \"no\"\n    type: bool\n    version_added: \"2.7\"\n  security:\n    description:\n      - If set to C(yes), and C(state=latest) then only installs updates that have been marked security related.\n      - Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well.\n    type: bool\n    default: \"no\"\n    version_added: \"2.7\"\n  bugfix:\n    description:\n      - If set to C(yes), and C(state=latest) then only installs updates that have been marked bugfix related.\n      - Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well.\n    default: \"no\"\n    type: bool\n    version_added: \"2.7\"\n  enable_plugin:\n    description:\n      - I(Plugin) name to enable for the install/update operation.\n        The enabled plugin will not persist beyond the transaction.\n    version_added: \"2.7\"\n    type: list\n    elements: str\n  disable_plugin:\n    description:\n      - I(Plugin) name to disable for the install/update operation.\n        The disabled plugins will not persist beyond the transaction.\n    version_added: \"2.7\"\n    type: list\n    elements: str\n  disable_excludes:\n    description:\n      - Disable the excludes defined in DNF config files.\n      - If set to C(all), disables all excludes.\n      - If set to C(main), disable excludes defined in [main] in dnf.conf.\n      - If set to C(repoid), disable excludes defined for given repo id.\n    version_added: \"2.7\"\n    type: str\n  validate_certs:\n    description:\n      - This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(no), the SSL certificates will not be validated.\n      - This should only set to C(no) used on personally controlled sites using self-signed certificates as it avoids verifying the source site.\n    type: bool\n    default: \"yes\"\n    version_added: \"2.7\"\n  sslverify:\n    description:\n      - Disables SSL validation of the repository server for this transaction.\n      - This should be set to C(no) if one of the configured repositories is using an untrusted or self-signed certificate.\n    type: bool\n    default: \"yes\"\n    version_added: \"2.13\"\n  allow_downgrade:\n    description:\n      - Specify if the named package and version is allowed to downgrade\n        a maybe already installed higher version of that package.\n        Note that setting allow_downgrade=True can make this module\n        behave in a non-idempotent way. The task could end up with a set\n        of packages that does not match the complete list of specified\n        packages to install (because dependencies between the downgraded\n        package and others can cause changes to the packages which were\n        in the earlier transaction).\n    type: bool\n    default: \"no\"\n    version_added: \"2.7\"\n  install_repoquery:\n    description:\n      - This is effectively a no-op in DNF as it is not needed with DNF, but is an accepted parameter for feature\n        parity/compatibility with the I(yum) module.\n    type: bool\n    default: \"yes\"\n    version_added: \"2.7\"\n  download_only:\n    description:\n      - Only download the packages, do not install them.\n    default: \"no\"\n    type: bool\n    version_added: \"2.7\"\n  lock_timeout:\n    description:\n      - Amount of time to wait for the dnf lockfile to be freed.\n    required: false\n    default: 30\n    type: int\n    version_added: \"2.8\"\n  install_weak_deps:\n    description:\n      - Will also install all packages linked by a weak dependency relation.\n    type: bool\n    default: \"yes\"\n    version_added: \"2.8\"\n  download_dir:\n    description:\n      - Specifies an alternate directory to store packages.\n      - Has an effect only if I(download_only) is specified.\n    type: str\n    version_added: \"2.8\"\n  allowerasing:\n    description:\n      - If C(yes) it allows  erasing  of  installed  packages to resolve dependencies.\n    required: false\n    type: bool\n    default: \"no\"\n    version_added: \"2.10\"\n  nobest:\n    description:\n      - Set best option to False, so that transactions are not limited to best candidates only.\n    required: false\n    type: bool\n    default: \"no\"\n    version_added: \"2.11\"\n  cacheonly:\n    description:\n      - Tells dnf to run entirely from system cache; does not download or update metadata.\n    type: bool\n    default: \"no\"\n    version_added: \"2.12\"\nextends_documentation_fragment:\n- action_common_attributes\n- action_common_attributes.flow\nattributes:\n    action:\n        details: In the case of dnf, it has 2 action plugins that use it under the hood, M(ansible.builtin.yum) and M(ansible.builtin.package).\n        support: partial\n    async:\n        support: none\n    bypass_host_loop:\n        support: none\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        platforms: rhel\nnotes:\n  - When used with a C(loop:) each package will be processed individually, it is much more efficient to pass the list directly to the I(name) option.\n  - Group removal doesn't work if the group was installed with Ansible because\n    upstream dnf's API doesn't properly mark groups as installed, therefore upon\n    removal the module is unable to detect that the group is installed\n    (https://bugzilla.redhat.com/show_bug.cgi?id=1620324)\nrequirements:\n  - \"python \u003e= 2.6\"\n  - python-dnf\n  - for the autoremove option you need dnf \u003e= 2.0.1\"\nauthor:\n  - Igor Gnatenko (@ignatenkobrain) \u003ci.gnatenko.brain@gmail.com\u003e\n  - Cristian van Ee (@DJMuggs) \u003ccristian at cvee.org\u003e\n  - Berend De Schouwer (@berenddeschouwer)\n  - Adam Miller (@maxamillion) \u003cadmiller@redhat.com\u003e\n","return":""},{"normalizedName":"DpkgSelections","module":"dpkg_selections","short_description":"Dpkg package selection selections","description":["Change dpkg package selection state via --get-selections and --set-selections."],"options":{"name":{"normalizedName":"Name","structTag":"`yaml:\"name,omitempty\" json:\"name,omitempty\"`","goType":"string","goElements":"","description":["Name of the package."],"type":"str","required":true,"default":null,"elements":"","aliases":null},"selection":{"normalizedName":"Selection","structTag":"`yaml:\"selection,omitempty\" json:\"selection,omitempty\"`","goType":"string","goElements":"","description":["The selection state to set the package to."],"type":"str","required":true,"default":null,"elements":"","aliases":null}},"returns":{},"doc":"\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  \u003cbrian.brazil@boxever.com\u003e\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n","return":""},{"normalizedName":"Expect","module":"expect","short_description":"Executes a command and responds to prompts","description":["The C(expect) module executes a command and responds to prompts.","The given command will be executed on all selected nodes. It will not be processed through the shell, so variables like C($HOME) and operations like C(\"\u003c\"), C(\"\u003e\"), C(\"|\"), and C(\"\u0026\") will not work."],"options":{"chdir":{"normalizedName":"Chdir","structTag":"`yaml:\"chdir,omitempty\" json:\"chdir,omitempty\"`","goType":"string","goElements":"","description":["Change into this directory before running the command."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"command":{"normalizedName":"Command","structTag":"`yaml:\"command,omitempty\" json:\"command,omitempty\"`","goType":"string","goElements":"","description":["The command module takes command to run."],"type":"str","required":true,"default":null,"elements":"","aliases":null},"creates":{"normalizedName":"Creates","structTag":"`yaml:\"creates,omitempty\" json:\"creates,omitempty\"`","goType":"string","goElements":"","description":["A filename, when it already exists, this step will B(not) be run."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"echo":{"normalizedName":"Echo","structTag":"`yaml:\"echo,omitempty\" json:\"echo,omitempty\"`","goType":"bool","goElements":"","description":["Whether or not to echo out your response strings."],"type":"bool","required":false,"default":false,"elements":"","aliases":null},"removes":{"normalizedName":"Removes","structTag":"`yaml:\"removes,omitempty\" json:\"removes,omitempty\"`","goType":"string","goElements":"","description":["A filename, when it does not exist, this step will B(not) be run."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"responses":{"normalizedName":"Responses","structTag":"`yaml:\"responses,omitempty\" json:\"responses,omitempty\"`","goType":"map[string]string","goElements":"","description":["Mapping of expected string/regex and string to respond with. If the response is a list, successive matches return successive responses. List functionality is new in 2.1."],"type":"dict","required":true,"default":null,"elements":"","aliases":null},"timeout":{"normalizedName":"Timeout","structTag":"`yaml:\"timeout,omitempty\" json:\"timeout,omitempty\"`","goType":"int","goElements":"","description":["Amount of time in seconds to wait for the expected strings. Use C(null) to disable timeout."],"type":"int","required":false,"default":30,"elements":"","aliases":null}},"returns":{},"doc":"\n---\nmodule: expect\nversion_added: '2.0'\nshort_description: Executes a command and responds to prompts\ndescription:\n     - The C(expect) module executes a command and responds to prompts.\n     - The given command will be executed on all selected nodes. It will not be\n       processed through the shell, so variables like C($HOME) and operations\n       like C(\"\u003c\"), C(\"\u003e\"), C(\"|\"), and C(\"\u0026\") will not work.\noptions:\n  command:\n    description:\n      - The command module takes command to run.\n    required: true\n    type: str\n  creates:\n    type: path\n    description:\n      - A filename, when it already exists, this step will B(not) be run.\n  removes:\n    type: path\n    description:\n      - A filename, when it does not exist, this step will B(not) be run.\n  chdir:\n    type: path\n    description:\n      - Change into this directory before running the command.\n  responses:\n    type: dict\n    description:\n      - Mapping of expected string/regex and string to respond with. If the\n        response is a list, successive matches return successive\n        responses. List functionality is new in 2.1.\n    required: true\n  timeout:\n    type: int\n    description:\n      - Amount of time in seconds to wait for the expected strings. Use\n        C(null) to disable timeout.\n    default: 30\n  echo:\n    description:\n      - Whether or not to echo out your response strings.\n    default: false\n    type: bool\nrequirements:\n  - python \u003e= 2.6\n  - pexpect \u003e= 3.3\nextends_documentation_fragment: action_common_attributes\nattributes:\n    check_mode:\n        support: none\n    diff_mode:\n        support: none\n    platform:\n        support: full\n        platforms: posix\nnotes:\n  - If you want to run a command through the shell (say you are using C(\u003c),\n    C(\u003e), C(|), and so on), you must specify a shell in the command such as\n    C(/bin/bash -c \"/path/to/something | grep else\").\n  - The question, or key, under I(responses) is a python regex match. Case\n    insensitive searches are indicated with a prefix of C(?i).\n  - The C(pexpect) library used by this module operates with a search window\n    of 2000 bytes, and does not use a multiline regex match. To perform a\n    start of line bound match, use a pattern like ``(?m)^pattern``\n  - By default, if a question is encountered multiple times, its string\n    response will be repeated. If you need different responses for successive\n    question matches, instead of a string response, use a list of strings as\n    the response. The list functionality is new in 2.1.\n  - The M(ansible.builtin.expect) module is designed for simple scenarios.\n    For more complex needs, consider the use of expect code with the M(ansible.builtin.shell)\n    or M(ansible.builtin.script) modules. (An example is part of the M(ansible.builtin.shell) module documentation).\nseealso:\n- module: ansible.builtin.script\n- module: ansible.builtin.shell\nauthor: \"Matt Martz (@sivel)\"\n","return":""},{"normalizedName":"File","module":"file","short_description":"Manage files and file properties","description":["Set attributes of files, symlinks or directories.","Alternatively, remove files, symlinks or directories.","Many other modules support the same options as the C(file) module - including M(ansible.builtin.copy), M(ansible.builtin.template), and M(ansible.builtin.assemble).","For Windows targets, use the M(ansible.windows.win_file) module instead."],"options":{"access_time":{"normalizedName":"AccessTime","structTag":"`yaml:\"access_time,omitempty\" json:\"access_time,omitempty\"`","goType":"string","goElements":"","description":["This parameter indicates the time the file's access time should be set to.","Should be C(preserve) when no modification is required, C(YYYYMMDDHHMM.SS) when using default time format, or C(now).","Default is C(None) meaning that C(preserve) is the default for C(state=[file,directory,link,hard]) and C(now) is default for C(state=touch)."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"access_time_format":{"normalizedName":"AccessTimeFormat","structTag":"`yaml:\"access_time_format,omitempty\" json:\"access_time_format,omitempty\"`","goType":"string","goElements":"","description":["When used with C(access_time), indicates the time format that must be used.","Based on default Python format (see time.strftime doc)."],"type":"str","required":false,"default":"%Y%m%d%H%M.%S","elements":"","aliases":null},"follow":{"normalizedName":"Follow","structTag":"`yaml:\"follow,omitempty\" json:\"follow,omitempty\"`","goType":"bool","goElements":"","description":["This flag indicates that filesystem links, if they exist, should be followed.","Previous to Ansible 2.5, this was C(no) by default."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null},"force":{"normalizedName":"Force","structTag":"`yaml:\"force,omitempty\" json:\"force,omitempty\"`","goType":"bool","goElements":"","description":["Force the creation of the symlinks in two cases: the source file does not exist (but will appear later); the destination exists and is a file (so, we need to unlink the C(path) file and create symlink to the C(src) file in place of it).\n"],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"modification_time":{"normalizedName":"ModificationTime","structTag":"`yaml:\"modification_time,omitempty\" json:\"modification_time,omitempty\"`","goType":"string","goElements":"","description":["This parameter indicates the time the file's modification time should be set to.","Should be C(preserve) when no modification is required, C(YYYYMMDDHHMM.SS) when using default time format, or C(now).","Default is None meaning that C(preserve) is the default for C(state=[file,directory,link,hard]) and C(now) is default for C(state=touch)."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"modification_time_format":{"normalizedName":"ModificationTimeFormat","structTag":"`yaml:\"modification_time_format,omitempty\" json:\"modification_time_format,omitempty\"`","goType":"string","goElements":"","description":["When used with C(modification_time), indicates the time format that must be used.","Based on default Python format (see time.strftime doc)."],"type":"str","required":false,"default":"%Y%m%d%H%M.%S","elements":"","aliases":null},"path":{"normalizedName":"Path","structTag":"`yaml:\"path,omitempty\" json:\"path,omitempty\"`","goType":"string","goElements":"","description":["Path to the file being managed."],"type":"path","required":true,"default":null,"elements":"","aliases":["dest","name"]},"recurse":{"normalizedName":"Recurse","structTag":"`yaml:\"recurse,omitempty\" json:\"recurse,omitempty\"`","goType":"bool","goElements":"","description":["Recursively set the specified file attributes on directory contents.","This applies only when C(state) is set to C(directory)."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"src":{"normalizedName":"Src","structTag":"`yaml:\"src,omitempty\" json:\"src,omitempty\"`","goType":"string","goElements":"","description":["Path of the file to link to.","This applies only to C(state=link) and C(state=hard).","For C(state=link), this will also accept a non-existing path.","Relative paths are relative to the file being created (C(path)) which is how the Unix command C(ln -s SRC DEST) treats relative paths."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"state":{"normalizedName":"State","structTag":"`yaml:\"state,omitempty\" json:\"state,omitempty\"`","goType":"string","goElements":"","description":["If C(absent), directories will be recursively deleted, and files or symlinks will be unlinked. In the case of a directory, if C(diff) is declared, you will see the files and folders deleted listed under C(path_contents). Note that C(absent) will not cause C(file) to fail if the C(path) does not exist as the state did not change.","If C(directory), all intermediate subdirectories will be created if they do not exist. Since Ansible 1.7 they will be created with the supplied permissions.","If C(file), with no other options, returns the current state of C(path).","If C(file), even with other options (such as C(mode)), the file will be modified if it exists but will NOT be created if it does not exist. Set to C(touch) or use the M(ansible.builtin.copy) or M(ansible.builtin.template) module if you want to create the file if it does not exist.","If C(hard), the hard link will be created or changed.","If C(link), the symbolic link will be created or changed.","If C(touch) (new in 1.4), an empty file will be created if the file does not exist, while an existing file or directory will receive updated file access and modification times (similar to the way C(touch) works from the command line)."],"type":"str","required":false,"default":"file","elements":"","aliases":null}},"returns":{"dest":{"normalizedName":"Dest","description":"Destination file/path, equal to the value passed to I(path).","returned":"state=touch, state=hard, state=link","type":"str","sample":"/path/to/file.txt","goType":"string","structTag":"`yaml:\"dest,omitempty\" json:\"dest,omitempty\"`"},"path":{"normalizedName":"Path","description":"Destination file/path, equal to the value passed to I(path).","returned":"state=absent, state=directory, state=file","type":"str","sample":"/path/to/file.txt","goType":"string","structTag":"`yaml:\"path,omitempty\" json:\"path,omitempty\"`"}},"doc":"\n---\nmodule: file\nversion_added: historical\nshort_description: Manage files and file properties\nextends_documentation_fragment: [files, action_common_attributes]\ndescription:\n- Set attributes of files, symlinks or directories.\n- Alternatively, remove files, symlinks or directories.\n- Many other modules support the same options as the C(file) module - including M(ansible.builtin.copy),\n  M(ansible.builtin.template), and M(ansible.builtin.assemble).\n- For Windows targets, use the M(ansible.windows.win_file) module instead.\noptions:\n  path:\n    description:\n    - Path to the file being managed.\n    type: path\n    required: yes\n    aliases: [ dest, name ]\n  state:\n    description:\n    - If C(absent), directories will be recursively deleted, and files or symlinks will\n      be unlinked. In the case of a directory, if C(diff) is declared, you will see the files and folders deleted listed\n      under C(path_contents). Note that C(absent) will not cause C(file) to fail if the C(path) does\n      not exist as the state did not change.\n    - If C(directory), all intermediate subdirectories will be created if they\n      do not exist. Since Ansible 1.7 they will be created with the supplied permissions.\n    - If C(file), with no other options, returns the current state of C(path).\n    - If C(file), even with other options (such as C(mode)), the file will be modified if it exists but will NOT be created if it does not exist.\n      Set to C(touch) or use the M(ansible.builtin.copy) or M(ansible.builtin.template) module if you want to create the file if it does not exist.\n    - If C(hard), the hard link will be created or changed.\n    - If C(link), the symbolic link will be created or changed.\n    - If C(touch) (new in 1.4), an empty file will be created if the file does not\n      exist, while an existing file or directory will receive updated file access and\n      modification times (similar to the way C(touch) works from the command line).\n    type: str\n    default: file\n    choices: [ absent, directory, file, hard, link, touch ]\n  src:\n    description:\n    - Path of the file to link to.\n    - This applies only to C(state=link) and C(state=hard).\n    - For C(state=link), this will also accept a non-existing path.\n    - Relative paths are relative to the file being created (C(path)) which is how\n      the Unix command C(ln -s SRC DEST) treats relative paths.\n    type: path\n  recurse:\n    description:\n    - Recursively set the specified file attributes on directory contents.\n    - This applies only when C(state) is set to C(directory).\n    type: bool\n    default: no\n    version_added: '1.1'\n  force:\n    description:\n    - \u003e\n      Force the creation of the symlinks in two cases: the source file does\n      not exist (but will appear later); the destination exists and is a file (so, we need to unlink the\n      C(path) file and create symlink to the C(src) file in place of it).\n    type: bool\n    default: no\n  follow:\n    description:\n    - This flag indicates that filesystem links, if they exist, should be followed.\n    - Previous to Ansible 2.5, this was C(no) by default.\n    type: bool\n    default: yes\n    version_added: '1.8'\n  modification_time:\n    description:\n    - This parameter indicates the time the file's modification time should be set to.\n    - Should be C(preserve) when no modification is required, C(YYYYMMDDHHMM.SS) when using default time format, or C(now).\n    - Default is None meaning that C(preserve) is the default for C(state=[file,directory,link,hard]) and C(now) is default for C(state=touch).\n    type: str\n    version_added: \"2.7\"\n  modification_time_format:\n    description:\n    - When used with C(modification_time), indicates the time format that must be used.\n    - Based on default Python format (see time.strftime doc).\n    type: str\n    default: \"%Y%m%d%H%M.%S\"\n    version_added: '2.7'\n  access_time:\n    description:\n    - This parameter indicates the time the file's access time should be set to.\n    - Should be C(preserve) when no modification is required, C(YYYYMMDDHHMM.SS) when using default time format, or C(now).\n    - Default is C(None) meaning that C(preserve) is the default for C(state=[file,directory,link,hard]) and C(now) is default for C(state=touch).\n    type: str\n    version_added: '2.7'\n  access_time_format:\n    description:\n    - When used with C(access_time), indicates the time format that must be used.\n    - Based on default Python format (see time.strftime doc).\n    type: str\n    default: \"%Y%m%d%H%M.%S\"\n    version_added: '2.7'\nseealso:\n- module: ansible.builtin.assemble\n- module: ansible.builtin.copy\n- module: ansible.builtin.stat\n- module: ansible.builtin.template\n- module: ansible.windows.win_file\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        details: permissions and ownership will be shown but file contents on absent/touch will not.\n        support: partial\n    platform:\n        platforms: posix\nauthor:\n- Ansible Core Team\n- Michael DeHaan\n","return":"\ndest:\n    description: Destination file/path, equal to the value passed to I(path).\n    returned: state=touch, state=hard, state=link\n    type: str\n    sample: /path/to/file.txt\npath:\n    description: Destination file/path, equal to the value passed to I(path).\n    returned: state=absent, state=directory, state=file\n    type: str\n    sample: /path/to/file.txt\n"},{"normalizedName":"Find","module":"find","short_description":"Return a list of files based on specific criteria","description":["Return a list of files based on specific criteria. Multiple criteria are AND'd together.","For Windows targets, use the M(ansible.windows.win_find) module instead."],"options":{"age":{"normalizedName":"Age","structTag":"`yaml:\"age,omitempty\" json:\"age,omitempty\"`","goType":"string","goElements":"","description":["Select files whose age is equal to or greater than the specified time.","Use a negative age to find files equal to or less than the specified time.","You can choose seconds, minutes, hours, days, or weeks by specifying the first letter of any of those words (e.g., \"1w\")."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"age_stamp":{"normalizedName":"AgeStamp","structTag":"`yaml:\"age_stamp,omitempty\" json:\"age_stamp,omitempty\"`","goType":"string","goElements":"","description":["Choose the file property against which we compare age."],"type":"str","required":false,"default":"mtime","elements":"","aliases":null},"contains":{"normalizedName":"Contains","structTag":"`yaml:\"contains,omitempty\" json:\"contains,omitempty\"`","goType":"string","goElements":"","description":["A regular expression or pattern which should be matched against the file content.","Works only when I(file_type) is C(file)."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"depth":{"normalizedName":"Depth","structTag":"`yaml:\"depth,omitempty\" json:\"depth,omitempty\"`","goType":"int","goElements":"","description":["Set the maximum number of levels to descend into.","Setting recurse to C(no) will override this value, which is effectively depth 1.","Default is unlimited depth."],"type":"int","required":false,"default":null,"elements":"","aliases":null},"excludes":{"normalizedName":"Excludes","structTag":"`yaml:\"excludes,omitempty\" json:\"excludes,omitempty\"`","goType":"[]string","goElements":"","description":["One or more (shell or regex) patterns, which type is controlled by C(use_regex) option.","Items whose basenames match an C(excludes) pattern are culled from C(patterns) matches. Multiple patterns can be specified using a list."],"type":"list","required":false,"default":null,"elements":"str","aliases":["exclude"]},"file_type":{"normalizedName":"FileType","structTag":"`yaml:\"file_type,omitempty\" json:\"file_type,omitempty\"`","goType":"string","goElements":"","description":["Type of file to select.","The 'link' and 'any' choices were added in Ansible 2.3."],"type":"str","required":false,"default":"file","elements":"","aliases":null},"follow":{"normalizedName":"Follow","structTag":"`yaml:\"follow,omitempty\" json:\"follow,omitempty\"`","goType":"bool","goElements":"","description":["Set this to C(yes) to follow symlinks in path for systems with python 2.6+."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"get_checksum":{"normalizedName":"GetChecksum","structTag":"`yaml:\"get_checksum,omitempty\" json:\"get_checksum,omitempty\"`","goType":"bool","goElements":"","description":["Set this to C(yes) to retrieve a file's SHA1 checksum."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"hidden":{"normalizedName":"Hidden","structTag":"`yaml:\"hidden,omitempty\" json:\"hidden,omitempty\"`","goType":"bool","goElements":"","description":["Set this to C(yes) to include hidden files, otherwise they will be ignored."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"paths":{"normalizedName":"Paths","structTag":"`yaml:\"paths,omitempty\" json:\"paths,omitempty\"`","goType":"[]string","goElements":"","description":["List of paths of directories to search. All paths must be fully qualified."],"type":"list","required":true,"default":null,"elements":"str","aliases":["name","path"]},"patterns":{"normalizedName":"Patterns","structTag":"`yaml:\"patterns,omitempty\" json:\"patterns,omitempty\"`","goType":"[]string","goElements":"","description":["One or more (shell or regex) patterns, which type is controlled by C(use_regex) option.","The patterns restrict the list of files to be returned to those whose basenames match at least one of the patterns specified. Multiple patterns can be specified using a list.","The pattern is matched against the file base name, excluding the directory.","When using regexen, the pattern MUST match the ENTIRE file name, not just parts of it. So if you are looking to match all files ending in .default, you'd need to use '.*\\.default' as a regexp and not just '\\.default'.","This parameter expects a list, which can be either comma separated or YAML. If any of the patterns contain a comma, make sure to put them in a list to avoid splitting the patterns in undesirable ways.","Defaults to '*' when C(use_regex=False), or '.*' when C(use_regex=True)."],"type":"list","required":false,"default":[],"elements":"str","aliases":["pattern"]},"read_whole_file":{"normalizedName":"ReadWholeFile","structTag":"`yaml:\"read_whole_file,omitempty\" json:\"read_whole_file,omitempty\"`","goType":"bool","goElements":"","description":["When doing a C(contains) search, determines whether the whole file should be read into memory or if the regex should be applied to the file line-by-line.","Setting this to C(true) can have performance and memory implications for large files.","This uses C(re.search()) instead of C(re.match())."],"type":"bool","required":false,"default":false,"elements":"","aliases":null},"recurse":{"normalizedName":"Recurse","structTag":"`yaml:\"recurse,omitempty\" json:\"recurse,omitempty\"`","goType":"bool","goElements":"","description":["If target is a directory, recursively descend into the directory looking for files."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"size":{"normalizedName":"Size","structTag":"`yaml:\"size,omitempty\" json:\"size,omitempty\"`","goType":"string","goElements":"","description":["Select files whose size is equal to or greater than the specified size.","Use a negative size to find files equal to or less than the specified size.","Unqualified values are in bytes but b, k, m, g, and t can be appended to specify bytes, kilobytes, megabytes, gigabytes, and terabytes, respectively.","Size is not evaluated for directories."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"use_regex":{"normalizedName":"UseRegex","structTag":"`yaml:\"use_regex,omitempty\" json:\"use_regex,omitempty\"`","goType":"bool","goElements":"","description":["If C(no), the patterns are file globs (shell).","If C(yes), they are python regexes."],"type":"bool","required":false,"default":"no","elements":"","aliases":null}},"returns":{"examined":{"normalizedName":"Examined","description":"Number of filesystem objects looked at","returned":"success","type":"int","sample":34,"goType":"int","structTag":"`yaml:\"examined,omitempty\" json:\"examined,omitempty\"`"},"files":{"normalizedName":"Files","description":"All matches found with the specified criteria (see stat module for full output of each dictionary)","returned":"success","type":"list","sample":[{"...":"...","checksum":"16fac7be61a6e4591a33ef4b729c5c3302307523","mode":"0644","path":"/var/tmp/test1"},{"...":"...","path":"/var/tmp/test2"}],"goType":"[]map[string]interface{}","structTag":"`yaml:\"files,omitempty\" json:\"files,omitempty\"`"},"matched":{"normalizedName":"Matched","description":"Number of matches","returned":"success","type":"int","sample":14,"goType":"int","structTag":"`yaml:\"matched,omitempty\" json:\"matched,omitempty\"`"},"skipped_paths":{"normalizedName":"SkippedPaths","description":"skipped paths and reasons they were skipped","returned":"success","type":"dict","sample":{"/laskdfj":"'/laskdfj' is not a directory"},"goType":"map[string]string","structTag":"`yaml:\"skipped_paths,omitempty\" json:\"skipped_paths,omitempty\"`"}},"doc":"\n---\nmodule: find\nauthor: Brian Coca (@bcoca)\nversion_added: \"2.0\"\nshort_description: Return a list of files based on specific criteria\ndescription:\n    - Return a list of files based on specific criteria. Multiple criteria are AND'd together.\n    - For Windows targets, use the M(ansible.windows.win_find) module instead.\noptions:\n    age:\n        description:\n            - Select files whose age is equal to or greater than the specified time.\n            - Use a negative age to find files equal to or less than the specified time.\n            - You can choose seconds, minutes, hours, days, or weeks by specifying the\n              first letter of any of those words (e.g., \"1w\").\n        type: str\n    patterns:\n        default: []\n        description:\n            - One or more (shell or regex) patterns, which type is controlled by C(use_regex) option.\n            - The patterns restrict the list of files to be returned to those whose basenames match at\n              least one of the patterns specified. Multiple patterns can be specified using a list.\n            - The pattern is matched against the file base name, excluding the directory.\n            - When using regexen, the pattern MUST match the ENTIRE file name, not just parts of it. So\n              if you are looking to match all files ending in .default, you'd need to use '.*\\.default'\n              as a regexp and not just '\\.default'.\n            - This parameter expects a list, which can be either comma separated or YAML. If any of the\n              patterns contain a comma, make sure to put them in a list to avoid splitting the patterns\n              in undesirable ways.\n            - Defaults to '*' when C(use_regex=False), or '.*' when C(use_regex=True).\n        type: list\n        aliases: [ pattern ]\n        elements: str\n    excludes:\n        description:\n            - One or more (shell or regex) patterns, which type is controlled by C(use_regex) option.\n            - Items whose basenames match an C(excludes) pattern are culled from C(patterns) matches.\n              Multiple patterns can be specified using a list.\n        type: list\n        aliases: [ exclude ]\n        version_added: \"2.5\"\n        elements: str\n    contains:\n        description:\n            - A regular expression or pattern which should be matched against the file content.\n            - Works only when I(file_type) is C(file).\n        type: str\n    read_whole_file:\n        description:\n            - When doing a C(contains) search, determines whether the whole file should be read into\n              memory or if the regex should be applied to the file line-by-line.\n            - Setting this to C(true) can have performance and memory implications for large files.\n            - This uses C(re.search()) instead of C(re.match()).\n        type: bool\n        default: false\n        version_added: \"2.11\"\n    paths:\n        description:\n            - List of paths of directories to search. All paths must be fully qualified.\n        type: list\n        required: true\n        aliases: [ name, path ]\n        elements: str\n    file_type:\n        description:\n            - Type of file to select.\n            - The 'link' and 'any' choices were added in Ansible 2.3.\n        type: str\n        choices: [ any, directory, file, link ]\n        default: file\n    recurse:\n        description:\n            - If target is a directory, recursively descend into the directory looking for files.\n        type: bool\n        default: no\n    size:\n        description:\n            - Select files whose size is equal to or greater than the specified size.\n            - Use a negative size to find files equal to or less than the specified size.\n            - Unqualified values are in bytes but b, k, m, g, and t can be appended to specify\n              bytes, kilobytes, megabytes, gigabytes, and terabytes, respectively.\n            - Size is not evaluated for directories.\n        type: str\n    age_stamp:\n        description:\n            - Choose the file property against which we compare age.\n        type: str\n        choices: [ atime, ctime, mtime ]\n        default: mtime\n    hidden:\n        description:\n            - Set this to C(yes) to include hidden files, otherwise they will be ignored.\n        type: bool\n        default: no\n    follow:\n        description:\n            - Set this to C(yes) to follow symlinks in path for systems with python 2.6+.\n        type: bool\n        default: no\n    get_checksum:\n        description:\n            - Set this to C(yes) to retrieve a file's SHA1 checksum.\n        type: bool\n        default: no\n    use_regex:\n        description:\n            - If C(no), the patterns are file globs (shell).\n            - If C(yes), they are python regexes.\n        type: bool\n        default: no\n    depth:\n        description:\n            - Set the maximum number of levels to descend into.\n            - Setting recurse to C(no) will override this value, which is effectively depth 1.\n            - Default is unlimited depth.\n        type: int\n        version_added: \"2.6\"\nextends_documentation_fragment: action_common_attributes\nattributes:\n    check_mode:\n        details: since this action does not modify the target it just executes normally during check mode\n        support: full\n    diff_mode:\n        support: none\n    platform:\n        platforms: posix\nseealso:\n- module: ansible.windows.win_find\n","return":"\nfiles:\n    description: All matches found with the specified criteria (see stat module for full output of each dictionary)\n    returned: success\n    type: list\n    sample: [\n        { path: \"/var/tmp/test1\",\n          mode: \"0644\",\n          \"...\": \"...\",\n          checksum: 16fac7be61a6e4591a33ef4b729c5c3302307523\n        },\n        { path: \"/var/tmp/test2\",\n          \"...\": \"...\"\n        },\n        ]\nmatched:\n    description: Number of matches\n    returned: success\n    type: int\n    sample: 14\nexamined:\n    description: Number of filesystem objects looked at\n    returned: success\n    type: int\n    sample: 34\nskipped_paths:\n    description: skipped paths and reasons they were skipped\n    returned: success\n    type: dict\n    sample: {\"/laskdfj\": \"'/laskdfj' is not a directory\"}\n    version_added: '2.12'\n"},{"normalizedName":"GetUrl","module":"get_url","short_description":"Downloads files from HTTP, HTTPS, or FTP to node","description":["Downloads files from HTTP, HTTPS, or FTP to the remote server. The remote server I(must) have direct access to the remote resource.","By default, if an environment variable C(\u003cprotocol\u003e_proxy) is set on the target host, requests will be sent through that proxy. This behaviour can be overridden by setting a variable for this task (see R(setting the environment,playbooks_environment)), or by using the use_proxy option.","HTTP redirects can redirect from HTTP to HTTPS so you should be sure that your proxy environment for both protocols is correct.","From Ansible 2.4 when run with C(--check), it will do a HEAD request to validate the URL but will not download the entire file or verify it against hashes and will report incorrect changed status.","For Windows targets, use the M(ansible.windows.win_get_url) module instead."],"options":{"backup":{"normalizedName":"Backup","structTag":"`yaml:\"backup,omitempty\" json:\"backup,omitempty\"`","goType":"bool","goElements":"","description":["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"checksum":{"normalizedName":"Checksum","structTag":"`yaml:\"checksum,omitempty\" json:\"checksum,omitempty\"`","goType":"string","goElements":"","description":["If a checksum is passed to this parameter, the digest of the destination file will be calculated after it is downloaded to ensure its integrity and verify that the transfer completed successfully. Format: \u003calgorithm\u003e:\u003cchecksum|url\u003e, e.g. checksum=\"sha256:D98291AC[...]B6DC7B97\", checksum=\"sha256:http://example.com/path/sha256sum.txt\"","If you worry about portability, only the sha1 algorithm is available on all platforms and python versions.","The third party hashlib library can be installed for access to additional algorithms.","Additionally, if a checksum is passed to this parameter, and the file exist under the C(dest) location, the I(destination_checksum) would be calculated, and if checksum equals I(destination_checksum), the file download would be skipped (unless C(force) is true). If the checksum does not equal I(destination_checksum), the destination file is deleted."],"type":"str","required":false,"default":"","elements":"","aliases":null},"client_cert":{"normalizedName":"ClientCert","structTag":"`yaml:\"client_cert,omitempty\" json:\"client_cert,omitempty\"`","goType":"string","goElements":"","description":["PEM formatted certificate chain file to be used for SSL client authentication.","This file can also include the key as well, and if the key is included, C(client_key) is not required."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"client_key":{"normalizedName":"ClientKey","structTag":"`yaml:\"client_key,omitempty\" json:\"client_key,omitempty\"`","goType":"string","goElements":"","description":["PEM formatted file that contains your private key to be used for SSL client authentication.","If C(client_cert) contains both the certificate and key, this option is not required."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"dest":{"normalizedName":"Dest","structTag":"`yaml:\"dest,omitempty\" json:\"dest,omitempty\"`","goType":"string","goElements":"","description":["Absolute path of where to download the file to.","If C(dest) is a directory, either the server provided filename or, if none provided, the base name of the URL on the remote server will be used. If a directory, C(force) has no effect.","If C(dest) is a directory, the file will always be downloaded (regardless of the C(force) and C(checksum) option), but replaced only if the contents changed."],"type":"path","required":true,"default":null,"elements":"","aliases":null},"force":{"normalizedName":"Force","structTag":"`yaml:\"force,omitempty\" json:\"force,omitempty\"`","goType":"bool","goElements":"","description":["If C(yes) and C(dest) is not a directory, will download the file every time and replace the file if the contents change. If C(no), the file will only be downloaded if the destination does not exist. Generally should be C(yes) only for small local files.","Prior to 0.6, this module behaved as if C(yes) was the default."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"force_basic_auth":{"normalizedName":"ForceBasicAuth","structTag":"`yaml:\"force_basic_auth,omitempty\" json:\"force_basic_auth,omitempty\"`","goType":"bool","goElements":"","description":["Force the sending of the Basic authentication header upon initial request.","httplib2, the library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"headers":{"normalizedName":"Headers","structTag":"`yaml:\"headers,omitempty\" json:\"headers,omitempty\"`","goType":"map[string]string","goElements":"","description":["Add custom HTTP headers to a request in hash/dict format.","The hash/dict format was added in Ansible 2.6.","Previous versions used a C(\"key:value,key:value\") string format.","The C(\"key:value,key:value\") string format is deprecated and has been removed in version 2.10."],"type":"dict","required":false,"default":null,"elements":"","aliases":null},"http_agent":{"normalizedName":"HttpAgent","structTag":"`yaml:\"http_agent,omitempty\" json:\"http_agent,omitempty\"`","goType":"string","goElements":"","description":["Header to identify as, generally appears in web server logs."],"type":"str","required":false,"default":"ansible-httpget","elements":"","aliases":null},"sha256sum":{"normalizedName":"Sha256sum","structTag":"`yaml:\"sha256sum,omitempty\" json:\"sha256sum,omitempty\"`","goType":"string","goElements":"","description":["If a SHA-256 checksum is passed to this parameter, the digest of the destination file will be calculated after it is downloaded to ensure its integrity and verify that the transfer completed successfully. This option is deprecated and will be removed in version 2.14. Use option C(checksum) instead."],"type":"str","required":false,"default":"","elements":"","aliases":null},"timeout":{"normalizedName":"Timeout","structTag":"`yaml:\"timeout,omitempty\" json:\"timeout,omitempty\"`","goType":"int","goElements":"","description":["Timeout in seconds for URL request."],"type":"int","required":false,"default":10,"elements":"","aliases":null},"tmp_dest":{"normalizedName":"TmpDest","structTag":"`yaml:\"tmp_dest,omitempty\" json:\"tmp_dest,omitempty\"`","goType":"string","goElements":"","description":["Absolute path of where temporary file is downloaded to.","When run on Ansible 2.5 or greater, path defaults to ansible's remote_tmp setting","When run on Ansible prior to 2.5, it defaults to C(TMPDIR), C(TEMP) or C(TMP) env variables or a platform specific value.","U(https://docs.python.org/3/library/tempfile.html#tempfile.tempdir)"],"type":"path","required":false,"default":null,"elements":"","aliases":null},"unredirected_headers":{"normalizedName":"UnredirectedHeaders","structTag":"`yaml:\"unredirected_headers,omitempty\" json:\"unredirected_headers,omitempty\"`","goType":"[]string","goElements":"","description":["A list of header names that will not be sent on subsequent redirected requests. This list is case insensitive. By default all headers will be redirected. In some cases it may be beneficial to list headers such as C(Authorization) here to avoid potential credential exposure."],"type":"list","required":false,"default":[],"elements":"str","aliases":null},"url":{"normalizedName":"Url","structTag":"`yaml:\"url,omitempty\" json:\"url,omitempty\"`","goType":"string","goElements":"","description":["HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path"],"type":"str","required":true,"default":null,"elements":"","aliases":null},"url_password":{"normalizedName":"UrlPassword","structTag":"`yaml:\"url_password,omitempty\" json:\"url_password,omitempty\"`","goType":"string","goElements":"","description":["The password for use in HTTP basic authentication.","If the C(url_username) parameter is not specified, the C(url_password) parameter will not be used.","Since version 2.8 you can also use the 'password' alias for this option."],"type":"str","required":false,"default":null,"elements":"","aliases":["password"]},"url_username":{"normalizedName":"UrlUsername","structTag":"`yaml:\"url_username,omitempty\" json:\"url_username,omitempty\"`","goType":"string","goElements":"","description":["The username for use in HTTP basic authentication.","This parameter can be used without C(url_password) for sites that allow empty passwords.","Since version 2.8 you can also use the C(username) alias for this option."],"type":"str","required":false,"default":null,"elements":"","aliases":["username"]},"use_gssapi":{"normalizedName":"UseGssapi","structTag":"`yaml:\"use_gssapi,omitempty\" json:\"use_gssapi,omitempty\"`","goType":"bool","goElements":"","description":["Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.","Requires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.","Credentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.","NTLM authentication is I(not) supported even if the GSSAPI mech for NTLM has been installed."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"use_proxy":{"normalizedName":"UseProxy","structTag":"`yaml:\"use_proxy,omitempty\" json:\"use_proxy,omitempty\"`","goType":"bool","goElements":"","description":["if C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null},"validate_certs":{"normalizedName":"ValidateCerts","structTag":"`yaml:\"validate_certs,omitempty\" json:\"validate_certs,omitempty\"`","goType":"bool","goElements":"","description":["If C(no), SSL certificates will not be validated.","This should only be used on personally controlled sites using self-signed certificates."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null}},"returns":{"backup_file":{"normalizedName":"BackupFile","description":"name of backup file created after download","returned":"changed and if backup=yes","type":"str","sample":"/path/to/file.txt.2015-02-12@22:09~","goType":"string","structTag":"`yaml:\"backup_file,omitempty\" json:\"backup_file,omitempty\"`"},"checksum_dest":{"normalizedName":"ChecksumDest","description":"sha1 checksum of the file after copy","returned":"success","type":"str","sample":"6e642bb8dd5c2e027bf21dd923337cbb4214f827","goType":"string","structTag":"`yaml:\"checksum_dest,omitempty\" json:\"checksum_dest,omitempty\"`"},"checksum_src":{"normalizedName":"ChecksumSrc","description":"sha1 checksum of the file","returned":"success","type":"str","sample":"6e642bb8dd5c2e027bf21dd923337cbb4214f827","goType":"string","structTag":"`yaml:\"checksum_src,omitempty\" json:\"checksum_src,omitempty\"`"},"dest":{"normalizedName":"Dest","description":"destination file/path","returned":"success","type":"str","sample":"/path/to/file.txt","goType":"string","structTag":"`yaml:\"dest,omitempty\" json:\"dest,omitempty\"`"},"elapsed":{"normalizedName":"Elapsed","description":"The number of seconds that elapsed while performing the download","returned":"always","type":"int","sample":23,"goType":"int","structTag":"`yaml:\"elapsed,omitempty\" json:\"elapsed,omitempty\"`"},"gid":{"normalizedName":"Gid","description":"group id of the file","returned":"success","type":"int","sample":100,"goType":"int","structTag":"`yaml:\"gid,omitempty\" json:\"gid,omitempty\"`"},"group":{"normalizedName":"Group","description":"group of the file","returned":"success","type":"str","sample":"httpd","goType":"string","structTag":"`yaml:\"group,omitempty\" json:\"group,omitempty\"`"},"md5sum":{"normalizedName":"Md5sum","description":"md5 checksum of the file after download","returned":"when supported","type":"str","sample":"2a5aeecc61dc98c4d780b14b330e3282","goType":"string","structTag":"`yaml:\"md5sum,omitempty\" json:\"md5sum,omitempty\"`"},"mode":{"normalizedName":"Mode","description":"permissions of the target","returned":"success","type":"str","sample":"0644","goType":"string","structTag":"`yaml:\"mode,omitempty\" json:\"mode,omitempty\"`"},"msg":{"normalizedName":"Msg","description":"the HTTP message from the request","returned":"always","type":"str","sample":"OK (unknown bytes)","goType":"string","structTag":"`yaml:\"msg,omitempty\" json:\"msg,omitempty\"`"},"owner":{"normalizedName":"Owner","description":"owner of the file","returned":"success","type":"str","sample":"httpd","goType":"string","structTag":"`yaml:\"owner,omitempty\" json:\"owner,omitempty\"`"},"secontext":{"normalizedName":"Secontext","description":"the SELinux security context of the file","returned":"success","type":"str","sample":"unconfined_u:object_r:user_tmp_t:s0","goType":"string","structTag":"`yaml:\"secontext,omitempty\" json:\"secontext,omitempty\"`"},"size":{"normalizedName":"Size","description":"size of the target","returned":"success","type":"int","sample":1220,"goType":"int","structTag":"`yaml:\"size,omitempty\" json:\"size,omitempty\"`"},"src":{"normalizedName":"Src","description":"source file used after download","returned":"always","type":"str","sample":"/tmp/tmpAdFLdV","goType":"string","structTag":"`yaml:\"src,omitempty\" json:\"src,omitempty\"`"},"state":{"normalizedName":"State","description":"state of the target","returned":"success","type":"str","sample":"file","goType":"string","structTag":"`yaml:\"state,omitempty\" json:\"state,omitempty\"`"},"status_code":{"normalizedName":"StatusCode","description":"the HTTP status code from the request","returned":"always","type":"int","sample":200,"goType":"int","structTag":"`yaml:\"status_code,omitempty\" json:\"status_code,omitempty\"`"},"uid":{"normalizedName":"Uid","description":"owner id of the file, after execution","returned":"success","type":"int","sample":100,"goType":"int","structTag":"`yaml:\"uid,omitempty\" json:\"uid,omitempty\"`"},"url":{"normalizedName":"Url","description":"the actual URL used for the request","returned":"always","type":"str","sample":"https://www.ansible.com/","goType":"string","structTag":"`yaml:\"url,omitempty\" json:\"url,omitempty\"`"}},"doc":"\n---\nmodule: get_url\nshort_description: Downloads files from HTTP, HTTPS, or FTP to node\ndescription:\n     - Downloads files from HTTP, HTTPS, or FTP to the remote server. The remote\n       server I(must) have direct access to the remote resource.\n     - By default, if an environment variable C(\u003cprotocol\u003e_proxy) is set on\n       the target host, requests will be sent through that proxy. This\n       behaviour can be overridden by setting a variable for this task\n       (see R(setting the environment,playbooks_environment)),\n       or by using the use_proxy option.\n     - HTTP redirects can redirect from HTTP to HTTPS so you should be sure that\n       your proxy environment for both protocols is correct.\n     - From Ansible 2.4 when run with C(--check), it will do a HEAD request to validate the URL but\n       will not download the entire file or verify it against hashes and will report incorrect changed status.\n     - For Windows targets, use the M(ansible.windows.win_get_url) module instead.\nversion_added: '0.6'\noptions:\n  url:\n    description:\n      - HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path\n    type: str\n    required: true\n  dest:\n    description:\n      - Absolute path of where to download the file to.\n      - If C(dest) is a directory, either the server provided filename or, if\n        none provided, the base name of the URL on the remote server will be\n        used. If a directory, C(force) has no effect.\n      - If C(dest) is a directory, the file will always be downloaded\n        (regardless of the C(force) and C(checksum) option), but\n        replaced only if the contents changed.\n    type: path\n    required: true\n  tmp_dest:\n    description:\n      - Absolute path of where temporary file is downloaded to.\n      - When run on Ansible 2.5 or greater, path defaults to ansible's remote_tmp setting\n      - When run on Ansible prior to 2.5, it defaults to C(TMPDIR), C(TEMP) or C(TMP) env variables or a platform specific value.\n      - U(https://docs.python.org/3/library/tempfile.html#tempfile.tempdir)\n    type: path\n    version_added: '2.1'\n  force:\n    description:\n      - If C(yes) and C(dest) is not a directory, will download the file every\n        time and replace the file if the contents change. If C(no), the file\n        will only be downloaded if the destination does not exist. Generally\n        should be C(yes) only for small local files.\n      - Prior to 0.6, this module behaved as if C(yes) was the default.\n    type: bool\n    default: no\n    version_added: '0.7'\n  backup:\n    description:\n      - Create a backup file including the timestamp information so you can get\n        the original file back if you somehow clobbered it incorrectly.\n    type: bool\n    default: no\n    version_added: '2.1'\n  sha256sum:\n    description:\n      - If a SHA-256 checksum is passed to this parameter, the digest of the\n        destination file will be calculated after it is downloaded to ensure\n        its integrity and verify that the transfer completed successfully.\n        This option is deprecated and will be removed in version 2.14. Use\n        option C(checksum) instead.\n    default: ''\n    type: str\n    version_added: \"1.3\"\n  checksum:\n    description:\n      - 'If a checksum is passed to this parameter, the digest of the\n        destination file will be calculated after it is downloaded to ensure\n        its integrity and verify that the transfer completed successfully.\n        Format: \u003calgorithm\u003e:\u003cchecksum|url\u003e, e.g. checksum=\"sha256:D98291AC[...]B6DC7B97\",\n        checksum=\"sha256:http://example.com/path/sha256sum.txt\"'\n      - If you worry about portability, only the sha1 algorithm is available\n        on all platforms and python versions.\n      - The third party hashlib library can be installed for access to additional algorithms.\n      - Additionally, if a checksum is passed to this parameter, and the file exist under\n        the C(dest) location, the I(destination_checksum) would be calculated, and if\n        checksum equals I(destination_checksum), the file download would be skipped\n        (unless C(force) is true). If the checksum does not equal I(destination_checksum),\n        the destination file is deleted.\n    type: str\n    default: ''\n    version_added: \"2.0\"\n  use_proxy:\n    description:\n      - if C(no), it will not use a proxy, even if one is defined in\n        an environment variable on the target hosts.\n    type: bool\n    default: yes\n  validate_certs:\n    description:\n      - If C(no), SSL certificates will not be validated.\n      - This should only be used on personally controlled sites using self-signed certificates.\n    type: bool\n    default: yes\n  timeout:\n    description:\n      - Timeout in seconds for URL request.\n    type: int\n    default: 10\n    version_added: '1.8'\n  headers:\n    description:\n        - Add custom HTTP headers to a request in hash/dict format.\n        - The hash/dict format was added in Ansible 2.6.\n        - Previous versions used a C(\"key:value,key:value\") string format.\n        - The C(\"key:value,key:value\") string format is deprecated and has been removed in version 2.10.\n    type: dict\n    version_added: '2.0'\n  url_username:\n    description:\n      - The username for use in HTTP basic authentication.\n      - This parameter can be used without C(url_password) for sites that allow empty passwords.\n      - Since version 2.8 you can also use the C(username) alias for this option.\n    type: str\n    aliases: ['username']\n    version_added: '1.6'\n  url_password:\n    description:\n        - The password for use in HTTP basic authentication.\n        - If the C(url_username) parameter is not specified, the C(url_password) parameter will not be used.\n        - Since version 2.8 you can also use the 'password' alias for this option.\n    type: str\n    aliases: ['password']\n    version_added: '1.6'\n  force_basic_auth:\n    description:\n      - Force the sending of the Basic authentication header upon initial request.\n      - httplib2, the library used by the uri module only sends authentication information when a webservice\n        responds to an initial request with a 401 status. Since some basic auth services do not properly\n        send a 401, logins will fail.\n    type: bool\n    default: no\n    version_added: '2.0'\n  client_cert:\n    description:\n      - PEM formatted certificate chain file to be used for SSL client authentication.\n      - This file can also include the key as well, and if the key is included, C(client_key) is not required.\n    type: path\n    version_added: '2.4'\n  client_key:\n    description:\n      - PEM formatted file that contains your private key to be used for SSL client authentication.\n      - If C(client_cert) contains both the certificate and key, this option is not required.\n    type: path\n    version_added: '2.4'\n  http_agent:\n    description:\n      - Header to identify as, generally appears in web server logs.\n    type: str\n    default: ansible-httpget\n  unredirected_headers:\n    description:\n      - A list of header names that will not be sent on subsequent redirected requests. This list is case\n        insensitive. By default all headers will be redirected. In some cases it may be beneficial to list\n        headers such as C(Authorization) here to avoid potential credential exposure.\n    default: []\n    type: list\n    elements: str\n    version_added: '2.12'\n  use_gssapi:\n    description:\n      - Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate\n        authentication.\n      - Requires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.\n      - Credentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var\n        C(KRB5CCNAME) that specified a custom Kerberos credential cache.\n      - NTLM authentication is I(not) supported even if the GSSAPI mech for NTLM has been installed.\n    type: bool\n    default: no\n    version_added: '2.11'\n# informational: requirements for nodes\nextends_documentation_fragment:\n    - files\n    - action_common_attributes\nattributes:\n    check_mode:\n        details: the changed status will reflect comparison to an empty source file\n        support: partial\n    diff_mode:\n        support: none\n    platform:\n        platforms: posix\nnotes:\n     - For Windows targets, use the M(ansible.windows.win_get_url) module instead.\nseealso:\n- module: ansible.builtin.uri\n- module: ansible.windows.win_get_url\nauthor:\n- Jan-Piet Mens (@jpmens)\n","return":"\nbackup_file:\n    description: name of backup file created after download\n    returned: changed and if backup=yes\n    type: str\n    sample: /path/to/file.txt.2015-02-12@22:09~\nchecksum_dest:\n    description: sha1 checksum of the file after copy\n    returned: success\n    type: str\n    sample: 6e642bb8dd5c2e027bf21dd923337cbb4214f827\nchecksum_src:\n    description: sha1 checksum of the file\n    returned: success\n    type: str\n    sample: 6e642bb8dd5c2e027bf21dd923337cbb4214f827\ndest:\n    description: destination file/path\n    returned: success\n    type: str\n    sample: /path/to/file.txt\nelapsed:\n    description: The number of seconds that elapsed while performing the download\n    returned: always\n    type: int\n    sample: 23\ngid:\n    description: group id of the file\n    returned: success\n    type: int\n    sample: 100\ngroup:\n    description: group of the file\n    returned: success\n    type: str\n    sample: \"httpd\"\nmd5sum:\n    description: md5 checksum of the file after download\n    returned: when supported\n    type: str\n    sample: \"2a5aeecc61dc98c4d780b14b330e3282\"\nmode:\n    description: permissions of the target\n    returned: success\n    type: str\n    sample: \"0644\"\nmsg:\n    description: the HTTP message from the request\n    returned: always\n    type: str\n    sample: OK (unknown bytes)\nowner:\n    description: owner of the file\n    returned: success\n    type: str\n    sample: httpd\nsecontext:\n    description: the SELinux security context of the file\n    returned: success\n    type: str\n    sample: unconfined_u:object_r:user_tmp_t:s0\nsize:\n    description: size of the target\n    returned: success\n    type: int\n    sample: 1220\nsrc:\n    description: source file used after download\n    returned: always\n    type: str\n    sample: /tmp/tmpAdFLdV\nstate:\n    description: state of the target\n    returned: success\n    type: str\n    sample: file\nstatus_code:\n    description: the HTTP status code from the request\n    returned: always\n    type: int\n    sample: 200\nuid:\n    description: owner id of the file, after execution\n    returned: success\n    type: int\n    sample: 100\nurl:\n    description: the actual URL used for the request\n    returned: always\n    type: str\n    sample: https://www.ansible.com/\n"},{"normalizedName":"Getent","module":"getent","short_description":"A wrapper to the unix getent utility","description":["Runs getent against one of it's various databases and returns information into the host's facts, in a getent_\u003cdatabase\u003e prefixed variable."],"options":{"database":{"normalizedName":"Database","structTag":"`yaml:\"database,omitempty\" json:\"database,omitempty\"`","goType":"string","goElements":"","description":["The name of a getent database supported by the target system (passwd, group, hosts, etc)."],"type":"str","required":true,"default":null,"elements":"","aliases":null},"fail_key":{"normalizedName":"FailKey","structTag":"`yaml:\"fail_key,omitempty\" json:\"fail_key,omitempty\"`","goType":"bool","goElements":"","description":["If a supplied key is missing this will make the task fail if C(yes)."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null},"key":{"normalizedName":"Key","structTag":"`yaml:\"key,omitempty\" json:\"key,omitempty\"`","goType":"string","goElements":"","description":["Key from which to return values from the specified database, otherwise the full contents are returned."],"type":"str","required":false,"default":"","elements":"","aliases":null},"service":{"normalizedName":"Service","structTag":"`yaml:\"service,omitempty\" json:\"service,omitempty\"`","goType":"string","goElements":"","description":["Override all databases with the specified service","The underlying system must support the service flag which is not always available."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"split":{"normalizedName":"Split","structTag":"`yaml:\"split,omitempty\" json:\"split,omitempty\"`","goType":"string","goElements":"","description":["Character used to split the database values into lists/arrays such as ':' or '\t', otherwise  it will try to pick one depending on the database."],"type":"str","required":false,"default":null,"elements":"","aliases":null}},"returns":{"ansible_facts":{"normalizedName":"AnsibleFacts","description":"Facts to add to ansible_facts.","returned":"always","type":"dict","sample":null,"goType":"map[string]string","structTag":"`yaml:\"ansible_facts,omitempty\" json:\"ansible_facts,omitempty\"`"}},"doc":"\n---\nmodule: getent\nshort_description: A wrapper to the unix getent utility\ndescription:\n     - Runs getent against one of it's various databases and returns information into\n       the host's facts, in a getent_\u003cdatabase\u003e prefixed variable.\nversion_added: \"1.8\"\noptions:\n    database:\n        description:\n            - The name of a getent database supported by the target system (passwd, group,\n              hosts, etc).\n        type: str\n        required: True\n    key:\n        description:\n            - Key from which to return values from the specified database, otherwise the\n              full contents are returned.\n        type: str\n        default: ''\n    service:\n        description:\n            - Override all databases with the specified service\n            - The underlying system must support the service flag which is not always available.\n        type: str\n        version_added: \"2.9\"\n    split:\n        description:\n            - \"Character used to split the database values into lists/arrays such as ':' or '\t', otherwise  it will try to pick one depending on the database.\"\n        type: str\n    fail_key:\n        description:\n            - If a supplied key is missing this will make the task fail if C(yes).\n        type: bool\n        default: 'yes'\nextends_documentation_fragment:\n  - action_common_attributes\n  - action_common_attributes.facts\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    facts:\n        support: full\n    platform:\n        platforms: posix\nnotes:\n   - Not all databases support enumeration, check system documentation for details.\nauthor:\n- Brian Coca (@bcoca)\n","return":"\nansible_facts:\n  description: Facts to add to ansible_facts.\n  returned: always\n  type: dict\n  contains:\n    getent_\u003cdatabase\u003e:\n      description:\n        - A list of results or a single result as a list of the fields the db provides\n        - The list elements depend on the database queried, see getent man page for the structure\n        - Starting at 2.11 it now returns multiple duplicate entries, previouslly it only returned the last one\n      returned: always\n      type: list\n"},{"normalizedName":"Git","module":"git","short_description":"Deploy software (or files) from git checkouts","description":["Manage I(git) checkouts of repositories to deploy files or software."],"options":{"accept_hostkey":{"normalizedName":"AcceptHostkey","structTag":"`yaml:\"accept_hostkey,omitempty\" json:\"accept_hostkey,omitempty\"`","goType":"bool","goElements":"","description":["Will ensure or not that \"-o StrictHostKeyChecking=no\" is present as an ssh option.","Be aware that this disables a protection against MITM attacks.","Those using OpenSSH \u003e= 7.5 might want to set I(ssh_opt) to 'StrictHostKeyChecking=accept-new' instead, it does not remove the MITM issue but it does restrict it to the first attempt."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"accept_newhostkey":{"normalizedName":"AcceptNewhostkey","structTag":"`yaml:\"accept_newhostkey,omitempty\" json:\"accept_newhostkey,omitempty\"`","goType":"bool","goElements":"","description":["As of OpenSSH 7.5, \"-o StrictHostKeyChecking=accept-new\" can be used which is safer and will only accepts host keys which are not present or are the same. if C(yes), ensure that \"-o StrictHostKeyChecking=accept-new\" is present as an ssh option."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"archive":{"normalizedName":"Archive","structTag":"`yaml:\"archive,omitempty\" json:\"archive,omitempty\"`","goType":"string","goElements":"","description":["Specify archive file path with extension. If specified, creates an archive file of the specified format containing the tree structure for the source tree. Allowed archive formats [\"zip\", \"tar.gz\", \"tar\", \"tgz\"].","This will clone and perform git archive from local directory as not all git servers support git archive."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"archive_prefix":{"normalizedName":"ArchivePrefix","structTag":"`yaml:\"archive_prefix,omitempty\" json:\"archive_prefix,omitempty\"`","goType":"string","goElements":"","description":["Specify a prefix to add to each file path in archive. Requires I(archive) to be specified."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"bare":{"normalizedName":"Bare","structTag":"`yaml:\"bare,omitempty\" json:\"bare,omitempty\"`","goType":"bool","goElements":"","description":["If C(yes), repository will be created as a bare repo, otherwise it will be a standard repo with a workspace."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"clone":{"normalizedName":"Clone","structTag":"`yaml:\"clone,omitempty\" json:\"clone,omitempty\"`","goType":"bool","goElements":"","description":["If C(no), do not clone the repository even if it does not exist locally."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null},"depth":{"normalizedName":"Depth","structTag":"`yaml:\"depth,omitempty\" json:\"depth,omitempty\"`","goType":"int","goElements":"","description":["Create a shallow clone with a history truncated to the specified number or revisions. The minimum possible value is C(1), otherwise ignored. Needs I(git\u003e=1.9.1) to work correctly."],"type":"int","required":false,"default":null,"elements":"","aliases":null},"dest":{"normalizedName":"Dest","structTag":"`yaml:\"dest,omitempty\" json:\"dest,omitempty\"`","goType":"string","goElements":"","description":["The path of where the repository should be checked out. This is equivalent to C(git clone [repo_url] [directory]). The repository named in I(repo) is not appended to this path and the destination directory must be empty. This parameter is required, unless I(clone) is set to C(no)."],"type":"path","required":true,"default":null,"elements":"","aliases":null},"executable":{"normalizedName":"Executable","structTag":"`yaml:\"executable,omitempty\" json:\"executable,omitempty\"`","goType":"string","goElements":"","description":["Path to git executable to use. If not supplied, the normal mechanism for resolving binary paths will be used."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"force":{"normalizedName":"Force","structTag":"`yaml:\"force,omitempty\" json:\"force,omitempty\"`","goType":"bool","goElements":"","description":["If C(yes), any modified files in the working repository will be discarded.  Prior to 0.7, this was always C(yes) and could not be disabled.  Prior to 1.9, the default was C(yes)."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"gpg_whitelist":{"normalizedName":"GpgWhitelist","structTag":"`yaml:\"gpg_whitelist,omitempty\" json:\"gpg_whitelist,omitempty\"`","goType":"[]string","goElements":"","description":["A list of trusted GPG fingerprints to compare to the fingerprint of the GPG-signed commit.","Only used when I(verify_commit=yes).","Use of this feature requires Git 2.6+ due to its reliance on git's C(--raw) flag to C(verify-commit) and C(verify-tag)."],"type":"list","required":false,"default":[],"elements":"str","aliases":null},"key_file":{"normalizedName":"KeyFile","structTag":"`yaml:\"key_file,omitempty\" json:\"key_file,omitempty\"`","goType":"string","goElements":"","description":["Specify an optional private key file path, on the target host, to use for the checkout.","This ensures 'IdentitiesOnly=yes' is present in ssh_opts."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"recursive":{"normalizedName":"Recursive","structTag":"`yaml:\"recursive,omitempty\" json:\"recursive,omitempty\"`","goType":"bool","goElements":"","description":["If C(no), repository will be cloned without the --recursive option, skipping sub-modules."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null},"reference":{"normalizedName":"Reference","structTag":"`yaml:\"reference,omitempty\" json:\"reference,omitempty\"`","goType":"string","goElements":"","description":["Reference repository (see \"git clone --reference ...\")."],"type":"","required":false,"default":null,"elements":"","aliases":null},"refspec":{"normalizedName":"Refspec","structTag":"`yaml:\"refspec,omitempty\" json:\"refspec,omitempty\"`","goType":"string","goElements":"","description":["Add an additional refspec to be fetched. If version is set to a I(SHA-1) not reachable from any branch or tag, this option may be necessary to specify the ref containing the I(SHA-1). Uses the same syntax as the C(git fetch) command. An example value could be \"refs/meta/config\"."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"remote":{"normalizedName":"Remote","structTag":"`yaml:\"remote,omitempty\" json:\"remote,omitempty\"`","goType":"string","goElements":"","description":["Name of the remote."],"type":"str","required":false,"default":"origin","elements":"","aliases":null},"repo":{"normalizedName":"Repo","structTag":"`yaml:\"repo,omitempty\" json:\"repo,omitempty\"`","goType":"string","goElements":"","description":["git, SSH, or HTTP(S) protocol address of the git repository."],"type":"str","required":true,"default":null,"elements":"","aliases":["name"]},"separate_git_dir":{"normalizedName":"SeparateGitDir","structTag":"`yaml:\"separate_git_dir,omitempty\" json:\"separate_git_dir,omitempty\"`","goType":"string","goElements":"","description":["The path to place the cloned repository. If specified, Git repository can be separated from working tree."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"single_branch":{"normalizedName":"SingleBranch","structTag":"`yaml:\"single_branch,omitempty\" json:\"single_branch,omitempty\"`","goType":"bool","goElements":"","description":["Clone only the history leading to the tip of the specified revision."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"ssh_opts":{"normalizedName":"SshOpts","structTag":"`yaml:\"ssh_opts,omitempty\" json:\"ssh_opts,omitempty\"`","goType":"string","goElements":"","description":["Options git will pass to ssh when used as protocol, it works via C(git)'s GIT_SSH/GIT_SSH_COMMAND environment variables.","For older versions it appends GIT_SSH_OPTS (specific to this module) to the variables above or via a wrapper script.","Other options can add to this list, like I(key_file) and I(accept_hostkey).","An example value could be \"-o StrictHostKeyChecking=no\" (although this particular option is better set by I(accept_hostkey)).","The module ensures that 'BatchMode=yes' is always present to avoid prompts."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"track_submodules":{"normalizedName":"TrackSubmodules","structTag":"`yaml:\"track_submodules,omitempty\" json:\"track_submodules,omitempty\"`","goType":"bool","goElements":"","description":["If C(yes), submodules will track the latest commit on their master branch (or other branch specified in .gitmodules).  If C(no), submodules will be kept at the revision specified by the main project. This is equivalent to specifying the --remote flag to git submodule update."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"umask":{"normalizedName":"Umask","structTag":"`yaml:\"umask,omitempty\" json:\"umask,omitempty\"`","goType":"string","goElements":"","description":["The umask to set before doing any checkouts, or any other repository maintenance."],"type":"raw","required":false,"default":null,"elements":"","aliases":null},"update":{"normalizedName":"Update","structTag":"`yaml:\"update,omitempty\" json:\"update,omitempty\"`","goType":"bool","goElements":"","description":["If C(no), do not retrieve new revisions from the origin repository.","Operations like archive will work on the existing (old) repository and might not respond to changes to the options version or remote."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null},"verify_commit":{"normalizedName":"VerifyCommit","structTag":"`yaml:\"verify_commit,omitempty\" json:\"verify_commit,omitempty\"`","goType":"bool","goElements":"","description":["If C(yes), when cloning or checking out a I(version) verify the signature of a GPG signed commit. This requires git version\u003e=2.1.0 to be installed. The commit MUST be signed and the public key MUST be present in the GPG keyring."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"version":{"normalizedName":"Version","structTag":"`yaml:\"version,omitempty\" json:\"version,omitempty\"`","goType":"string","goElements":"","description":["What version of the repository to check out. This can be the literal string C(HEAD), a branch name, a tag name. It can also be a I(SHA-1) hash, in which case I(refspec) needs to be specified if the given revision is not already available."],"type":"str","required":false,"default":"HEAD","elements":"","aliases":null}},"returns":{"after":{"normalizedName":"After","description":"Last commit revision of the repository retrieved during the update.","returned":"success","type":"str","sample":"4c020102a9cd6fe908c9a4a326a38f972f63a903","goType":"string","structTag":"`yaml:\"after,omitempty\" json:\"after,omitempty\"`"},"before":{"normalizedName":"Before","description":"Commit revision before the repository was updated, \"null\" for new repository.","returned":"success","type":"str","sample":"67c04ebe40a003bda0efb34eacfb93b0cafdf628","goType":"string","structTag":"`yaml:\"before,omitempty\" json:\"before,omitempty\"`"},"git_dir_before":{"normalizedName":"GitDirBefore","description":"Contains the original path of .git directory if it is changed.","returned":"success","type":"str","sample":"/path/to/old/git/dir","goType":"string","structTag":"`yaml:\"git_dir_before,omitempty\" json:\"git_dir_before,omitempty\"`"},"git_dir_now":{"normalizedName":"GitDirNow","description":"Contains the new path of .git directory if it is changed.","returned":"success","type":"str","sample":"/path/to/new/git/dir","goType":"string","structTag":"`yaml:\"git_dir_now,omitempty\" json:\"git_dir_now,omitempty\"`"},"remote_url_changed":{"normalizedName":"RemoteUrlChanged","description":"Contains True or False whether or not the remote URL was changed.","returned":"success","type":"bool","sample":true,"goType":"bool","structTag":"`yaml:\"remote_url_changed,omitempty\" json:\"remote_url_changed,omitempty\"`"},"warnings":{"normalizedName":"Warnings","description":"List of warnings if requested features were not available due to a too old git version.","returned":"error","type":"str","sample":"git version is too old to fully support the depth argument. Falling back to full checkouts.","goType":"string","structTag":"`yaml:\"warnings,omitempty\" json:\"warnings,omitempty\"`"}},"doc":"\n---\nmodule: git\nauthor:\n    - \"Ansible Core Team\"\n    - \"Michael DeHaan\"\nversion_added: \"0.0.1\"\nshort_description: Deploy software (or files) from git checkouts\ndescription:\n    - Manage I(git) checkouts of repositories to deploy files or software.\nextends_documentation_fragment: action_common_attributes\noptions:\n    repo:\n        description:\n            - git, SSH, or HTTP(S) protocol address of the git repository.\n        type: str\n        required: true\n        aliases: [ name ]\n    dest:\n        description:\n            - The path of where the repository should be checked out. This\n              is equivalent to C(git clone [repo_url] [directory]). The repository\n              named in I(repo) is not appended to this path and the destination directory must be empty. This\n              parameter is required, unless I(clone) is set to C(no).\n        type: path\n        required: true\n    version:\n        description:\n            - What version of the repository to check out. This can be\n              the literal string C(HEAD), a branch name, a tag name.\n              It can also be a I(SHA-1) hash, in which case I(refspec) needs\n              to be specified if the given revision is not already available.\n        type: str\n        default: \"HEAD\"\n    accept_hostkey:\n        description:\n            - Will ensure or not that \"-o StrictHostKeyChecking=no\" is present as an ssh option.\n            - Be aware that this disables a protection against MITM attacks.\n            - Those using OpenSSH \u003e= 7.5 might want to set I(ssh_opt) to 'StrictHostKeyChecking=accept-new'\n              instead, it does not remove the MITM issue but it does restrict it to the first attempt.\n        type: bool\n        default: 'no'\n        version_added: \"1.5\"\n    accept_newhostkey:\n        description:\n            - As of OpenSSH 7.5, \"-o StrictHostKeyChecking=accept-new\" can be\n              used which is safer and will only accepts host keys which are\n              not present or are the same. if C(yes), ensure that\n              \"-o StrictHostKeyChecking=accept-new\" is present as an ssh option.\n        type: bool\n        default: 'no'\n        version_added: \"2.12\"\n    ssh_opts:\n        description:\n            - Options git will pass to ssh when used as protocol, it works via C(git)'s\n              GIT_SSH/GIT_SSH_COMMAND environment variables.\n            - For older versions it appends GIT_SSH_OPTS (specific to this module) to the\n              variables above or via a wrapper script.\n            - Other options can add to this list, like I(key_file) and I(accept_hostkey).\n            - An example value could be \"-o StrictHostKeyChecking=no\" (although this particular\n              option is better set by I(accept_hostkey)).\n            - The module ensures that 'BatchMode=yes' is always present to avoid prompts.\n        type: str\n        version_added: \"1.5\"\n\n    key_file:\n        description:\n            - Specify an optional private key file path, on the target host, to use for the checkout.\n            - This ensures 'IdentitiesOnly=yes' is present in ssh_opts.\n        type: path\n        version_added: \"1.5\"\n    reference:\n        description:\n            - Reference repository (see \"git clone --reference ...\").\n        version_added: \"1.4\"\n    remote:\n        description:\n            - Name of the remote.\n        type: str\n        default: \"origin\"\n    refspec:\n        description:\n            - Add an additional refspec to be fetched.\n              If version is set to a I(SHA-1) not reachable from any branch\n              or tag, this option may be necessary to specify the ref containing\n              the I(SHA-1).\n              Uses the same syntax as the C(git fetch) command.\n              An example value could be \"refs/meta/config\".\n        type: str\n        version_added: \"1.9\"\n    force:\n        description:\n            - If C(yes), any modified files in the working\n              repository will be discarded.  Prior to 0.7, this was always\n              C(yes) and could not be disabled.  Prior to 1.9, the default was\n              C(yes).\n        type: bool\n        default: 'no'\n        version_added: \"0.7\"\n    depth:\n        description:\n            - Create a shallow clone with a history truncated to the specified\n              number or revisions. The minimum possible value is C(1), otherwise\n              ignored. Needs I(git\u003e=1.9.1) to work correctly.\n        type: int\n        version_added: \"1.2\"\n    clone:\n        description:\n            - If C(no), do not clone the repository even if it does not exist locally.\n        type: bool\n        default: 'yes'\n        version_added: \"1.9\"\n    update:\n        description:\n            - If C(no), do not retrieve new revisions from the origin repository.\n            - Operations like archive will work on the existing (old) repository and might\n              not respond to changes to the options version or remote.\n        type: bool\n        default: 'yes'\n        version_added: \"1.2\"\n    executable:\n        description:\n            - Path to git executable to use. If not supplied,\n              the normal mechanism for resolving binary paths will be used.\n        type: path\n        version_added: \"1.4\"\n    bare:\n        description:\n            - If C(yes), repository will be created as a bare repo, otherwise\n              it will be a standard repo with a workspace.\n        type: bool\n        default: 'no'\n        version_added: \"1.4\"\n    umask:\n        description:\n            - The umask to set before doing any checkouts, or any other\n              repository maintenance.\n        type: raw\n        version_added: \"2.2\"\n\n    recursive:\n        description:\n            - If C(no), repository will be cloned without the --recursive\n              option, skipping sub-modules.\n        type: bool\n        default: 'yes'\n        version_added: \"1.6\"\n\n    single_branch:\n        description:\n            - Clone only the history leading to the tip of the specified revision.\n        type: bool\n        default: 'no'\n        version_added: '2.11'\n\n    track_submodules:\n        description:\n            - If C(yes), submodules will track the latest commit on their\n              master branch (or other branch specified in .gitmodules).  If\n              C(no), submodules will be kept at the revision specified by the\n              main project. This is equivalent to specifying the --remote flag\n              to git submodule update.\n        type: bool\n        default: 'no'\n        version_added: \"1.8\"\n\n    verify_commit:\n        description:\n            - If C(yes), when cloning or checking out a I(version) verify the\n              signature of a GPG signed commit. This requires git version\u003e=2.1.0\n              to be installed. The commit MUST be signed and the public key MUST\n              be present in the GPG keyring.\n        type: bool\n        default: 'no'\n        version_added: \"2.0\"\n\n    archive:\n        description:\n            - Specify archive file path with extension. If specified, creates an\n              archive file of the specified format containing the tree structure\n              for the source tree.\n              Allowed archive formats [\"zip\", \"tar.gz\", \"tar\", \"tgz\"].\n            - This will clone and perform git archive from local directory as not\n              all git servers support git archive.\n        type: path\n        version_added: \"2.4\"\n\n    archive_prefix:\n        description:\n            - Specify a prefix to add to each file path in archive. Requires I(archive) to be specified.\n        version_added: \"2.10\"\n        type: str\n\n    separate_git_dir:\n        description:\n            - The path to place the cloned repository. If specified, Git repository\n              can be separated from working tree.\n        type: path\n        version_added: \"2.7\"\n\n    gpg_whitelist:\n        description:\n           - A list of trusted GPG fingerprints to compare to the fingerprint of the\n             GPG-signed commit.\n           - Only used when I(verify_commit=yes).\n           - Use of this feature requires Git 2.6+ due to its reliance on git's C(--raw) flag to C(verify-commit) and C(verify-tag).\n        type: list\n        elements: str\n        default: []\n        version_added: \"2.9\"\n\nrequirements:\n    - git\u003e=1.7.1 (the command line tool)\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        platforms: posix\nnotes:\n    - \"If the task seems to be hanging, first verify remote host is in C(known_hosts).\n      SSH will prompt user to authorize the first contact with a remote host.  To avoid this prompt,\n      one solution is to use the option accept_hostkey. Another solution is to\n      add the remote host public key in C(/etc/ssh/ssh_known_hosts) before calling\n      the git module, with the following command: ssh-keyscan -H remote_host.com \u003e\u003e /etc/ssh/ssh_known_hosts.\"\n","return":"\nafter:\n    description: Last commit revision of the repository retrieved during the update.\n    returned: success\n    type: str\n    sample: 4c020102a9cd6fe908c9a4a326a38f972f63a903\nbefore:\n    description: Commit revision before the repository was updated, \"null\" for new repository.\n    returned: success\n    type: str\n    sample: 67c04ebe40a003bda0efb34eacfb93b0cafdf628\nremote_url_changed:\n    description: Contains True or False whether or not the remote URL was changed.\n    returned: success\n    type: bool\n    sample: True\nwarnings:\n    description: List of warnings if requested features were not available due to a too old git version.\n    returned: error\n    type: str\n    sample: git version is too old to fully support the depth argument. Falling back to full checkouts.\ngit_dir_now:\n    description: Contains the new path of .git directory if it is changed.\n    returned: success\n    type: str\n    sample: /path/to/new/git/dir\ngit_dir_before:\n    description: Contains the original path of .git directory if it is changed.\n    returned: success\n    type: str\n    sample: /path/to/old/git/dir\n"},{"normalizedName":"Group","module":"group","short_description":"Add or remove groups","description":["Manage presence of groups on a host.","For Windows targets, use the M(ansible.windows.win_group) module instead."],"options":{"gid":{"normalizedName":"Gid","structTag":"`yaml:\"gid,omitempty\" json:\"gid,omitempty\"`","goType":"int","goElements":"","description":["Optional I(GID) to set for the group."],"type":"int","required":false,"default":null,"elements":"","aliases":null},"local":{"normalizedName":"Local","structTag":"`yaml:\"local,omitempty\" json:\"local,omitempty\"`","goType":"bool","goElements":"","description":["Forces the use of \"local\" command alternatives on platforms that implement it.","This is useful in environments that use centralized authentication when you want to manipulate the local groups. (for example, it uses C(lgroupadd) instead of C(groupadd)).","This requires that these commands exist on the targeted host, otherwise it will be a fatal error."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"name":{"normalizedName":"Name","structTag":"`yaml:\"name,omitempty\" json:\"name,omitempty\"`","goType":"string","goElements":"","description":["Name of the group to manage."],"type":"str","required":true,"default":null,"elements":"","aliases":null},"non_unique":{"normalizedName":"NonUnique","structTag":"`yaml:\"non_unique,omitempty\" json:\"non_unique,omitempty\"`","goType":"bool","goElements":"","description":["This option allows to change the group ID to a non-unique value. Requires C(gid).","Not supported on macOS or BusyBox distributions."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"state":{"normalizedName":"State","structTag":"`yaml:\"state,omitempty\" json:\"state,omitempty\"`","goType":"string","goElements":"","description":["Whether the group should be present or not on the remote host."],"type":"str","required":false,"default":"present","elements":"","aliases":null},"system":{"normalizedName":"System","structTag":"`yaml:\"system,omitempty\" json:\"system,omitempty\"`","goType":"bool","goElements":"","description":["If I(yes), indicates that the group created is a system group."],"type":"bool","required":false,"default":"no","elements":"","aliases":null}},"returns":{"gid":{"normalizedName":"Gid","description":"Group ID of the group.","returned":"When C(state) is 'present'","type":"int","sample":1001,"goType":"int","structTag":"`yaml:\"gid,omitempty\" json:\"gid,omitempty\"`"},"name":{"normalizedName":"Name","description":"Group name.","returned":"always","type":"str","sample":"users","goType":"string","structTag":"`yaml:\"name,omitempty\" json:\"name,omitempty\"`"},"state":{"normalizedName":"State","description":"Whether the group is present or not.","returned":"always","type":"str","sample":"absent","goType":"string","structTag":"`yaml:\"state,omitempty\" json:\"state,omitempty\"`"},"system":{"normalizedName":"System","description":"Whether the group is a system group or not.","returned":"When C(state) is 'present'","type":"bool","sample":false,"goType":"bool","structTag":"`yaml:\"system,omitempty\" json:\"system,omitempty\"`"}},"doc":"\n---\nmodule: group\nversion_added: \"0.0.2\"\nshort_description: Add or remove groups\nrequirements:\n- groupadd\n- groupdel\n- groupmod\ndescription:\n    - Manage presence of groups on a host.\n    - For Windows targets, use the M(ansible.windows.win_group) module instead.\noptions:\n    name:\n        description:\n            - Name of the group to manage.\n        type: str\n        required: true\n    gid:\n        description:\n            - Optional I(GID) to set for the group.\n        type: int\n    state:\n        description:\n            - Whether the group should be present or not on the remote host.\n        type: str\n        choices: [ absent, present ]\n        default: present\n    system:\n        description:\n            - If I(yes), indicates that the group created is a system group.\n        type: bool\n        default: no\n    local:\n        description:\n            - Forces the use of \"local\" command alternatives on platforms that implement it.\n            - This is useful in environments that use centralized authentication when you want to manipulate the local groups.\n              (for example, it uses C(lgroupadd) instead of C(groupadd)).\n            - This requires that these commands exist on the targeted host, otherwise it will be a fatal error.\n        type: bool\n        default: no\n        version_added: \"2.6\"\n    non_unique:\n        description:\n            - This option allows to change the group ID to a non-unique value. Requires C(gid).\n            - Not supported on macOS or BusyBox distributions.\n        type: bool\n        default: no\n        version_added: \"2.8\"\nextends_documentation_fragment: action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    platform:\n        platforms: posix\nseealso:\n- module: ansible.builtin.user\n- module: ansible.windows.win_group\nauthor:\n- Stephen Fromm (@sfromm)\n","return":"\ngid:\n  description: Group ID of the group.\n  returned: When C(state) is 'present'\n  type: int\n  sample: 1001\nname:\n  description: Group name.\n  returned: always\n  type: str\n  sample: users\nstate:\n  description: Whether the group is present or not.\n  returned: always\n  type: str\n  sample: 'absent'\nsystem:\n  description: Whether the group is a system group or not.\n  returned: When C(state) is 'present'\n  type: bool\n  sample: False\n"},{"normalizedName":"Hostname","module":"hostname","short_description":"Manage hostname","description":["Set system's hostname. Supports most OSs/Distributions including those using C(systemd).","Windows, HP-UX, and AIX are not currently supported."],"options":{"name":{"normalizedName":"Name","structTag":"`yaml:\"name,omitempty\" json:\"name,omitempty\"`","goType":"string","goElements":"","description":["Name of the host.","If the value is a fully qualified domain name that does not resolve from the given host, this will cause the module to hang for a few seconds while waiting for the name resolution attempt to timeout."],"type":"str","required":true,"default":null,"elements":"","aliases":null},"use":{"normalizedName":"Use","structTag":"`yaml:\"use,omitempty\" json:\"use,omitempty\"`","goType":"string","goElements":"","description":["Which strategy to use to update the hostname.","If not set we try to autodetect, but this can be problematic, particularly with containers as they can present misleading information.","Note that 'systemd' should be specified for RHEL/EL/CentOS 7+. Older distributions should use 'redhat'."],"type":"str","required":false,"default":null,"elements":"","aliases":null}},"returns":{},"doc":"\n---\nmodule: hostname\nauthor:\n    - Adrian Likins (@alikins)\n    - Hideki Saito (@saito-hideki)\nversion_added: \"1.4\"\nshort_description: Manage hostname\nrequirements: [ hostname ]\ndescription:\n    - Set system's hostname. Supports most OSs/Distributions including those using C(systemd).\n    - Windows, HP-UX, and AIX are not currently supported.\nnotes:\n    - This module does B(NOT) modify C(/etc/hosts). You need to modify it yourself using other modules such as M(ansible.builtin.template)\n      or M(ansible.builtin.replace).\n    - On macOS, this module uses C(scutil) to set C(HostName), C(ComputerName), and C(LocalHostName). Since C(LocalHostName)\n      cannot contain spaces or most special characters, this module will replace characters when setting C(LocalHostName).\noptions:\n    name:\n        description:\n            - Name of the host.\n            - If the value is a fully qualified domain name that does not resolve from the given host,\n              this will cause the module to hang for a few seconds while waiting for the name resolution attempt to timeout.\n        type: str\n        required: true\n    use:\n        description:\n            - Which strategy to use to update the hostname.\n            - If not set we try to autodetect, but this can be problematic, particularly with containers as they can present misleading information.\n            - Note that 'systemd' should be specified for RHEL/EL/CentOS 7+. Older distributions should use 'redhat'.\n        choices: ['alpine', 'debian', 'freebsd', 'generic', 'macos', 'macosx', 'darwin', 'openbsd', 'openrc', 'redhat', 'sles', 'solaris', 'systemd']\n        type: str\n        version_added: '2.9'\nextends_documentation_fragment:\n- action_common_attributes\n- action_common_attributes.facts\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    facts:\n        support: full\n    platform:\n        platforms: posix\n","return":""},{"normalizedName":"Iptables","module":"iptables","short_description":"Modify iptables rules","description":["C(iptables) is used to set up, maintain, and inspect the tables of IP packet filter rules in the Linux kernel.","This module does not handle the saving and/or loading of rules, but rather only manipulates the current rules that are present in memory. This is the same as the behaviour of the C(iptables) and C(ip6tables) command which this module uses internally."],"options":{"action":{"normalizedName":"Action","structTag":"`yaml:\"action,omitempty\" json:\"action,omitempty\"`","goType":"string","goElements":"","description":["Whether the rule should be appended at the bottom or inserted at the top.","If the rule already exists the chain will not be modified."],"type":"str","required":false,"default":"append","elements":"","aliases":null},"chain":{"normalizedName":"Chain","structTag":"`yaml:\"chain,omitempty\" json:\"chain,omitempty\"`","goType":"string","goElements":"","description":["Specify the iptables chain to modify.","This could be a user-defined chain or one of the standard iptables chains, like C(INPUT), C(FORWARD), C(OUTPUT), C(PREROUTING), C(POSTROUTING), C(SECMARK) or C(CONNSECMARK)."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"chain_management":{"normalizedName":"ChainManagement","structTag":"`yaml:\"chain_management,omitempty\" json:\"chain_management,omitempty\"`","goType":"bool","goElements":"","description":["If C(true) and C(state) is C(present), the chain will be created if needed.","If C(true) and C(state) is C(absent), the chain will be deleted if the only other parameter passed are C(chain) and optionally C(table)."],"type":"bool","required":false,"default":false,"elements":"","aliases":null},"comment":{"normalizedName":"Comment","structTag":"`yaml:\"comment,omitempty\" json:\"comment,omitempty\"`","goType":"string","goElements":"","description":["This specifies a comment that will be added to the rule."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"ctstate":{"normalizedName":"Ctstate","structTag":"`yaml:\"ctstate,omitempty\" json:\"ctstate,omitempty\"`","goType":"[]string","goElements":"","description":["A list of the connection states to match in the conntrack module.","Possible values are C(INVALID), C(NEW), C(ESTABLISHED), C(RELATED), C(UNTRACKED), C(SNAT), C(DNAT)."],"type":"list","required":false,"default":[],"elements":"str","aliases":null},"destination":{"normalizedName":"Destination","structTag":"`yaml:\"destination,omitempty\" json:\"destination,omitempty\"`","goType":"string","goElements":"","description":["Destination specification.","Address can be either a network name, a hostname, a network IP address (with /mask), or a plain IP address.","Hostnames will be resolved once only, before the rule is submitted to the kernel. Please note that specifying any name to be resolved with a remote query such as DNS is a really bad idea.","The mask can be either a network mask or a plain number, specifying the number of 1's at the left side of the network mask. Thus, a mask of 24 is equivalent to 255.255.255.0. A C(!) argument before the address specification inverts the sense of the address."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"destination_port":{"normalizedName":"DestinationPort","structTag":"`yaml:\"destination_port,omitempty\" json:\"destination_port,omitempty\"`","goType":"string","goElements":"","description":["Destination port or port range specification. This can either be a service name or a port number. An inclusive range can also be specified, using the format first:last. If the first port is omitted, '0' is assumed; if the last is omitted, '65535' is assumed. If the first port is greater than the second one they will be swapped. This is only valid if the rule also specifies one of the following protocols: tcp, udp, dccp or sctp."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"destination_ports":{"normalizedName":"DestinationPorts","structTag":"`yaml:\"destination_ports,omitempty\" json:\"destination_ports,omitempty\"`","goType":"[]string","goElements":"","description":["This specifies multiple destination port numbers or port ranges to match in the multiport module.","It can only be used in conjunction with the protocols tcp, udp, udplite, dccp and sctp."],"type":"list","required":false,"default":null,"elements":"str","aliases":null},"dst_range":{"normalizedName":"DstRange","structTag":"`yaml:\"dst_range,omitempty\" json:\"dst_range,omitempty\"`","goType":"string","goElements":"","description":["Specifies the destination IP range to match in the iprange module."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"flush":{"normalizedName":"Flush","structTag":"`yaml:\"flush,omitempty\" json:\"flush,omitempty\"`","goType":"bool","goElements":"","description":["Flushes the specified table and chain of all rules.","If no chain is specified then the entire table is purged.","Ignores all other parameters."],"type":"bool","required":false,"default":false,"elements":"","aliases":null},"fragment":{"normalizedName":"Fragment","structTag":"`yaml:\"fragment,omitempty\" json:\"fragment,omitempty\"`","goType":"string","goElements":"","description":["This means that the rule only refers to second and further fragments of fragmented packets.","Since there is no way to tell the source or destination ports of such a packet (or ICMP type), such a packet will not match any rules which specify them.","When the \"!\" argument precedes fragment argument, the rule will only match head fragments, or unfragmented packets."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"gateway":{"normalizedName":"Gateway","structTag":"`yaml:\"gateway,omitempty\" json:\"gateway,omitempty\"`","goType":"string","goElements":"","description":["This specifies the IP address of host to send the cloned packets.","This option is only valid when C(jump) is set to C(TEE)."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"gid_owner":{"normalizedName":"GidOwner","structTag":"`yaml:\"gid_owner,omitempty\" json:\"gid_owner,omitempty\"`","goType":"string","goElements":"","description":["Specifies the GID or group to use in match by owner rule."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"goto":{"normalizedName":"Goto","structTag":"`yaml:\"goto,omitempty\" json:\"goto,omitempty\"`","goType":"string","goElements":"","description":["This specifies that the processing should continue in a user specified chain.","Unlike the jump argument return will not continue processing in this chain but instead in the chain that called us via jump."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"icmp_type":{"normalizedName":"IcmpType","structTag":"`yaml:\"icmp_type,omitempty\" json:\"icmp_type,omitempty\"`","goType":"string","goElements":"","description":["This allows specification of the ICMP type, which can be a numeric ICMP type, type/code pair, or one of the ICMP type names shown by the command 'iptables -p icmp -h'"],"type":"str","required":false,"default":null,"elements":"","aliases":null},"in_interface":{"normalizedName":"InInterface","structTag":"`yaml:\"in_interface,omitempty\" json:\"in_interface,omitempty\"`","goType":"string","goElements":"","description":["Name of an interface via which a packet was received (only for packets entering the C(INPUT), C(FORWARD) and C(PREROUTING) chains).","When the C(!) argument is used before the interface name, the sense is inverted.","If the interface name ends in a C(+), then any interface which begins with this name will match.","If this option is omitted, any interface name will match."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"ip_version":{"normalizedName":"IpVersion","structTag":"`yaml:\"ip_version,omitempty\" json:\"ip_version,omitempty\"`","goType":"string","goElements":"","description":["Which version of the IP protocol this rule should apply to."],"type":"str","required":false,"default":"ipv4","elements":"","aliases":null},"jump":{"normalizedName":"Jump","structTag":"`yaml:\"jump,omitempty\" json:\"jump,omitempty\"`","goType":"string","goElements":"","description":["This specifies the target of the rule; i.e., what to do if the packet matches it.","The target can be a user-defined chain (other than the one this rule is in), one of the special builtin targets which decide the fate of the packet immediately, or an extension (see EXTENSIONS below).","If this option is omitted in a rule (and the goto parameter is not used), then matching the rule will have no effect on the packet's fate, but the counters on the rule will be incremented."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"limit":{"normalizedName":"Limit","structTag":"`yaml:\"limit,omitempty\" json:\"limit,omitempty\"`","goType":"string","goElements":"","description":["Specifies the maximum average number of matches to allow per second.","The number can specify units explicitly, using C(/second), C(/minute), C(/hour) or C(/day), or parts of them (so C(5/second) is the same as C(5/s))."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"limit_burst":{"normalizedName":"LimitBurst","structTag":"`yaml:\"limit_burst,omitempty\" json:\"limit_burst,omitempty\"`","goType":"string","goElements":"","description":["Specifies the maximum burst before the above limit kicks in."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"log_level":{"normalizedName":"LogLevel","structTag":"`yaml:\"log_level,omitempty\" json:\"log_level,omitempty\"`","goType":"string","goElements":"","description":["Logging level according to the syslogd-defined priorities.","The value can be strings or numbers from 1-8.","This parameter is only applicable if C(jump) is set to C(LOG)."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"log_prefix":{"normalizedName":"LogPrefix","structTag":"`yaml:\"log_prefix,omitempty\" json:\"log_prefix,omitempty\"`","goType":"string","goElements":"","description":["Specifies a log text for the rule. Only make sense with a LOG jump."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"match":{"normalizedName":"Match","structTag":"`yaml:\"match,omitempty\" json:\"match,omitempty\"`","goType":"[]string","goElements":"","description":["Specifies a match to use, that is, an extension module that tests for a specific property.","The set of matches make up the condition under which a target is invoked.","Matches are evaluated first to last if specified as an array and work in short-circuit fashion, i.e. if one extension yields false, evaluation will stop."],"type":"list","required":false,"default":[],"elements":"str","aliases":null},"match_set":{"normalizedName":"MatchSet","structTag":"`yaml:\"match_set,omitempty\" json:\"match_set,omitempty\"`","goType":"string","goElements":"","description":["Specifies a set name which can be defined by ipset.","Must be used together with the match_set_flags parameter.","When the C(!) argument is prepended then it inverts the rule.","Uses the iptables set extension."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"match_set_flags":{"normalizedName":"MatchSetFlags","structTag":"`yaml:\"match_set_flags,omitempty\" json:\"match_set_flags,omitempty\"`","goType":"string","goElements":"","description":["Specifies the necessary flags for the match_set parameter.","Must be used together with the match_set parameter.","Uses the iptables set extension."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"out_interface":{"normalizedName":"OutInterface","structTag":"`yaml:\"out_interface,omitempty\" json:\"out_interface,omitempty\"`","goType":"string","goElements":"","description":["Name of an interface via which a packet is going to be sent (for packets entering the C(FORWARD), C(OUTPUT) and C(POSTROUTING) chains).","When the C(!) argument is used before the interface name, the sense is inverted.","If the interface name ends in a C(+), then any interface which begins with this name will match.","If this option is omitted, any interface name will match."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"policy":{"normalizedName":"Policy","structTag":"`yaml:\"policy,omitempty\" json:\"policy,omitempty\"`","goType":"string","goElements":"","description":["Set the policy for the chain to the given target.","Only built-in chains can have policies.","This parameter requires the C(chain) parameter.","If you specify this parameter, all other parameters will be ignored.","This parameter is used to set default policy for the given C(chain). Do not confuse this with C(jump) parameter."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"protocol":{"normalizedName":"Protocol","structTag":"`yaml:\"protocol,omitempty\" json:\"protocol,omitempty\"`","goType":"string","goElements":"","description":["The protocol of the rule or of the packet to check.","The specified protocol can be one of C(tcp), C(udp), C(udplite), C(icmp), C(ipv6-icmp) or C(icmpv6), C(esp), C(ah), C(sctp) or the special keyword C(all), or it can be a numeric value, representing one of these protocols or a different one.","A protocol name from I(/etc/protocols) is also allowed.","A C(!) argument before the protocol inverts the test.","The number zero is equivalent to all.","C(all) will match with all protocols and is taken as default when this option is omitted."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"reject_with":{"normalizedName":"RejectWith","structTag":"`yaml:\"reject_with,omitempty\" json:\"reject_with,omitempty\"`","goType":"string","goElements":"","description":["Specifies the error packet type to return while rejecting. It implies \"jump: REJECT\"."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"rule_num":{"normalizedName":"RuleNum","structTag":"`yaml:\"rule_num,omitempty\" json:\"rule_num,omitempty\"`","goType":"string","goElements":"","description":["Insert the rule as the given rule number.","This works only with C(action=insert)."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"set_counters":{"normalizedName":"SetCounters","structTag":"`yaml:\"set_counters,omitempty\" json:\"set_counters,omitempty\"`","goType":"string","goElements":"","description":["This enables the administrator to initialize the packet and byte counters of a rule (during C(INSERT), C(APPEND), C(REPLACE) operations)."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"set_dscp_mark":{"normalizedName":"SetDscpMark","structTag":"`yaml:\"set_dscp_mark,omitempty\" json:\"set_dscp_mark,omitempty\"`","goType":"string","goElements":"","description":["This allows specifying a DSCP mark to be added to packets. It takes either an integer or hex value.","Mutually exclusive with C(set_dscp_mark_class)."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"set_dscp_mark_class":{"normalizedName":"SetDscpMarkClass","structTag":"`yaml:\"set_dscp_mark_class,omitempty\" json:\"set_dscp_mark_class,omitempty\"`","goType":"string","goElements":"","description":["This allows specifying a predefined DiffServ class which will be translated to the corresponding DSCP mark.","Mutually exclusive with C(set_dscp_mark)."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"source":{"normalizedName":"Source","structTag":"`yaml:\"source,omitempty\" json:\"source,omitempty\"`","goType":"string","goElements":"","description":["Source specification.","Address can be either a network name, a hostname, a network IP address (with /mask), or a plain IP address.","Hostnames will be resolved once only, before the rule is submitted to the kernel. Please note that specifying any name to be resolved with a remote query such as DNS is a really bad idea.","The mask can be either a network mask or a plain number, specifying the number of 1's at the left side of the network mask. Thus, a mask of 24 is equivalent to 255.255.255.0. A C(!) argument before the address specification inverts the sense of the address."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"source_port":{"normalizedName":"SourcePort","structTag":"`yaml:\"source_port,omitempty\" json:\"source_port,omitempty\"`","goType":"string","goElements":"","description":["Source port or port range specification.","This can either be a service name or a port number.","An inclusive range can also be specified, using the format C(first:last).","If the first port is omitted, C(0) is assumed; if the last is omitted, C(65535) is assumed.","If the first port is greater than the second one they will be swapped."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"src_range":{"normalizedName":"SrcRange","structTag":"`yaml:\"src_range,omitempty\" json:\"src_range,omitempty\"`","goType":"string","goElements":"","description":["Specifies the source IP range to match in the iprange module."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"state":{"normalizedName":"State","structTag":"`yaml:\"state,omitempty\" json:\"state,omitempty\"`","goType":"string","goElements":"","description":["Whether the rule should be absent or present."],"type":"str","required":false,"default":"present","elements":"","aliases":null},"syn":{"normalizedName":"Syn","structTag":"`yaml:\"syn,omitempty\" json:\"syn,omitempty\"`","goType":"string","goElements":"","description":["This allows matching packets that have the SYN bit set and the ACK and RST bits unset.","When negated, this matches all packets with the RST or the ACK bits set."],"type":"str","required":false,"default":"ignore","elements":"","aliases":null},"table":{"normalizedName":"Table","structTag":"`yaml:\"table,omitempty\" json:\"table,omitempty\"`","goType":"string","goElements":"","description":["This option specifies the packet matching table which the command should operate on.","If the kernel is configured with automatic module loading, an attempt will be made to load the appropriate module for that table if it is not already there."],"type":"str","required":false,"default":"filter","elements":"","aliases":null},"tcp_flags":{"normalizedName":"TcpFlags","structTag":"`yaml:\"tcp_flags,omitempty\" json:\"tcp_flags,omitempty\"`","goType":"map[string]string","goElements":"","description":["TCP flags specification.","C(tcp_flags) expects a dict with the two keys C(flags) and C(flags_set)."],"type":"dict","required":false,"default":{},"elements":"","aliases":null},"to_destination":{"normalizedName":"ToDestination","structTag":"`yaml:\"to_destination,omitempty\" json:\"to_destination,omitempty\"`","goType":"string","goElements":"","description":["This specifies a destination address to use with C(DNAT).","Without this, the destination address is never altered."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"to_ports":{"normalizedName":"ToPorts","structTag":"`yaml:\"to_ports,omitempty\" json:\"to_ports,omitempty\"`","goType":"string","goElements":"","description":["This specifies a destination port or range of ports to use, without this, the destination port is never altered.","This is only valid if the rule also specifies one of the protocol C(tcp), C(udp), C(dccp) or C(sctp)."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"to_source":{"normalizedName":"ToSource","structTag":"`yaml:\"to_source,omitempty\" json:\"to_source,omitempty\"`","goType":"string","goElements":"","description":["This specifies a source address to use with C(SNAT).","Without this, the source address is never altered."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"uid_owner":{"normalizedName":"UidOwner","structTag":"`yaml:\"uid_owner,omitempty\" json:\"uid_owner,omitempty\"`","goType":"string","goElements":"","description":["Specifies the UID or username to use in match by owner rule.","From Ansible 2.6 when the C(!) argument is prepended then the it inverts the rule to apply instead to all users except that one specified."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"wait":{"normalizedName":"Wait","structTag":"`yaml:\"wait,omitempty\" json:\"wait,omitempty\"`","goType":"string","goElements":"","description":["Wait N seconds for the xtables lock to prevent multiple instances of the program from running concurrently."],"type":"str","required":false,"default":null,"elements":"","aliases":null}},"returns":{},"doc":"\n---\nmodule: iptables\nshort_description: Modify iptables rules\nversion_added: \"2.0\"\nauthor:\n- Linus Unnebäck (@LinusU) \u003clinus@folkdatorn.se\u003e\n- Sébastien DA ROCHA (@sebastiendarocha)\ndescription:\n  - C(iptables) is used to set up, maintain, and inspect the tables of IP packet\n    filter rules in the Linux kernel.\n  - This module does not handle the saving and/or loading of rules, but rather\n    only manipulates the current rules that are present in memory. This is the\n    same as the behaviour of the C(iptables) and C(ip6tables) command which\n    this module uses internally.\nextends_documentation_fragment: action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    platform:\n        platforms: linux\nnotes:\n  - This module just deals with individual rules. If you need advanced\n    chaining of rules the recommended way is to template the iptables restore\n    file.\noptions:\n  table:\n    description:\n      - This option specifies the packet matching table which the command should operate on.\n      - If the kernel is configured with automatic module loading, an attempt will be made\n         to load the appropriate module for that table if it is not already there.\n    type: str\n    choices: [ filter, nat, mangle, raw, security ]\n    default: filter\n  state:\n    description:\n      - Whether the rule should be absent or present.\n    type: str\n    choices: [ absent, present ]\n    default: present\n  action:\n    description:\n      - Whether the rule should be appended at the bottom or inserted at the top.\n      - If the rule already exists the chain will not be modified.\n    type: str\n    choices: [ append, insert ]\n    default: append\n    version_added: \"2.2\"\n  rule_num:\n    description:\n      - Insert the rule as the given rule number.\n      - This works only with C(action=insert).\n    type: str\n    version_added: \"2.5\"\n  ip_version:\n    description:\n      - Which version of the IP protocol this rule should apply to.\n    type: str\n    choices: [ ipv4, ipv6 ]\n    default: ipv4\n  chain:\n    description:\n      - Specify the iptables chain to modify.\n      - This could be a user-defined chain or one of the standard iptables chains, like\n        C(INPUT), C(FORWARD), C(OUTPUT), C(PREROUTING), C(POSTROUTING), C(SECMARK) or C(CONNSECMARK).\n    type: str\n  protocol:\n    description:\n      - The protocol of the rule or of the packet to check.\n      - The specified protocol can be one of C(tcp), C(udp), C(udplite), C(icmp), C(ipv6-icmp) or C(icmpv6),\n        C(esp), C(ah), C(sctp) or the special keyword C(all), or it can be a numeric value,\n        representing one of these protocols or a different one.\n      - A protocol name from I(/etc/protocols) is also allowed.\n      - A C(!) argument before the protocol inverts the test.\n      - The number zero is equivalent to all.\n      - C(all) will match with all protocols and is taken as default when this option is omitted.\n    type: str\n  source:\n    description:\n      - Source specification.\n      - Address can be either a network name, a hostname, a network IP address\n        (with /mask), or a plain IP address.\n      - Hostnames will be resolved once only, before the rule is submitted to\n        the kernel. Please note that specifying any name to be resolved with\n        a remote query such as DNS is a really bad idea.\n      - The mask can be either a network mask or a plain number, specifying\n        the number of 1's at the left side of the network mask. Thus, a mask\n        of 24 is equivalent to 255.255.255.0. A C(!) argument before the\n        address specification inverts the sense of the address.\n    type: str\n  destination:\n    description:\n      - Destination specification.\n      - Address can be either a network name, a hostname, a network IP address\n        (with /mask), or a plain IP address.\n      - Hostnames will be resolved once only, before the rule is submitted to\n        the kernel. Please note that specifying any name to be resolved with\n        a remote query such as DNS is a really bad idea.\n      - The mask can be either a network mask or a plain number, specifying\n        the number of 1's at the left side of the network mask. Thus, a mask\n        of 24 is equivalent to 255.255.255.0. A C(!) argument before the\n        address specification inverts the sense of the address.\n    type: str\n  tcp_flags:\n    description:\n      - TCP flags specification.\n      - C(tcp_flags) expects a dict with the two keys C(flags) and C(flags_set).\n    type: dict\n    default: {}\n    version_added: \"2.4\"\n    suboptions:\n        flags:\n            description:\n                - List of flags you want to examine.\n            type: list\n            elements: str\n        flags_set:\n            description:\n                - Flags to be set.\n            type: list\n            elements: str\n  match:\n    description:\n      - Specifies a match to use, that is, an extension module that tests for\n        a specific property.\n      - The set of matches make up the condition under which a target is invoked.\n      - Matches are evaluated first to last if specified as an array and work in short-circuit\n        fashion, i.e. if one extension yields false, evaluation will stop.\n    type: list\n    elements: str\n    default: []\n  jump:\n    description:\n      - This specifies the target of the rule; i.e., what to do if the packet matches it.\n      - The target can be a user-defined chain (other than the one\n        this rule is in), one of the special builtin targets which decide the\n        fate of the packet immediately, or an extension (see EXTENSIONS\n        below).\n      - If this option is omitted in a rule (and the goto parameter\n        is not used), then matching the rule will have no effect on the\n        packet's fate, but the counters on the rule will be incremented.\n    type: str\n  gateway:\n    description:\n      - This specifies the IP address of host to send the cloned packets.\n      - This option is only valid when C(jump) is set to C(TEE).\n    type: str\n    version_added: \"2.8\"\n  log_prefix:\n    description:\n      - Specifies a log text for the rule. Only make sense with a LOG jump.\n    type: str\n    version_added: \"2.5\"\n  log_level:\n    description:\n      - Logging level according to the syslogd-defined priorities.\n      - The value can be strings or numbers from 1-8.\n      - This parameter is only applicable if C(jump) is set to C(LOG).\n    type: str\n    version_added: \"2.8\"\n    choices: [ '0', '1', '2', '3', '4', '5', '6', '7', 'emerg', 'alert', 'crit', 'error', 'warning', 'notice', 'info', 'debug' ]\n  goto:\n    description:\n      - This specifies that the processing should continue in a user specified chain.\n      - Unlike the jump argument return will not continue processing in\n        this chain but instead in the chain that called us via jump.\n    type: str\n  in_interface:\n    description:\n      - Name of an interface via which a packet was received (only for packets\n        entering the C(INPUT), C(FORWARD) and C(PREROUTING) chains).\n      - When the C(!) argument is used before the interface name, the sense is inverted.\n      - If the interface name ends in a C(+), then any interface which begins with\n        this name will match.\n      - If this option is omitted, any interface name will match.\n    type: str\n  out_interface:\n    description:\n      - Name of an interface via which a packet is going to be sent (for\n        packets entering the C(FORWARD), C(OUTPUT) and C(POSTROUTING) chains).\n      - When the C(!) argument is used before the interface name, the sense is inverted.\n      - If the interface name ends in a C(+), then any interface which begins\n        with this name will match.\n      - If this option is omitted, any interface name will match.\n    type: str\n  fragment:\n    description:\n      - This means that the rule only refers to second and further fragments\n        of fragmented packets.\n      - Since there is no way to tell the source or destination ports of such\n        a packet (or ICMP type), such a packet will not match any rules which specify them.\n      - When the \"!\" argument precedes fragment argument, the rule will only match head fragments,\n        or unfragmented packets.\n    type: str\n  set_counters:\n    description:\n      - This enables the administrator to initialize the packet and byte\n        counters of a rule (during C(INSERT), C(APPEND), C(REPLACE) operations).\n    type: str\n  source_port:\n    description:\n      - Source port or port range specification.\n      - This can either be a service name or a port number.\n      - An inclusive range can also be specified, using the format C(first:last).\n      - If the first port is omitted, C(0) is assumed; if the last is omitted, C(65535) is assumed.\n      - If the first port is greater than the second one they will be swapped.\n    type: str\n  destination_port:\n    description:\n      - \"Destination port or port range specification. This can either be\n        a service name or a port number. An inclusive range can also be\n        specified, using the format first:last. If the first port is omitted,\n        '0' is assumed; if the last is omitted, '65535' is assumed. If the\n        first port is greater than the second one they will be swapped.\n        This is only valid if the rule also specifies one of the following\n        protocols: tcp, udp, dccp or sctp.\"\n    type: str\n  destination_ports:\n    description:\n      - This specifies multiple destination port numbers or port ranges to match in the multiport module.\n      - It can only be used in conjunction with the protocols tcp, udp, udplite, dccp and sctp.\n    type: list\n    elements: str\n    version_added: \"2.11\"\n  to_ports:\n    description:\n      - This specifies a destination port or range of ports to use, without\n        this, the destination port is never altered.\n      - This is only valid if the rule also specifies one of the protocol\n        C(tcp), C(udp), C(dccp) or C(sctp).\n    type: str\n  to_destination:\n    description:\n      - This specifies a destination address to use with C(DNAT).\n      - Without this, the destination address is never altered.\n    type: str\n    version_added: \"2.1\"\n  to_source:\n    description:\n      - This specifies a source address to use with C(SNAT).\n      - Without this, the source address is never altered.\n    type: str\n    version_added: \"2.2\"\n  syn:\n    description:\n      - This allows matching packets that have the SYN bit set and the ACK\n        and RST bits unset.\n      - When negated, this matches all packets with the RST or the ACK bits set.\n    type: str\n    choices: [ ignore, match, negate ]\n    default: ignore\n    version_added: \"2.5\"\n  set_dscp_mark:\n    description:\n      - This allows specifying a DSCP mark to be added to packets.\n        It takes either an integer or hex value.\n      - Mutually exclusive with C(set_dscp_mark_class).\n    type: str\n    version_added: \"2.1\"\n  set_dscp_mark_class:\n    description:\n      - This allows specifying a predefined DiffServ class which will be\n        translated to the corresponding DSCP mark.\n      - Mutually exclusive with C(set_dscp_mark).\n    type: str\n    version_added: \"2.1\"\n  comment:\n    description:\n      - This specifies a comment that will be added to the rule.\n    type: str\n  ctstate:\n    description:\n      - A list of the connection states to match in the conntrack module.\n      - Possible values are C(INVALID), C(NEW), C(ESTABLISHED), C(RELATED), C(UNTRACKED), C(SNAT), C(DNAT).\n    type: list\n    elements: str\n    default: []\n  src_range:\n    description:\n      - Specifies the source IP range to match in the iprange module.\n    type: str\n    version_added: \"2.8\"\n  dst_range:\n    description:\n      - Specifies the destination IP range to match in the iprange module.\n    type: str\n    version_added: \"2.8\"\n  match_set:\n    description:\n      - Specifies a set name which can be defined by ipset.\n      - Must be used together with the match_set_flags parameter.\n      - When the C(!) argument is prepended then it inverts the rule.\n      - Uses the iptables set extension.\n    type: str\n    version_added: \"2.11\"\n  match_set_flags:\n    description:\n      - Specifies the necessary flags for the match_set parameter.\n      - Must be used together with the match_set parameter.\n      - Uses the iptables set extension.\n    type: str\n    choices: [ \"src\", \"dst\", \"src,dst\", \"dst,src\" ]\n    version_added: \"2.11\"\n  limit:\n    description:\n      - Specifies the maximum average number of matches to allow per second.\n      - The number can specify units explicitly, using C(/second), C(/minute),\n        C(/hour) or C(/day), or parts of them (so C(5/second) is the same as\n        C(5/s)).\n    type: str\n  limit_burst:\n    description:\n      - Specifies the maximum burst before the above limit kicks in.\n    type: str\n    version_added: \"2.1\"\n  uid_owner:\n    description:\n      - Specifies the UID or username to use in match by owner rule.\n      - From Ansible 2.6 when the C(!) argument is prepended then the it inverts\n        the rule to apply instead to all users except that one specified.\n    type: str\n    version_added: \"2.1\"\n  gid_owner:\n    description:\n      - Specifies the GID or group to use in match by owner rule.\n    type: str\n    version_added: \"2.9\"\n  reject_with:\n    description:\n      - 'Specifies the error packet type to return while rejecting. It implies\n        \"jump: REJECT\".'\n    type: str\n    version_added: \"2.1\"\n  icmp_type:\n    description:\n      - This allows specification of the ICMP type, which can be a numeric\n        ICMP type, type/code pair, or one of the ICMP type names shown by the\n        command 'iptables -p icmp -h'\n    type: str\n    version_added: \"2.2\"\n  flush:\n    description:\n      - Flushes the specified table and chain of all rules.\n      - If no chain is specified then the entire table is purged.\n      - Ignores all other parameters.\n    type: bool\n    default: false\n    version_added: \"2.2\"\n  policy:\n    description:\n      - Set the policy for the chain to the given target.\n      - Only built-in chains can have policies.\n      - This parameter requires the C(chain) parameter.\n      - If you specify this parameter, all other parameters will be ignored.\n      - This parameter is used to set default policy for the given C(chain).\n        Do not confuse this with C(jump) parameter.\n    type: str\n    choices: [ ACCEPT, DROP, QUEUE, RETURN ]\n    version_added: \"2.2\"\n  wait:\n    description:\n      - Wait N seconds for the xtables lock to prevent multiple instances of\n        the program from running concurrently.\n    type: str\n    version_added: \"2.10\"\n  chain_management:\n    description:\n      - If C(true) and C(state) is C(present), the chain will be created if needed.\n      - If C(true) and C(state) is C(absent), the chain will be deleted if the only\n        other parameter passed are C(chain) and optionally C(table).\n    type: bool\n    default: false\n    version_added: \"2.13\"\n","return":""},{"normalizedName":"KnownHosts","module":"known_hosts","short_description":"Add or remove a host from the C(known_hosts) file","description":["The C(known_hosts) module lets you add or remove a host keys from the C(known_hosts) file.","Starting at Ansible 2.2, multiple entries per host are allowed, but only one for each key type supported by ssh. This is useful if you're going to want to use the M(ansible.builtin.git) module over ssh, for example.","If you have a very large number of host keys to manage, you will find the M(ansible.builtin.template) module more useful."],"options":{"hash_host":{"normalizedName":"HashHost","structTag":"`yaml:\"hash_host,omitempty\" json:\"hash_host,omitempty\"`","goType":"bool","goElements":"","description":["Hash the hostname in the known_hosts file."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"key":{"normalizedName":"Key","structTag":"`yaml:\"key,omitempty\" json:\"key,omitempty\"`","goType":"string","goElements":"","description":["The SSH public host key, as a string.","Required if C(state=present), optional when C(state=absent), in which case all keys for the host are removed.","The key must be in the right format for SSH (see sshd(8), section \"SSH_KNOWN_HOSTS FILE FORMAT\").","Specifically, the key should not match the format that is found in an SSH pubkey file, but should rather have the hostname prepended to a line that includes the pubkey, the same way that it would appear in the known_hosts file. The value prepended to the line must also match the value of the name parameter.","Should be of format C(\u003chostname[,IP]\u003e ssh-rsa \u003cpubkey\u003e).","For custom SSH port, C(key) needs to specify port as well. See example section."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"name":{"normalizedName":"Name","structTag":"`yaml:\"name,omitempty\" json:\"name,omitempty\"`","goType":"string","goElements":"","description":["The host to add or remove (must match a host specified in key). It will be converted to lowercase so that ssh-keygen can find it.","Must match with \u003chostname\u003e or \u003cip\u003e present in key attribute.","For custom SSH port, C(name) needs to specify port as well. See example section."],"type":"str","required":true,"default":null,"elements":"","aliases":["host"]},"path":{"normalizedName":"Path","structTag":"`yaml:\"path,omitempty\" json:\"path,omitempty\"`","goType":"string","goElements":"","description":["The known_hosts file to edit.","The known_hosts file will be created if needed. The rest of the path must exist prior to running the module."],"type":"path","required":false,"default":"~/.ssh/known_hosts","elements":"","aliases":null},"state":{"normalizedName":"State","structTag":"`yaml:\"state,omitempty\" json:\"state,omitempty\"`","goType":"string","goElements":"","description":["I(present) to add the host key.","I(absent) to remove it."],"type":"str","required":false,"default":"present","elements":"","aliases":null}},"returns":{},"doc":"\n---\nmodule: known_hosts\nshort_description: Add or remove a host from the C(known_hosts) file\ndescription:\n   - The C(known_hosts) module lets you add or remove a host keys from the C(known_hosts) file.\n   - Starting at Ansible 2.2, multiple entries per host are allowed, but only one for each key type supported by ssh.\n     This is useful if you're going to want to use the M(ansible.builtin.git) module over ssh, for example.\n   - If you have a very large number of host keys to manage, you will find the M(ansible.builtin.template) module more useful.\nversion_added: \"1.9\"\noptions:\n  name:\n    aliases: [ 'host' ]\n    description:\n      - The host to add or remove (must match a host specified in key). It will be converted to lowercase so that ssh-keygen can find it.\n      - Must match with \u003chostname\u003e or \u003cip\u003e present in key attribute.\n      - For custom SSH port, C(name) needs to specify port as well. See example section.\n    type: str\n    required: true\n  key:\n    description:\n      - The SSH public host key, as a string.\n      - Required if C(state=present), optional when C(state=absent), in which case all keys for the host are removed.\n      - The key must be in the right format for SSH (see sshd(8), section \"SSH_KNOWN_HOSTS FILE FORMAT\").\n      - Specifically, the key should not match the format that is found in an SSH pubkey file, but should rather have the hostname prepended to a\n        line that includes the pubkey, the same way that it would appear in the known_hosts file. The value prepended to the line must also match\n        the value of the name parameter.\n      - Should be of format C(\u003chostname[,IP]\u003e ssh-rsa \u003cpubkey\u003e).\n      - For custom SSH port, C(key) needs to specify port as well. See example section.\n    type: str\n  path:\n    description:\n      - The known_hosts file to edit.\n      - The known_hosts file will be created if needed. The rest of the path must exist prior to running the module.\n    default: \"~/.ssh/known_hosts\"\n    type: path\n  hash_host:\n    description:\n      - Hash the hostname in the known_hosts file.\n    type: bool\n    default: \"no\"\n    version_added: \"2.3\"\n  state:\n    description:\n      - I(present) to add the host key.\n      - I(absent) to remove it.\n    choices: [ \"absent\", \"present\" ]\n    default: \"present\"\n    type: str\nattributes:\n  check_mode:\n    support: full\n  diff_mode:\n    support: full\n  platform:\n    platforms: posix\nextends_documentation_fragment:\n  - action_common_attributes\nauthor:\n- Matthew Vernon (@mcv21)\n","return":""},{"normalizedName":"Lineinfile","module":"lineinfile","short_description":"Manage lines in text files","description":["This module ensures a particular line is in a file, or replace an existing line using a back-referenced regular expression.","This is primarily useful when you want to change a single line in a file only.","See the M(ansible.builtin.replace) module if you want to change multiple, similar lines or check M(ansible.builtin.blockinfile) if you want to insert/update/remove a block of lines in a file. For other cases, see the M(ansible.builtin.copy) or M(ansible.builtin.template) modules."],"options":{"backrefs":{"normalizedName":"Backrefs","structTag":"`yaml:\"backrefs,omitempty\" json:\"backrefs,omitempty\"`","goType":"bool","goElements":"","description":["Used with C(state=present).","If set, C(line) can contain backreferences (both positional and named) that will get populated if the C(regexp) matches.","This parameter changes the operation of the module slightly; C(insertbefore) and C(insertafter) will be ignored, and if the C(regexp) does not match anywhere in the file, the file will be left unchanged.","If the C(regexp) does match, the last matching line will be replaced by the expanded line parameter.","Mutually exclusive with C(search_string)."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"backup":{"normalizedName":"Backup","structTag":"`yaml:\"backup,omitempty\" json:\"backup,omitempty\"`","goType":"bool","goElements":"","description":["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"create":{"normalizedName":"Create","structTag":"`yaml:\"create,omitempty\" json:\"create,omitempty\"`","goType":"bool","goElements":"","description":["Used with C(state=present).","If specified, the file will be created if it does not already exist.","By default it will fail if the file is missing."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"firstmatch":{"normalizedName":"Firstmatch","structTag":"`yaml:\"firstmatch,omitempty\" json:\"firstmatch,omitempty\"`","goType":"bool","goElements":"","description":["Used with C(insertafter) or C(insertbefore).","If set, C(insertafter) and C(insertbefore) will work with the first line that matches the given regular expression."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"insertafter":{"normalizedName":"Insertafter","structTag":"`yaml:\"insertafter,omitempty\" json:\"insertafter,omitempty\"`","goType":"string","goElements":"","description":["Used with C(state=present).","If specified, the line will be inserted after the last match of specified regular expression.","If the first match is required, use(firstmatch=yes).","A special value is available; C(EOF) for inserting the line at the end of the file.","If specified regular expression has no matches, EOF will be used instead.","If C(insertbefore) is set, default value C(EOF) will be ignored.","If regular expressions are passed to both C(regexp) and C(insertafter), C(insertafter) is only honored if no match for C(regexp) is found.","May not be used with C(backrefs) or C(insertbefore)."],"type":"str","required":false,"default":"EOF","elements":"","aliases":null},"insertbefore":{"normalizedName":"Insertbefore","structTag":"`yaml:\"insertbefore,omitempty\" json:\"insertbefore,omitempty\"`","goType":"string","goElements":"","description":["Used with C(state=present).","If specified, the line will be inserted before the last match of specified regular expression.","If the first match is required, use C(firstmatch=yes).","A value is available; C(BOF) for inserting the line at the beginning of the file.","If specified regular expression has no matches, the line will be inserted at the end of the file.","If regular expressions are passed to both C(regexp) and C(insertbefore), C(insertbefore) is only honored if no match for C(regexp) is found.","May not be used with C(backrefs) or C(insertafter)."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"line":{"normalizedName":"Line","structTag":"`yaml:\"line,omitempty\" json:\"line,omitempty\"`","goType":"string","goElements":"","description":["The line to insert/replace into the file.","Required for C(state=present).","If C(backrefs) is set, may contain backreferences that will get expanded with the C(regexp) capture groups if the regexp matches."],"type":"str","required":false,"default":null,"elements":"","aliases":["value"]},"others":{"normalizedName":"Others","structTag":"`yaml:\"others,omitempty\" json:\"others,omitempty\"`","goType":"string","goElements":"","description":["All arguments accepted by the M(ansible.builtin.file) module also work here."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"path":{"normalizedName":"Path","structTag":"`yaml:\"path,omitempty\" json:\"path,omitempty\"`","goType":"string","goElements":"","description":["The file to modify.","Before Ansible 2.3 this option was only usable as I(dest), I(destfile) and I(name)."],"type":"path","required":true,"default":null,"elements":"","aliases":["dest","destfile","name"]},"regexp":{"normalizedName":"Regexp","structTag":"`yaml:\"regexp,omitempty\" json:\"regexp,omitempty\"`","goType":"string","goElements":"","description":["The regular expression to look for in every line of the file.","For C(state=present), the pattern to replace if found. Only the last line found will be replaced.","For C(state=absent), the pattern of the line(s) to remove.","If the regular expression is not matched, the line will be added to the file in keeping with C(insertbefore) or C(insertafter) settings.","When modifying a line the regexp should typically match both the initial state of the line as well as its state after replacement by C(line) to ensure idempotence.","Uses Python regular expressions. See U(https://docs.python.org/3/library/re.html)."],"type":"str","required":false,"default":null,"elements":"","aliases":["regex"]},"search_string":{"normalizedName":"SearchString","structTag":"`yaml:\"search_string,omitempty\" json:\"search_string,omitempty\"`","goType":"string","goElements":"","description":["The literal string to look for in every line of the file. This does not have to match the entire line.","For C(state=present), the line to replace if the string is found in the file. Only the last line found will be replaced.","For C(state=absent), the line(s) to remove if the string is in the line.","If the literal expression is not matched, the line will be added to the file in keeping with C(insertbefore) or C(insertafter) settings.","Mutually exclusive with C(backrefs) and C(regexp)."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"state":{"normalizedName":"State","structTag":"`yaml:\"state,omitempty\" json:\"state,omitempty\"`","goType":"string","goElements":"","description":["Whether the line should be there or not."],"type":"str","required":false,"default":"present","elements":"","aliases":null}},"returns":{},"doc":"\n---\nmodule: lineinfile\nshort_description: Manage lines in text files\ndescription:\n  - This module ensures a particular line is in a file, or replace an\n    existing line using a back-referenced regular expression.\n  - This is primarily useful when you want to change a single line in a file only.\n  - See the M(ansible.builtin.replace) module if you want to change multiple, similar lines\n    or check M(ansible.builtin.blockinfile) if you want to insert/update/remove a block of lines in a file.\n    For other cases, see the M(ansible.builtin.copy) or M(ansible.builtin.template) modules.\nversion_added: \"0.7\"\noptions:\n  path:\n    description:\n      - The file to modify.\n      - Before Ansible 2.3 this option was only usable as I(dest), I(destfile) and I(name).\n    type: path\n    required: true\n    aliases: [ dest, destfile, name ]\n  regexp:\n    description:\n      - The regular expression to look for in every line of the file.\n      - For C(state=present), the pattern to replace if found. Only the last line found will be replaced.\n      - For C(state=absent), the pattern of the line(s) to remove.\n      - If the regular expression is not matched, the line will be\n        added to the file in keeping with C(insertbefore) or C(insertafter)\n        settings.\n      - When modifying a line the regexp should typically match both the initial state of\n        the line as well as its state after replacement by C(line) to ensure idempotence.\n      - Uses Python regular expressions. See U(https://docs.python.org/3/library/re.html).\n    type: str\n    aliases: [ regex ]\n    version_added: '1.7'\n  search_string:\n    description:\n      - The literal string to look for in every line of the file. This does not have to match the entire line.\n      - For C(state=present), the line to replace if the string is found in the file. Only the last line found will be replaced.\n      - For C(state=absent), the line(s) to remove if the string is in the line.\n      - If the literal expression is not matched, the line will be\n        added to the file in keeping with C(insertbefore) or C(insertafter)\n        settings.\n      - Mutually exclusive with C(backrefs) and C(regexp).\n    type: str\n    version_added: '2.11'\n  state:\n    description:\n      - Whether the line should be there or not.\n    type: str\n    choices: [ absent, present ]\n    default: present\n  line:\n    description:\n      - The line to insert/replace into the file.\n      - Required for C(state=present).\n      - If C(backrefs) is set, may contain backreferences that will get\n        expanded with the C(regexp) capture groups if the regexp matches.\n    type: str\n    aliases: [ value ]\n  backrefs:\n    description:\n      - Used with C(state=present).\n      - If set, C(line) can contain backreferences (both positional and named)\n        that will get populated if the C(regexp) matches.\n      - This parameter changes the operation of the module slightly;\n        C(insertbefore) and C(insertafter) will be ignored, and if the C(regexp)\n        does not match anywhere in the file, the file will be left unchanged.\n      - If the C(regexp) does match, the last matching line will be replaced by\n        the expanded line parameter.\n      - Mutually exclusive with C(search_string).\n    type: bool\n    default: no\n    version_added: \"1.1\"\n  insertafter:\n    description:\n      - Used with C(state=present).\n      - If specified, the line will be inserted after the last match of specified regular expression.\n      - If the first match is required, use(firstmatch=yes).\n      - A special value is available; C(EOF) for inserting the line at the end of the file.\n      - If specified regular expression has no matches, EOF will be used instead.\n      - If C(insertbefore) is set, default value C(EOF) will be ignored.\n      - If regular expressions are passed to both C(regexp) and C(insertafter), C(insertafter) is only honored if no match for C(regexp) is found.\n      - May not be used with C(backrefs) or C(insertbefore).\n    type: str\n    choices: [ EOF, '*regex*' ]\n    default: EOF\n  insertbefore:\n    description:\n      - Used with C(state=present).\n      - If specified, the line will be inserted before the last match of specified regular expression.\n      - If the first match is required, use C(firstmatch=yes).\n      - A value is available; C(BOF) for inserting the line at the beginning of the file.\n      - If specified regular expression has no matches, the line will be inserted at the end of the file.\n      - If regular expressions are passed to both C(regexp) and C(insertbefore), C(insertbefore) is only honored if no match for C(regexp) is found.\n      - May not be used with C(backrefs) or C(insertafter).\n    type: str\n    choices: [ BOF, '*regex*' ]\n    version_added: \"1.1\"\n  create:\n    description:\n      - Used with C(state=present).\n      - If specified, the file will be created if it does not already exist.\n      - By default it will fail if the file is missing.\n    type: bool\n    default: no\n  backup:\n    description:\n      - Create a backup file including the timestamp information so you can\n        get the original file back if you somehow clobbered it incorrectly.\n    type: bool\n    default: no\n  firstmatch:\n    description:\n      - Used with C(insertafter) or C(insertbefore).\n      - If set, C(insertafter) and C(insertbefore) will work with the first line that matches the given regular expression.\n    type: bool\n    default: no\n    version_added: \"2.5\"\n  others:\n    description:\n      - All arguments accepted by the M(ansible.builtin.file) module also work here.\n    type: str\nextends_documentation_fragment:\n    - action_common_attributes\n    - action_common_attributes.files\n    - files\n    - validate\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        platforms: posix\n    safe_file_operations:\n        support: full\n    vault:\n        support: none\nnotes:\n  - As of Ansible 2.3, the I(dest) option has been changed to I(path) as default, but I(dest) still works as well.\nseealso:\n- module: ansible.builtin.blockinfile\n- module: ansible.builtin.copy\n- module: ansible.builtin.file\n- module: ansible.builtin.replace\n- module: ansible.builtin.template\n- module: community.windows.win_lineinfile\nauthor:\n    - Daniel Hokka Zakrissoni (@dhozac)\n    - Ahti Kitsik (@ahtik)\n    - Jose Angel Munoz (@imjoseangel)\n","return":"#"},{"normalizedName":"Meta","module":"meta","short_description":"Execute Ansible 'actions'","description":["Meta tasks are a special kind of task which can influence Ansible internal execution or state.","Meta tasks can be used anywhere within your playbook.","This module is also supported for Windows targets."],"options":{"free_form":{"normalizedName":"FreeForm","structTag":"`yaml:\"free_form,omitempty\" json:\"free_form,omitempty\"`","goType":"string","goElements":"","description":["This module takes a free form command, as a string. There is not an actual option named \"free form\".  See the examples!","C(flush_handlers) makes Ansible run any handler tasks which have thus far been notified. Ansible inserts these tasks internally at certain points to implicitly trigger handler runs (after pre/post tasks, the final role execution, and the main tasks section of your plays).","C(refresh_inventory) (added in Ansible 2.0) forces the reload of the inventory, which in the case of dynamic inventory scripts means they will be re-executed. If the dynamic inventory script is using a cache, Ansible cannot know this and has no way of refreshing it (you can disable the cache or, if available for your specific inventory datasource (e.g. aws), you can use the an inventory plugin instead of an inventory script). This is mainly useful when additional hosts are created and users wish to use them instead of using the M(ansible.builtin.add_host) module.","C(noop) (added in Ansible 2.0) This literally does 'nothing'. It is mainly used internally and not recommended for general use.","C(clear_facts) (added in Ansible 2.1) causes the gathered facts for the hosts specified in the play's list of hosts to be cleared, including the fact cache.","C(clear_host_errors) (added in Ansible 2.1) clears the failed state (if any) from hosts specified in the play's list of hosts.","C(end_play) (added in Ansible 2.2) causes the play to end without failing the host(s). Note that this affects all hosts.","C(reset_connection) (added in Ansible 2.3) interrupts a persistent connection (i.e. ssh + control persist)","C(end_host) (added in Ansible 2.8) is a per-host variation of C(end_play). Causes the play to end for the current host without failing it.","C(end_batch) (added in Ansible 2.12) causes the current batch (see C(serial)) to end without failing the host(s). Note that with C(serial=0) or undefined this behaves the same as C(end_play)."],"type":"","required":true,"default":null,"elements":"","aliases":null}},"returns":{},"doc":"\nmodule: meta\nshort_description: Execute Ansible 'actions'\nversion_added: '1.2'\ndescription:\n    - Meta tasks are a special kind of task which can influence Ansible internal execution or state.\n    - Meta tasks can be used anywhere within your playbook.\n    - This module is also supported for Windows targets.\noptions:\n  free_form:\n    description:\n        - This module takes a free form command, as a string. There is not an actual option named \"free form\".  See the examples!\n        - C(flush_handlers) makes Ansible run any handler tasks which have thus far been notified. Ansible inserts these tasks internally at certain\n          points to implicitly trigger handler runs (after pre/post tasks, the final role execution, and the main tasks section of your plays).\n        - C(refresh_inventory) (added in Ansible 2.0) forces the reload of the inventory, which in the case of dynamic inventory scripts means they will be\n          re-executed. If the dynamic inventory script is using a cache, Ansible cannot know this and has no way of refreshing it (you can disable the cache\n          or, if available for your specific inventory datasource (e.g. aws), you can use the an inventory plugin instead of an inventory script).\n          This is mainly useful when additional hosts are created and users wish to use them instead of using the M(ansible.builtin.add_host) module.\n        - C(noop) (added in Ansible 2.0) This literally does 'nothing'. It is mainly used internally and not recommended for general use.\n        - C(clear_facts) (added in Ansible 2.1) causes the gathered facts for the hosts specified in the play's list of hosts to be cleared,\n          including the fact cache.\n        - C(clear_host_errors) (added in Ansible 2.1) clears the failed state (if any) from hosts specified in the play's list of hosts.\n        - C(end_play) (added in Ansible 2.2) causes the play to end without failing the host(s). Note that this affects all hosts.\n        - C(reset_connection) (added in Ansible 2.3) interrupts a persistent connection (i.e. ssh + control persist)\n        - C(end_host) (added in Ansible 2.8) is a per-host variation of C(end_play). Causes the play to end for the current host without failing it.\n        - C(end_batch) (added in Ansible 2.12) causes the current batch (see C(serial)) to end without failing the host(s).\n          Note that with C(serial=0) or undefined this behaves the same as C(end_play).\n    choices: [ clear_facts, clear_host_errors, end_host, end_play, flush_handlers, noop, refresh_inventory, reset_connection, end_batch ]\n    required: true\nextends_documentation_fragment:\n    - action_common_attributes\n    - action_common_attributes.conn\n    - action_common_attributes.flow\n    - action_core\nattributes:\n    action:\n      support: none\n    bypass_host_loop:\n      details: Some of the subactions ignore the host loop, see the description above for each specific action for the exceptions\n      support: partial\n    bypass_task_loop:\n      details: Most of the subactions ignore the task loop, see the description above for each specific action for the exceptions\n      support: partial\n    check_mode:\n      details: While these actions don't modify the targets directly they do change possible states of the target within the run\n      support: partial\n    delegation:\n      support: none\n    diff_mode:\n      support: none\n    ignore_conditional:\n      details: Only some options support conditionals and when they do they act 'bypassing the host loop', taking the values from first available host\n      support: partial\n    connection:\n      details: Most options in this action do not use a connection, except C(reset_connection) which still does not connect to the remote\n      support: partial\nnotes:\n    - C(clear_facts) will remove the persistent facts from M(ansible.builtin.set_fact) using C(cacheable=True),\n      but not the current host variable it creates for the current run.\n    - Skipping C(meta) tasks with tags is not supported before Ansible 2.11.\nseealso:\n- module: ansible.builtin.assert\n- module: ansible.builtin.fail\nauthor:\n    - Ansible Core Team\n","return":""},{"normalizedName":"Package","module":"package","short_description":"Generic OS package manager","description":["This modules manages packages on a target without specifying a package manager module (like M(ansible.builtin.yum), M(ansible.builtin.apt), ...). It is convenient to use in an heterogeneous environment of machines without having to create a specific task for each package manager. C(package) calls behind the module for the package manager used by the operating system discovered by the module M(ansible.builtin.setup).  If C(setup) was not yet run, C(package) will run it.","This module acts as a proxy to the underlying package manager module. While all arguments will be passed to the underlying module, not all modules support the same arguments. This documentation only covers the minimum intersection of module arguments that all packaging modules support.","For Windows targets, use the M(ansible.windows.win_package) module instead."],"options":{"name":{"normalizedName":"Name","structTag":"`yaml:\"name,omitempty\" json:\"name,omitempty\"`","goType":"string","goElements":"","description":["Package name, or package specifier with version.","Syntax varies with package manager. For example C(name-1.0) or C(name=1.0).","Package names also vary with package manager; this module will not \"translate\" them per distro. For example C(libyaml-dev), C(libyaml-devel)."],"type":"","required":true,"default":null,"elements":"","aliases":null},"state":{"normalizedName":"State","structTag":"`yaml:\"state,omitempty\" json:\"state,omitempty\"`","goType":"string","goElements":"","description":["Whether to install (C(present)), or remove (C(absent)) a package.","You can use other states like C(latest) ONLY if they are supported by the underlying package module(s) executed."],"type":"","required":true,"default":null,"elements":"","aliases":null},"use":{"normalizedName":"Use","structTag":"`yaml:\"use,omitempty\" json:\"use,omitempty\"`","goType":"string","goElements":"","description":["The required package manager module to use (C(yum), C(apt), and so on). The default 'auto' will use existing facts or try to autodetect it.","You should only use this field if the automatic selection is not working for some reason."],"type":"","required":false,"default":"auto","elements":"","aliases":null}},"returns":{},"doc":"\n---\nmodule: package\nversion_added: 2.0\nauthor:\n    - Ansible Core Team\nshort_description: Generic OS package manager\ndescription:\n    - This modules manages packages on a target without specifying a package manager module (like M(ansible.builtin.yum), M(ansible.builtin.apt), ...).\n      It is convenient to use in an heterogeneous environment of machines without having to create a specific task for\n      each package manager. C(package) calls behind the module for the package manager used by the operating system\n      discovered by the module M(ansible.builtin.setup).  If C(setup) was not yet run, C(package) will run it.\n    - This module acts as a proxy to the underlying package manager module. While all arguments will be passed to the\n      underlying module, not all modules support the same arguments. This documentation only covers the minimum intersection\n      of module arguments that all packaging modules support.\n    - For Windows targets, use the M(ansible.windows.win_package) module instead.\noptions:\n  name:\n    description:\n      - Package name, or package specifier with version.\n      - Syntax varies with package manager. For example C(name-1.0) or C(name=1.0).\n      - Package names also vary with package manager; this module will not \"translate\" them per distro. For example C(libyaml-dev), C(libyaml-devel).\n    required: true\n  state:\n    description:\n      - Whether to install (C(present)), or remove (C(absent)) a package.\n      - You can use other states like C(latest) ONLY if they are supported by the underlying package module(s) executed.\n    required: true\n  use:\n    description:\n      - The required package manager module to use (C(yum), C(apt), and so on). The default 'auto' will use existing facts or try to autodetect it.\n      - You should only use this field if the automatic selection is not working for some reason.\n    default: auto\nrequirements:\n    - Whatever is required for the package plugins specific for each system.\nextends_documentation_fragment:\n  -  action_common_attributes\n  -  action_common_attributes.flow\nattributes:\n    action:\n        support: full\n    async:\n        support: full\n    bypass_host_loop:\n        support: none\n    check_mode:\n        details: support depends on the underlying plugin invoked\n        support: N/A\n    diff_mode:\n        details: support depends on the underlying plugin invoked\n        support: N/A\n    platform:\n        details: The support depends on the availability for the specific plugin for each platform and if fact gathering is able to detect it\n        platforms: all\nnotes:\n    - While C(package) abstracts package managers to ease dealing with multiple distributions, package name often differs for the same software.\n\n","return":""},{"normalizedName":"PackageFacts","module":"package_facts","short_description":"Package information as facts","description":["Return information about installed packages as facts."],"options":{"manager":{"normalizedName":"Manager","structTag":"`yaml:\"manager,omitempty\" json:\"manager,omitempty\"`","goType":"[]string","goElements":"","description":["The package manager used by the system so we can query the package information.","Since 2.8 this is a list and can support multiple package managers per system.","The 'portage' and 'pkg' options were added in version 2.8.","The 'apk' option was added in version 2.11.","The 'pkg_info' option was added in version 2.13."],"type":"list","required":false,"default":["auto"],"elements":"str","aliases":null},"strategy":{"normalizedName":"Strategy","structTag":"`yaml:\"strategy,omitempty\" json:\"strategy,omitempty\"`","goType":"string","goElements":"","description":["This option controls how the module queries the package managers on the system. C(first) means it will return only information for the first supported package manager available. C(all) will return information for all supported and available package managers on the system."],"type":"str","required":false,"default":"first","elements":"","aliases":null}},"returns":{"ansible_facts":{"normalizedName":"AnsibleFacts","description":"Facts to add to ansible_facts.","returned":"always","type":"complex","sample":null,"goType":"interface{}","structTag":"`yaml:\"ansible_facts,omitempty\" json:\"ansible_facts,omitempty\"`"}},"doc":"\nmodule: package_facts\nshort_description: Package information as facts\ndescription:\n  - Return information about installed packages as facts.\noptions:\n  manager:\n    description:\n      - The package manager used by the system so we can query the package information.\n      - Since 2.8 this is a list and can support multiple package managers per system.\n      - The 'portage' and 'pkg' options were added in version 2.8.\n      - The 'apk' option was added in version 2.11.\n      - The 'pkg_info' option was added in version 2.13.\n    default: ['auto']\n    choices: ['auto', 'rpm', 'apt', 'portage', 'pkg', 'pacman', 'apk', 'pkg_info']\n    type: list\n    elements: str\n  strategy:\n    description:\n      - This option controls how the module queries the package managers on the system.\n        C(first) means it will return only information for the first supported package manager available.\n        C(all) will return information for all supported and available package managers on the system.\n    choices: ['first', 'all']\n    default: 'first'\n    type: str\n    version_added: \"2.8\"\nversion_added: \"2.5\"\nrequirements:\n    - For 'portage' support it requires the C(qlist) utility, which is part of 'app-portage/portage-utils'.\n    - For Debian-based systems C(python-apt) package must be installed on targeted hosts.\nauthor:\n  - Matthew Jones (@matburt)\n  - Brian Coca (@bcoca)\n  - Adam Miller (@maxamillion)\nextends_documentation_fragment:\n  -  action_common_attributes\n  -  action_common_attributes.facts\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    facts:\n        support: full\n    platform:\n        platforms: posix\n","return":"\nansible_facts:\n  description: Facts to add to ansible_facts.\n  returned: always\n  type: complex\n  contains:\n    packages:\n      description:\n        - Maps the package name to a non-empty list of dicts with package information.\n        - Every dict in the list corresponds to one installed version of the package.\n        - The fields described below are present for all package managers. Depending on the\n          package manager, there might be more fields for a package.\n      returned: when operating system level package manager is specified or auto detected manager\n      type: dict\n      contains:\n        name:\n          description: The package's name.\n          returned: always\n          type: str\n        version:\n          description: The package's version.\n          returned: always\n          type: str\n        source:\n          description: Where information on the package came from.\n          returned: always\n          type: str\n      sample: |-\n        {\n          \"packages\": {\n            \"kernel\": [\n              {\n                \"name\": \"kernel\",\n                \"source\": \"rpm\",\n                \"version\": \"3.10.0\",\n                ...\n              },\n              {\n                \"name\": \"kernel\",\n                \"source\": \"rpm\",\n                \"version\": \"3.10.0\",\n                ...\n              },\n              ...\n            ],\n            \"kernel-tools\": [\n              {\n                \"name\": \"kernel-tools\",\n                \"source\": \"rpm\",\n                \"version\": \"3.10.0\",\n                ...\n              }\n            ],\n            ...\n          }\n        }\n        # Sample rpm\n        {\n          \"packages\": {\n            \"kernel\": [\n              {\n                \"arch\": \"x86_64\",\n                \"epoch\": null,\n                \"name\": \"kernel\",\n                \"release\": \"514.26.2.el7\",\n                \"source\": \"rpm\",\n                \"version\": \"3.10.0\"\n              },\n              {\n                \"arch\": \"x86_64\",\n                \"epoch\": null,\n                \"name\": \"kernel\",\n                \"release\": \"514.16.1.el7\",\n                \"source\": \"rpm\",\n                \"version\": \"3.10.0\"\n              },\n              {\n                \"arch\": \"x86_64\",\n                \"epoch\": null,\n                \"name\": \"kernel\",\n                \"release\": \"514.10.2.el7\",\n                \"source\": \"rpm\",\n                \"version\": \"3.10.0\"\n              },\n              {\n                \"arch\": \"x86_64\",\n                \"epoch\": null,\n                \"name\": \"kernel\",\n                \"release\": \"514.21.1.el7\",\n                \"source\": \"rpm\",\n                \"version\": \"3.10.0\"\n              },\n              {\n                \"arch\": \"x86_64\",\n                \"epoch\": null,\n                \"name\": \"kernel\",\n                \"release\": \"693.2.2.el7\",\n                \"source\": \"rpm\",\n                \"version\": \"3.10.0\"\n              }\n            ],\n            \"kernel-tools\": [\n              {\n                \"arch\": \"x86_64\",\n                \"epoch\": null,\n                \"name\": \"kernel-tools\",\n                \"release\": \"693.2.2.el7\",\n                \"source\": \"rpm\",\n                \"version\": \"3.10.0\"\n              }\n            ],\n            \"kernel-tools-libs\": [\n              {\n                \"arch\": \"x86_64\",\n                \"epoch\": null,\n                \"name\": \"kernel-tools-libs\",\n                \"release\": \"693.2.2.el7\",\n                \"source\": \"rpm\",\n                \"version\": \"3.10.0\"\n              }\n            ],\n          }\n        }\n        # Sample deb\n        {\n          \"packages\": {\n            \"libbz2-1.0\": [\n              {\n                \"version\": \"1.0.6-5\",\n                \"source\": \"apt\",\n                \"arch\": \"amd64\",\n                \"name\": \"libbz2-1.0\"\n              }\n            ],\n            \"patch\": [\n              {\n                \"version\": \"2.7.1-4ubuntu1\",\n                \"source\": \"apt\",\n                \"arch\": \"amd64\",\n                \"name\": \"patch\"\n              }\n            ],\n          }\n        }\n        # Sample pkg_info\n        {\n          \"packages\": {\n            \"curl\": [\n              {\n                  \"name\": \"curl\",\n                  \"source\": \"pkg_info\",\n                  \"version\": \"7.79.0\"\n              }\n            ],\n            \"intel-firmware\": [\n              {\n                  \"name\": \"intel-firmware\",\n                  \"source\": \"pkg_info\",\n                  \"version\": \"20210608v0\"\n              }\n            ],\n          }\n        }\n"},{"normalizedName":"Pip","module":"pip","short_description":"Manages Python library dependencies","description":["Manage Python library dependencies. To use this module, one of the following keys is required: C(name) or C(requirements)."],"options":{"chdir":{"normalizedName":"Chdir","structTag":"`yaml:\"chdir,omitempty\" json:\"chdir,omitempty\"`","goType":"string","goElements":"","description":["cd into this directory before running the command"],"type":"path","required":false,"default":null,"elements":"","aliases":null},"editable":{"normalizedName":"Editable","structTag":"`yaml:\"editable,omitempty\" json:\"editable,omitempty\"`","goType":"bool","goElements":"","description":["Pass the editable flag."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"executable":{"normalizedName":"Executable","structTag":"`yaml:\"executable,omitempty\" json:\"executable,omitempty\"`","goType":"string","goElements":"","description":["The explicit executable or pathname for the pip executable, if different from the Ansible Python interpreter. For example C(pip3.3), if there are both Python 2.7 and 3.3 installations in the system and you want to run pip for the Python 3.3 installation.","Mutually exclusive with I(virtualenv) (added in 2.1).","Does not affect the Ansible Python interpreter.","The setuptools package must be installed for both the Ansible Python interpreter and for the version of Python specified by this option."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"extra_args":{"normalizedName":"ExtraArgs","structTag":"`yaml:\"extra_args,omitempty\" json:\"extra_args,omitempty\"`","goType":"string","goElements":"","description":["Extra arguments passed to pip."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"name":{"normalizedName":"Name","structTag":"`yaml:\"name,omitempty\" json:\"name,omitempty\"`","goType":"[]string","goElements":"","description":["The name of a Python library to install or the url(bzr+,hg+,git+,svn+) of the remote package.","This can be a list (since 2.2) and contain version specifiers (since 2.7)."],"type":"list","required":false,"default":null,"elements":"str","aliases":null},"requirements":{"normalizedName":"Requirements","structTag":"`yaml:\"requirements,omitempty\" json:\"requirements,omitempty\"`","goType":"string","goElements":"","description":["The path to a pip requirements file, which should be local to the remote system. File can be specified as a relative path if using the chdir option."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"state":{"normalizedName":"State","structTag":"`yaml:\"state,omitempty\" json:\"state,omitempty\"`","goType":"string","goElements":"","description":["The state of module","The 'forcereinstall' option is only available in Ansible 2.1 and above."],"type":"str","required":false,"default":"present","elements":"","aliases":null},"umask":{"normalizedName":"Umask","structTag":"`yaml:\"umask,omitempty\" json:\"umask,omitempty\"`","goType":"string","goElements":"","description":["The system umask to apply before installing the pip package. This is useful, for example, when installing on systems that have a very restrictive umask by default (e.g., \"0077\") and you want to pip install packages which are to be used by all users. Note that this requires you to specify desired umask mode as an octal string, (e.g., \"0022\")."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"version":{"normalizedName":"Version","structTag":"`yaml:\"version,omitempty\" json:\"version,omitempty\"`","goType":"string","goElements":"","description":["The version number to install of the Python library specified in the I(name) parameter."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"virtualenv":{"normalizedName":"Virtualenv","structTag":"`yaml:\"virtualenv,omitempty\" json:\"virtualenv,omitempty\"`","goType":"string","goElements":"","description":["An optional path to a I(virtualenv) directory to install into. It cannot be specified together with the 'executable' parameter (added in 2.1). If the virtualenv does not exist, it will be created before installing packages. The optional virtualenv_site_packages, virtualenv_command, and virtualenv_python options affect the creation of the virtualenv."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"virtualenv_command":{"normalizedName":"VirtualenvCommand","structTag":"`yaml:\"virtualenv_command,omitempty\" json:\"virtualenv_command,omitempty\"`","goType":"string","goElements":"","description":["The command or a pathname to the command to create the virtual environment with. For example C(pyvenv), C(virtualenv), C(virtualenv2), C(~/bin/virtualenv), C(/usr/local/bin/virtualenv)."],"type":"path","required":false,"default":"virtualenv","elements":"","aliases":null},"virtualenv_python":{"normalizedName":"VirtualenvPython","structTag":"`yaml:\"virtualenv_python,omitempty\" json:\"virtualenv_python,omitempty\"`","goType":"string","goElements":"","description":["The Python executable used for creating the virtual environment. For example C(python3.5), C(python2.7). When not specified, the Python version used to run the ansible module is used. This parameter should not be used when C(virtualenv_command) is using C(pyvenv) or the C(-m venv) module."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"virtualenv_site_packages":{"normalizedName":"VirtualenvSitePackages","structTag":"`yaml:\"virtualenv_site_packages,omitempty\" json:\"virtualenv_site_packages,omitempty\"`","goType":"bool","goElements":"","description":["Whether the virtual environment will inherit packages from the global site-packages directory.  Note that if this setting is changed on an already existing virtual environment it will not have any effect, the environment must be deleted and newly created."],"type":"bool","required":false,"default":"no","elements":"","aliases":null}},"returns":{"cmd":{"normalizedName":"Cmd","description":"pip command used by the module","returned":"success","type":"str","sample":"pip2 install ansible six","goType":"string","structTag":"`yaml:\"cmd,omitempty\" json:\"cmd,omitempty\"`"},"name":{"normalizedName":"Name","description":"list of python modules targetted by pip","returned":"success","type":"list","sample":["ansible","six"],"goType":"[]map[string]interface{}","structTag":"`yaml:\"name,omitempty\" json:\"name,omitempty\"`"},"requirements":{"normalizedName":"Requirements","description":"Path to the requirements file","returned":"success, if a requirements file was provided","type":"str","sample":"/srv/git/project/requirements.txt","goType":"string","structTag":"`yaml:\"requirements,omitempty\" json:\"requirements,omitempty\"`"},"version":{"normalizedName":"Version","description":"Version of the package specified in 'name'","returned":"success, if a name and version were provided","type":"str","sample":"2.5.1","goType":"string","structTag":"`yaml:\"version,omitempty\" json:\"version,omitempty\"`"},"virtualenv":{"normalizedName":"Virtualenv","description":"Path to the virtualenv","returned":"success, if a virtualenv path was provided","type":"str","sample":"/tmp/virtualenv","goType":"string","structTag":"`yaml:\"virtualenv,omitempty\" json:\"virtualenv,omitempty\"`"}},"doc":"\n---\nmodule: pip\nshort_description: Manages Python library dependencies\ndescription:\n     - \"Manage Python library dependencies. To use this module, one of the following keys is required: C(name)\n       or C(requirements).\"\nversion_added: \"0.7\"\noptions:\n  name:\n    description:\n      - The name of a Python library to install or the url(bzr+,hg+,git+,svn+) of the remote package.\n      - This can be a list (since 2.2) and contain version specifiers (since 2.7).\n    type: list\n    elements: str\n  version:\n    description:\n      - The version number to install of the Python library specified in the I(name) parameter.\n    type: str\n  requirements:\n    description:\n      - The path to a pip requirements file, which should be local to the remote system.\n        File can be specified as a relative path if using the chdir option.\n    type: str\n  virtualenv:\n    description:\n      - An optional path to a I(virtualenv) directory to install into.\n        It cannot be specified together with the 'executable' parameter\n        (added in 2.1).\n        If the virtualenv does not exist, it will be created before installing\n        packages. The optional virtualenv_site_packages, virtualenv_command,\n        and virtualenv_python options affect the creation of the virtualenv.\n    type: path\n  virtualenv_site_packages:\n    description:\n      - Whether the virtual environment will inherit packages from the\n        global site-packages directory.  Note that if this setting is\n        changed on an already existing virtual environment it will not\n        have any effect, the environment must be deleted and newly\n        created.\n    type: bool\n    default: \"no\"\n    version_added: \"1.0\"\n  virtualenv_command:\n    description:\n      - The command or a pathname to the command to create the virtual\n        environment with. For example C(pyvenv), C(virtualenv),\n        C(virtualenv2), C(~/bin/virtualenv), C(/usr/local/bin/virtualenv).\n    type: path\n    default: virtualenv\n    version_added: \"1.1\"\n  virtualenv_python:\n    description:\n      - The Python executable used for creating the virtual environment.\n        For example C(python3.5), C(python2.7). When not specified, the\n        Python version used to run the ansible module is used. This parameter\n        should not be used when C(virtualenv_command) is using C(pyvenv) or\n        the C(-m venv) module.\n    type: str\n    version_added: \"2.0\"\n  state:\n    description:\n      - The state of module\n      - The 'forcereinstall' option is only available in Ansible 2.1 and above.\n    type: str\n    choices: [ absent, forcereinstall, latest, present ]\n    default: present\n  extra_args:\n    description:\n      - Extra arguments passed to pip.\n    type: str\n    version_added: \"1.0\"\n  editable:\n    description:\n      - Pass the editable flag.\n    type: bool\n    default: 'no'\n    version_added: \"2.0\"\n  chdir:\n    description:\n      - cd into this directory before running the command\n    type: path\n    version_added: \"1.3\"\n  executable:\n    description:\n      - The explicit executable or pathname for the pip executable,\n        if different from the Ansible Python interpreter. For\n        example C(pip3.3), if there are both Python 2.7 and 3.3 installations\n        in the system and you want to run pip for the Python 3.3 installation.\n      - Mutually exclusive with I(virtualenv) (added in 2.1).\n      - Does not affect the Ansible Python interpreter.\n      - The setuptools package must be installed for both the Ansible Python interpreter\n        and for the version of Python specified by this option.\n    type: path\n    version_added: \"1.3\"\n  umask:\n    description:\n      - The system umask to apply before installing the pip package. This is\n        useful, for example, when installing on systems that have a very\n        restrictive umask by default (e.g., \"0077\") and you want to pip install\n        packages which are to be used by all users. Note that this requires you\n        to specify desired umask mode as an octal string, (e.g., \"0022\").\n    type: str\n    version_added: \"2.1\"\nextends_documentation_fragment:\n  -  action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    platform:\n        platforms: posix\nnotes:\n   - The virtualenv (U(http://www.virtualenv.org/)) must be\n     installed on the remote host if the virtualenv parameter is specified and\n     the virtualenv needs to be created.\n   - Although it executes using the Ansible Python interpreter, the pip module shells out to\n     run the actual pip command, so it can use any pip version you specify with I(executable).\n     By default, it uses the pip version for the Ansible Python interpreter. For example, pip3 on python 3, and pip2 or pip on python 2.\n   - The interpreter used by Ansible\n     (see R(ansible_python_interpreter, ansible_python_interpreter))\n     requires the setuptools package, regardless of the version of pip set with\n     the I(executable) option.\nrequirements:\n- pip\n- virtualenv\n- setuptools\nauthor:\n- Matt Wright (@mattupstate)\n","return":"\ncmd:\n  description: pip command used by the module\n  returned: success\n  type: str\n  sample: pip2 install ansible six\nname:\n  description: list of python modules targetted by pip\n  returned: success\n  type: list\n  sample: ['ansible', 'six']\nrequirements:\n  description: Path to the requirements file\n  returned: success, if a requirements file was provided\n  type: str\n  sample: \"/srv/git/project/requirements.txt\"\nversion:\n  description: Version of the package specified in 'name'\n  returned: success, if a name and version were provided\n  type: str\n  sample: \"2.5.1\"\nvirtualenv:\n  description: Path to the virtualenv\n  returned: success, if a virtualenv path was provided\n  type: str\n  sample: \"/tmp/virtualenv\"\n"},{"normalizedName":"Reboot","module":"reboot","short_description":"Reboot a machine","description":["Reboot a machine, wait for it to go down, come back up, and respond to commands.","For Windows targets, use the M(ansible.windows.win_reboot) module instead."],"options":{"boot_time_command":{"normalizedName":"BootTimeCommand","structTag":"`yaml:\"boot_time_command,omitempty\" json:\"boot_time_command,omitempty\"`","goType":"string","goElements":"","description":["Command to run that returns a unique string indicating the last time the system was booted.","Setting this to a command that has different output each time it is run will cause the task to fail."],"type":"str","required":false,"default":"cat /proc/sys/kernel/random/boot_id","elements":"","aliases":null},"connect_timeout":{"normalizedName":"ConnectTimeout","structTag":"`yaml:\"connect_timeout,omitempty\" json:\"connect_timeout,omitempty\"`","goType":"int","goElements":"","description":["Maximum seconds to wait for a successful connection to the managed hosts before trying again.","If unspecified, the default setting for the underlying connection plugin is used."],"type":"int","required":false,"default":null,"elements":"","aliases":null},"msg":{"normalizedName":"Msg","structTag":"`yaml:\"msg,omitempty\" json:\"msg,omitempty\"`","goType":"string","goElements":"","description":["Message to display to users before reboot."],"type":"str","required":false,"default":"Reboot initiated by Ansible","elements":"","aliases":null},"post_reboot_delay":{"normalizedName":"PostRebootDelay","structTag":"`yaml:\"post_reboot_delay,omitempty\" json:\"post_reboot_delay,omitempty\"`","goType":"int","goElements":"","description":["Seconds to wait after the reboot command was successful before attempting to validate the system rebooted successfully.","This is useful if you want wait for something to settle despite your connection already working."],"type":"int","required":false,"default":0,"elements":"","aliases":null},"pre_reboot_delay":{"normalizedName":"PreRebootDelay","structTag":"`yaml:\"pre_reboot_delay,omitempty\" json:\"pre_reboot_delay,omitempty\"`","goType":"int","goElements":"","description":["Seconds to wait before reboot. Passed as a parameter to the reboot command.","On Linux, macOS and OpenBSD, this is converted to minutes and rounded down. If less than 60, it will be set to 0.","On Solaris and FreeBSD, this will be seconds."],"type":"int","required":false,"default":0,"elements":"","aliases":null},"reboot_command":{"normalizedName":"RebootCommand","structTag":"`yaml:\"reboot_command,omitempty\" json:\"reboot_command,omitempty\"`","goType":"string","goElements":"","description":["Command to run that reboots the system, including any parameters passed to the command.","Can be an absolute path to the command or just the command name. If an absolute path to the command is not given, C(search_paths) on the target system will be searched to find the absolute path.","This will cause C(pre_reboot_delay), C(post_reboot_delay), and C(msg) to be ignored."],"type":"str","required":false,"default":"[determined based on target OS]","elements":"","aliases":null},"reboot_timeout":{"normalizedName":"RebootTimeout","structTag":"`yaml:\"reboot_timeout,omitempty\" json:\"reboot_timeout,omitempty\"`","goType":"int","goElements":"","description":["Maximum seconds to wait for machine to reboot and respond to a test command.","This timeout is evaluated separately for both reboot verification and test command success so the maximum execution time for the module is twice this amount."],"type":"int","required":false,"default":600,"elements":"","aliases":null},"search_paths":{"normalizedName":"SearchPaths","structTag":"`yaml:\"search_paths,omitempty\" json:\"search_paths,omitempty\"`","goType":"[]string","goElements":"","description":["Paths to search on the remote machine for the C(shutdown) command.","I(Only) these paths will be searched for the C(shutdown) command. C(PATH) is ignored in the remote node when searching for the C(shutdown) command."],"type":"list","required":false,"default":["/sbin","/bin","/usr/sbin","/usr/bin","/usr/local/sbin"],"elements":"str","aliases":null},"test_command":{"normalizedName":"TestCommand","structTag":"`yaml:\"test_command,omitempty\" json:\"test_command,omitempty\"`","goType":"string","goElements":"","description":["Command to run on the rebooted host and expect success from to determine the machine is ready for further tasks."],"type":"str","required":false,"default":"whoami","elements":"","aliases":null}},"returns":{"elapsed":{"normalizedName":"Elapsed","description":"The number of seconds that elapsed waiting for the system to be rebooted.","returned":"always","type":"int","sample":23,"goType":"int","structTag":"`yaml:\"elapsed,omitempty\" json:\"elapsed,omitempty\"`"},"rebooted":{"normalizedName":"Rebooted","description":"true if the machine was rebooted","returned":"always","type":"bool","sample":true,"goType":"bool","structTag":"`yaml:\"rebooted,omitempty\" json:\"rebooted,omitempty\"`"}},"doc":"\nmodule: reboot\nshort_description: Reboot a machine\nnotes:\n  - C(PATH) is ignored on the remote node when searching for the C(shutdown) command. Use C(search_paths)\n    to specify locations to search if the default paths do not work.\ndescription:\n    - Reboot a machine, wait for it to go down, come back up, and respond to commands.\n    - For Windows targets, use the M(ansible.windows.win_reboot) module instead.\nversion_added: \"2.7\"\noptions:\n  pre_reboot_delay:\n    description:\n      - Seconds to wait before reboot. Passed as a parameter to the reboot command.\n      - On Linux, macOS and OpenBSD, this is converted to minutes and rounded down. If less than 60, it will be set to 0.\n      - On Solaris and FreeBSD, this will be seconds.\n    type: int\n    default: 0\n  post_reboot_delay:\n    description:\n      - Seconds to wait after the reboot command was successful before attempting to validate the system rebooted successfully.\n      - This is useful if you want wait for something to settle despite your connection already working.\n    type: int\n    default: 0\n  reboot_timeout:\n    description:\n      - Maximum seconds to wait for machine to reboot and respond to a test command.\n      - This timeout is evaluated separately for both reboot verification and test command success so the\n        maximum execution time for the module is twice this amount.\n    type: int\n    default: 600\n  connect_timeout:\n    description:\n      - Maximum seconds to wait for a successful connection to the managed hosts before trying again.\n      - If unspecified, the default setting for the underlying connection plugin is used.\n    type: int\n  test_command:\n    description:\n      - Command to run on the rebooted host and expect success from to determine the machine is ready for\n        further tasks.\n    type: str\n    default: whoami\n  msg:\n    description:\n      - Message to display to users before reboot.\n    type: str\n    default: Reboot initiated by Ansible\n\n  search_paths:\n    description:\n      - Paths to search on the remote machine for the C(shutdown) command.\n      - I(Only) these paths will be searched for the C(shutdown) command. C(PATH) is ignored in the remote node when searching for the C(shutdown) command.\n    type: list\n    elements: str\n    default: ['/sbin', '/bin', '/usr/sbin', '/usr/bin', '/usr/local/sbin']\n    version_added: '2.8'\n\n  boot_time_command:\n    description:\n      - Command to run that returns a unique string indicating the last time the system was booted.\n      - Setting this to a command that has different output each time it is run will cause the task to fail.\n    type: str\n    default: 'cat /proc/sys/kernel/random/boot_id'\n    version_added: '2.10'\n\n  reboot_command:\n    description:\n      - Command to run that reboots the system, including any parameters passed to the command.\n      - Can be an absolute path to the command or just the command name. If an absolute path to the\n        command is not given, C(search_paths) on the target system will be searched to find the absolute path.\n      - This will cause C(pre_reboot_delay), C(post_reboot_delay), and C(msg) to be ignored.\n    type: str\n    default: '[determined based on target OS]'\n    version_added: '2.11'\nextends_documentation_fragment:\n  -  action_common_attributes\n  -  action_common_attributes.flow\nattributes:\n    action:\n        support: full\n    async:\n        support: none\n    bypass_host_loop:\n        support: none\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    platform:\n        platforms: posix\nseealso:\n- module: ansible.windows.win_reboot\nauthor:\n    - Matt Davis (@nitzmahone)\n    - Sam Doran (@samdoran)\n","return":"\nrebooted:\n  description: true if the machine was rebooted\n  returned: always\n  type: bool\n  sample: true\nelapsed:\n  description: The number of seconds that elapsed waiting for the system to be rebooted.\n  returned: always\n  type: int\n  sample: 23\n"},{"normalizedName":"Replace","module":"replace","short_description":"Replace all instances of a particular string in a file using a back-referenced regular expression","description":["This module will replace all instances of a pattern within a file.","It is up to the user to maintain idempotence by ensuring that the same pattern would never match any replacements made."],"options":{"after":{"normalizedName":"After","structTag":"`yaml:\"after,omitempty\" json:\"after,omitempty\"`","goType":"string","goElements":"","description":["If specified, only content after this match will be replaced/removed.","Can be used in combination with C(before).","Uses Python regular expressions; see U(https://docs.python.org/3/library/re.html).","Uses DOTALL, which means the C(.) special character I(can match newlines)."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"backup":{"normalizedName":"Backup","structTag":"`yaml:\"backup,omitempty\" json:\"backup,omitempty\"`","goType":"bool","goElements":"","description":["Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"before":{"normalizedName":"Before","structTag":"`yaml:\"before,omitempty\" json:\"before,omitempty\"`","goType":"string","goElements":"","description":["If specified, only content before this match will be replaced/removed.","Can be used in combination with C(after).","Uses Python regular expressions; see U(https://docs.python.org/3/library/re.html).","Uses DOTALL, which means the C(.) special character I(can match newlines)."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"encoding":{"normalizedName":"Encoding","structTag":"`yaml:\"encoding,omitempty\" json:\"encoding,omitempty\"`","goType":"string","goElements":"","description":["The character encoding for reading and writing the file."],"type":"str","required":false,"default":"utf-8","elements":"","aliases":null},"others":{"normalizedName":"Others","structTag":"`yaml:\"others,omitempty\" json:\"others,omitempty\"`","goType":"string","goElements":"","description":["All arguments accepted by the M(ansible.builtin.file) module also work here."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"path":{"normalizedName":"Path","structTag":"`yaml:\"path,omitempty\" json:\"path,omitempty\"`","goType":"string","goElements":"","description":["The file to modify.","Before Ansible 2.3 this option was only usable as I(dest), I(destfile) and I(name)."],"type":"path","required":true,"default":null,"elements":"","aliases":["dest","destfile","name"]},"regexp":{"normalizedName":"Regexp","structTag":"`yaml:\"regexp,omitempty\" json:\"regexp,omitempty\"`","goType":"string","goElements":"","description":["The regular expression to look for in the contents of the file.","Uses Python regular expressions; see U(https://docs.python.org/3/library/re.html).","Uses MULTILINE mode, which means C(^) and C($) match the beginning and end of the file, as well as the beginning and end respectively of I(each line) of the file.","Does not use DOTALL, which means the C(.) special character matches any character I(except newlines). A common mistake is to assume that a negated character set like C([^#]) will also not match newlines.","In order to exclude newlines, they must be added to the set like C([^#\\n]).","Note that, as of Ansible 2.0, short form tasks should have any escape sequences backslash-escaped in order to prevent them being parsed as string literal escapes. See the examples."],"type":"str","required":true,"default":null,"elements":"","aliases":null},"replace":{"normalizedName":"Replace","structTag":"`yaml:\"replace,omitempty\" json:\"replace,omitempty\"`","goType":"string","goElements":"","description":["The string to replace regexp matches.","May contain backreferences that will get expanded with the regexp capture groups if the regexp matches.","If not set, matches are removed entirely.","Backreferences can be used ambiguously like C(\\1), or explicitly like C(\\g\u003c1\u003e)."],"type":"str","required":false,"default":null,"elements":"","aliases":null}},"returns":{},"doc":"\n---\nmodule: replace\nauthor: Evan Kaufman (@EvanK)\nextends_documentation_fragment:\n    - action_common_attributes\n    - action_common_attributes.files\n    - files\n    - validate\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        platforms: posix\n    safe_file_operations:\n        support: full\n    vault:\n        support: none\nshort_description: Replace all instances of a particular string in a\n                   file using a back-referenced regular expression\ndescription:\n  - This module will replace all instances of a pattern within a file.\n  - It is up to the user to maintain idempotence by ensuring that the\n    same pattern would never match any replacements made.\nversion_added: \"1.6\"\noptions:\n  path:\n    description:\n      - The file to modify.\n      - Before Ansible 2.3 this option was only usable as I(dest), I(destfile) and I(name).\n    type: path\n    required: true\n    aliases: [ dest, destfile, name ]\n  regexp:\n    description:\n      - The regular expression to look for in the contents of the file.\n      - Uses Python regular expressions; see\n        U(https://docs.python.org/3/library/re.html).\n      - Uses MULTILINE mode, which means C(^) and C($) match the beginning\n        and end of the file, as well as the beginning and end respectively\n        of I(each line) of the file.\n      - Does not use DOTALL, which means the C(.) special character matches\n        any character I(except newlines). A common mistake is to assume that\n        a negated character set like C([^#]) will also not match newlines.\n      - In order to exclude newlines, they must be added to the set like C([^#\\n]).\n      - Note that, as of Ansible 2.0, short form tasks should have any escape\n        sequences backslash-escaped in order to prevent them being parsed\n        as string literal escapes. See the examples.\n    type: str\n    required: true\n  replace:\n    description:\n      - The string to replace regexp matches.\n      - May contain backreferences that will get expanded with the regexp capture groups if the regexp matches.\n      - If not set, matches are removed entirely.\n      - Backreferences can be used ambiguously like C(\\1), or explicitly like C(\\g\u003c1\u003e).\n    type: str\n  after:\n    description:\n      - If specified, only content after this match will be replaced/removed.\n      - Can be used in combination with C(before).\n      - Uses Python regular expressions; see\n        U(https://docs.python.org/3/library/re.html).\n      - Uses DOTALL, which means the C(.) special character I(can match newlines).\n    type: str\n    version_added: \"2.4\"\n  before:\n    description:\n      - If specified, only content before this match will be replaced/removed.\n      - Can be used in combination with C(after).\n      - Uses Python regular expressions; see\n        U(https://docs.python.org/3/library/re.html).\n      - Uses DOTALL, which means the C(.) special character I(can match newlines).\n    type: str\n    version_added: \"2.4\"\n  backup:\n    description:\n      - Create a backup file including the timestamp information so you can\n        get the original file back if you somehow clobbered it incorrectly.\n    type: bool\n    default: no\n  others:\n    description:\n      - All arguments accepted by the M(ansible.builtin.file) module also work here.\n    type: str\n  encoding:\n    description:\n      - The character encoding for reading and writing the file.\n    type: str\n    default: utf-8\n    version_added: \"2.4\"\nnotes:\n  - As of Ansible 2.3, the I(dest) option has been changed to I(path) as default, but I(dest) still works as well.\n  - As of Ansible 2.7.10, the combined use of I(before) and I(after) works properly. If you were relying on the\n    previous incorrect behavior, you may be need to adjust your tasks.\n    See U(https://github.com/ansible/ansible/issues/31354) for details.\n  - Option I(follow) has been removed in Ansible 2.5, because this module modifies the contents of the file so I(follow=no) doesn't make sense.\n","return":"#"},{"normalizedName":"RpmKey","module":"rpm_key","short_description":"Adds or removes a gpg key from the rpm db","description":["Adds or removes (rpm --import) a gpg key to your rpm database."],"options":{"fingerprint":{"normalizedName":"Fingerprint","structTag":"`yaml:\"fingerprint,omitempty\" json:\"fingerprint,omitempty\"`","goType":"string","goElements":"","description":["The long-form fingerprint of the key being imported.","This will be used to verify the specified key."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"key":{"normalizedName":"Key","structTag":"`yaml:\"key,omitempty\" json:\"key,omitempty\"`","goType":"string","goElements":"","description":["Key that will be modified. Can be a url, a file on the managed node, or a keyid if the key already exists in the database."],"type":"str","required":true,"default":null,"elements":"","aliases":null},"state":{"normalizedName":"State","structTag":"`yaml:\"state,omitempty\" json:\"state,omitempty\"`","goType":"string","goElements":"","description":["If the key will be imported or removed from the rpm db."],"type":"str","required":false,"default":"present","elements":"","aliases":null},"validate_certs":{"normalizedName":"ValidateCerts","structTag":"`yaml:\"validate_certs,omitempty\" json:\"validate_certs,omitempty\"`","goType":"bool","goElements":"","description":["If C(no) and the C(key) is a url starting with https, SSL certificates will not be validated.","This should only be used on personally controlled sites using self-signed certificates."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null}},"returns":{},"doc":"\n---\nmodule: rpm_key\nauthor:\n  - Hector Acosta (@hacosta) \u003chector.acosta@gazzang.com\u003e\nshort_description: Adds or removes a gpg key from the rpm db\ndescription:\n  - Adds or removes (rpm --import) a gpg key to your rpm database.\nversion_added: \"1.3\"\noptions:\n    key:\n      description:\n        - Key that will be modified. Can be a url, a file on the managed node, or a keyid if the key\n          already exists in the database.\n      type: str\n      required: true\n    state:\n      description:\n        - If the key will be imported or removed from the rpm db.\n      type: str\n      default: present\n      choices: [ absent, present ]\n    validate_certs:\n      description:\n        - If C(no) and the C(key) is a url starting with https, SSL certificates will not be validated.\n        - This should only be used on personally controlled sites using self-signed certificates.\n      type: bool\n      default: 'yes'\n    fingerprint:\n      description:\n        - The long-form fingerprint of the key being imported.\n        - This will be used to verify the specified key.\n      type: str\n      version_added: 2.9\nextends_documentation_fragment:\n    - action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    platform:\n        platforms: rhel\n","return":"#"},{"normalizedName":"Setup","module":"setup","short_description":"Gathers facts about remote hosts","description":["This module is automatically called by playbooks to gather useful variables about remote hosts that can be used in playbooks. It can also be executed directly by C(/usr/bin/ansible) to check what variables are available to a host. Ansible provides many I(facts) about the system, automatically.","This module is also supported for Windows targets."],"options":{"fact_path":{"normalizedName":"FactPath","structTag":"`yaml:\"fact_path,omitempty\" json:\"fact_path,omitempty\"`","goType":"string","goElements":"","description":["Path used for local ansible facts (C(*.fact)) - files in this dir will be run (if executable) and their results be added to C(ansible_local) facts. If a file is not executable it is read instead. File/results format can be JSON or INI-format. The default C(fact_path) can be specified in C(ansible.cfg) for when setup is automatically called as part of C(gather_facts). NOTE - For windows clients, the results will be added to a variable named after the local file (without extension suffix), rather than C(ansible_local).","Since Ansible 2.1, Windows hosts can use C(fact_path). Make sure that this path exists on the target host. Files in this path MUST be PowerShell scripts C(.ps1) which outputs an object. This object will be formatted by Ansible as json so the script should be outputting a raw hashtable, array, or other primitive object."],"type":"path","required":false,"default":"/etc/ansible/facts.d","elements":"","aliases":null},"filter":{"normalizedName":"Filter","structTag":"`yaml:\"filter,omitempty\" json:\"filter,omitempty\"`","goType":"[]string","goElements":"","description":["If supplied, only return facts that match one of the shell-style (fnmatch) pattern. An empty list basically means 'no filter'. As of Ansible 2.11, the type has changed from string to list and the default has became an empty list. A simple string is still accepted and works as a single pattern. The behaviour prior to Ansible 2.11 remains."],"type":"list","required":false,"default":[],"elements":"str","aliases":null},"gather_subset":{"normalizedName":"GatherSubset","structTag":"`yaml:\"gather_subset,omitempty\" json:\"gather_subset,omitempty\"`","goType":"[]string","goElements":"","description":["If supplied, restrict the additional facts collected to the given subset. Possible values: C(all), C(min), C(hardware), C(network), C(virtual), C(ohai), and C(facter). Can specify a list of values to specify a larger subset. Values can also be used with an initial C(!) to specify that that specific subset should not be collected.  For instance: C(!hardware,!network,!virtual,!ohai,!facter). If C(!all) is specified then only the min subset is collected. To avoid collecting even the min subset, specify C(!all,!min). To collect only specific facts, use C(!all,!min), and specify the particular fact subsets. Use the filter parameter if you do not want to display some collected facts."],"type":"list","required":false,"default":"all","elements":"str","aliases":null},"gather_timeout":{"normalizedName":"GatherTimeout","structTag":"`yaml:\"gather_timeout,omitempty\" json:\"gather_timeout,omitempty\"`","goType":"int","goElements":"","description":["Set the default timeout in seconds for individual fact gathering."],"type":"int","required":false,"default":10,"elements":"","aliases":null}},"returns":{},"doc":"\n---\nmodule: setup\nversion_added: historical\nshort_description: Gathers facts about remote hosts\noptions:\n    gather_subset:\n        version_added: \"2.1\"\n        description:\n            - \"If supplied, restrict the additional facts collected to the given subset.\n              Possible values: C(all), C(min), C(hardware), C(network), C(virtual), C(ohai), and\n              C(facter). Can specify a list of values to specify a larger subset.\n              Values can also be used with an initial C(!) to specify that\n              that specific subset should not be collected.  For instance:\n              C(!hardware,!network,!virtual,!ohai,!facter). If C(!all) is specified\n              then only the min subset is collected. To avoid collecting even the\n              min subset, specify C(!all,!min). To collect only specific facts,\n              use C(!all,!min), and specify the particular fact subsets.\n              Use the filter parameter if you do not want to display some collected\n              facts.\"\n        type: list\n        elements: str\n        default: \"all\"\n    gather_timeout:\n        version_added: \"2.2\"\n        description:\n            - Set the default timeout in seconds for individual fact gathering.\n        type: int\n        default: 10\n    filter:\n        version_added: \"1.1\"\n        description:\n            - If supplied, only return facts that match one of the shell-style\n              (fnmatch) pattern. An empty list basically means 'no filter'.\n              As of Ansible 2.11, the type has changed from string to list\n              and the default has became an empty list. A simple string is\n              still accepted and works as a single pattern. The behaviour\n              prior to Ansible 2.11 remains.\n        type: list\n        elements: str\n        default: []\n    fact_path:\n        version_added: \"1.3\"\n        description:\n            - Path used for local ansible facts (C(*.fact)) - files in this dir\n              will be run (if executable) and their results be added to C(ansible_local) facts.\n              If a file is not executable it is read instead.\n              File/results format can be JSON or INI-format. The default C(fact_path) can be\n              specified in C(ansible.cfg) for when setup is automatically called as part of\n              C(gather_facts).\n              NOTE - For windows clients, the results will be added to a variable named after the\n              local file (without extension suffix), rather than C(ansible_local).\n            - Since Ansible 2.1, Windows hosts can use C(fact_path). Make sure that this path\n              exists on the target host. Files in this path MUST be PowerShell scripts C(.ps1)\n              which outputs an object. This object will be formatted by Ansible as json so the\n              script should be outputting a raw hashtable, array, or other primitive object.\n        type: path\n        default: /etc/ansible/facts.d\ndescription:\n    - This module is automatically called by playbooks to gather useful\n      variables about remote hosts that can be used in playbooks. It can also be\n      executed directly by C(/usr/bin/ansible) to check what variables are\n      available to a host. Ansible provides many I(facts) about the system,\n      automatically.\n    - This module is also supported for Windows targets.\nextends_documentation_fragment:\n  -  action_common_attributes\n  -  action_common_attributes.facts\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    facts:\n        support: full\n    platform:\n        platforms: posix, windows\nnotes:\n    - More ansible facts will be added with successive releases. If I(facter) or\n      I(ohai) are installed, variables from these programs will also be snapshotted\n      into the JSON file for usage in templating. These variables are prefixed\n      with C(facter_) and C(ohai_) so it's easy to tell their source. All variables are\n      bubbled up to the caller. Using the ansible facts and choosing to not\n      install I(facter) and I(ohai) means you can avoid Ruby-dependencies on your\n      remote systems. (See also M(community.general.facter) and M(community.general.ohai).)\n    - The filter option filters only the first level subkey below ansible_facts.\n    - If the target host is Windows, you will not currently have the ability to use\n      C(filter) as this is provided by a simpler implementation of the module.\n    - This module should be run with elevated privileges on BSD systems to gather facts like ansible_product_version.\n    - For more information about delegated facts,\n      please check U(https://docs.ansible.com/ansible/latest/user_guide/playbooks_delegation.html#delegating-facts).\nauthor:\n    - \"Ansible Core Team\"\n    - \"Michael DeHaan\"\n","return":""},{"normalizedName":"Slurp","module":"slurp","short_description":"Slurps a file from remote nodes","description":["This module works like M(ansible.builtin.fetch). It is used for fetching a base64- encoded blob containing the data in a remote file.","This module is also supported for Windows targets."],"options":{"src":{"normalizedName":"Src","structTag":"`yaml:\"src,omitempty\" json:\"src,omitempty\"`","goType":"string","goElements":"","description":["The file on the remote system to fetch. This I(must) be a file, not a directory."],"type":"path","required":true,"default":null,"elements":"","aliases":["path"]}},"returns":{"content":{"normalizedName":"Content","description":"Encoded file content","returned":"success","type":"str","sample":"MjE3OQo=","goType":"string","structTag":"`yaml:\"content,omitempty\" json:\"content,omitempty\"`"},"encoding":{"normalizedName":"Encoding","description":"Type of encoding used for file","returned":"success","type":"str","sample":"base64","goType":"string","structTag":"`yaml:\"encoding,omitempty\" json:\"encoding,omitempty\"`"},"source":{"normalizedName":"Source","description":"Actual path of file slurped","returned":"success","type":"str","sample":"/var/run/sshd.pid","goType":"string","structTag":"`yaml:\"source,omitempty\" json:\"source,omitempty\"`"}},"doc":"\n---\nmodule: slurp\nversion_added: historical\nshort_description: Slurps a file from remote nodes\ndescription:\n     - This module works like M(ansible.builtin.fetch). It is used for fetching a base64-\n       encoded blob containing the data in a remote file.\n     - This module is also supported for Windows targets.\noptions:\n  src:\n    description:\n      - The file on the remote system to fetch. This I(must) be a file, not a directory.\n    type: path\n    required: true\n    aliases: [ path ]\nextends_documentation_fragment:\n    - action_common_attributes\nattributes:\n  check_mode:\n    support: full\n  diff_mode:\n    support: none\n  platform:\n    platforms: posix, windows\nnotes:\n   - This module returns an 'in memory' base64 encoded version of the file, take\n     into account that this will require at least twice the RAM as the original file size.\nseealso:\n- module: ansible.builtin.fetch\nauthor:\n    - Ansible Core Team\n    - Michael DeHaan (@mpdehaan)\n","return":"\ncontent:\n    description: Encoded file content\n    returned: success\n    type: str\n    sample: \"MjE3OQo=\"\nencoding:\n    description: Type of encoding used for file\n    returned: success\n    type: str\n    sample: \"base64\"\nsource:\n    description: Actual path of file slurped\n    returned: success\n    type: str\n    sample: \"/var/run/sshd.pid\"\n"},{"normalizedName":"Stat","module":"stat","short_description":"Retrieve file or file system status","description":["Retrieves facts for a file similar to the Linux/Unix 'stat' command.","For Windows targets, use the M(ansible.windows.win_stat) module instead."],"options":{"checksum_algorithm":{"normalizedName":"ChecksumAlgorithm","structTag":"`yaml:\"checksum_algorithm,omitempty\" json:\"checksum_algorithm,omitempty\"`","goType":"string","goElements":"","description":["Algorithm to determine checksum of file.","Will throw an error if the host is unable to use specified algorithm.","The remote host has to support the hashing method specified, C(md5) can be unavailable if the host is FIPS-140 compliant."],"type":"str","required":false,"default":"sha1","elements":"","aliases":["checksum","checksum_algo"]},"follow":{"normalizedName":"Follow","structTag":"`yaml:\"follow,omitempty\" json:\"follow,omitempty\"`","goType":"bool","goElements":"","description":["Whether to follow symlinks."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"get_attributes":{"normalizedName":"GetAttributes","structTag":"`yaml:\"get_attributes,omitempty\" json:\"get_attributes,omitempty\"`","goType":"bool","goElements":"","description":["Get file attributes using lsattr tool if present."],"type":"bool","required":false,"default":"yes","elements":"","aliases":["attr","attributes"]},"get_checksum":{"normalizedName":"GetChecksum","structTag":"`yaml:\"get_checksum,omitempty\" json:\"get_checksum,omitempty\"`","goType":"bool","goElements":"","description":["Whether to return a checksum of the file."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null},"get_mime":{"normalizedName":"GetMime","structTag":"`yaml:\"get_mime,omitempty\" json:\"get_mime,omitempty\"`","goType":"bool","goElements":"","description":["Use file magic and return data about the nature of the file. this uses the 'file' utility found on most Linux/Unix systems.","This will add both C(mime_type) and C(charset) fields to the return, if possible.","In Ansible 2.3 this option changed from I(mime) to I(get_mime) and the default changed to C(yes)."],"type":"bool","required":false,"default":"yes","elements":"","aliases":["mime","mime_type","mime-type"]},"path":{"normalizedName":"Path","structTag":"`yaml:\"path,omitempty\" json:\"path,omitempty\"`","goType":"string","goElements":"","description":["The full path of the file/object to get the facts of."],"type":"path","required":true,"default":null,"elements":"","aliases":["dest","name"]}},"returns":{"stat":{"normalizedName":"Stat","description":"Dictionary containing all the stat data, some platforms might add additional fields.","returned":"success","type":"complex","sample":null,"goType":"interface{}","structTag":"`yaml:\"stat,omitempty\" json:\"stat,omitempty\"`"}},"doc":"\n---\nmodule: stat\nversion_added: \"1.3\"\nshort_description: Retrieve file or file system status\ndescription:\n     - Retrieves facts for a file similar to the Linux/Unix 'stat' command.\n     - For Windows targets, use the M(ansible.windows.win_stat) module instead.\noptions:\n  path:\n    description:\n      - The full path of the file/object to get the facts of.\n    type: path\n    required: true\n    aliases: [ dest, name ]\n  follow:\n    description:\n      - Whether to follow symlinks.\n    type: bool\n    default: no\n  get_checksum:\n    description:\n      - Whether to return a checksum of the file.\n    type: bool\n    default: yes\n    version_added: \"1.8\"\n  checksum_algorithm:\n    description:\n      - Algorithm to determine checksum of file.\n      - Will throw an error if the host is unable to use specified algorithm.\n      - The remote host has to support the hashing method specified, C(md5)\n        can be unavailable if the host is FIPS-140 compliant.\n    type: str\n    choices: [ md5, sha1, sha224, sha256, sha384, sha512 ]\n    default: sha1\n    aliases: [ checksum, checksum_algo ]\n    version_added: \"2.0\"\n  get_mime:\n    description:\n      - Use file magic and return data about the nature of the file. this uses\n        the 'file' utility found on most Linux/Unix systems.\n      - This will add both C(mime_type) and C(charset) fields to the return, if possible.\n      - In Ansible 2.3 this option changed from I(mime) to I(get_mime) and the default changed to C(yes).\n    type: bool\n    default: yes\n    aliases: [ mime, mime_type, mime-type ]\n    version_added: \"2.1\"\n  get_attributes:\n    description:\n      - Get file attributes using lsattr tool if present.\n    type: bool\n    default: yes\n    aliases: [ attr, attributes ]\n    version_added: \"2.3\"\nextends_documentation_fragment:\n  -  action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    platform:\n        platforms: posix\nseealso:\n- module: ansible.builtin.file\n- module: ansible.windows.win_stat\nauthor: Bruce Pennypacker (@bpennypacker)\n","return":"\nstat:\n    description: Dictionary containing all the stat data, some platforms might add additional fields.\n    returned: success\n    type: complex\n    contains:\n        exists:\n            description: If the destination path actually exists or not\n            returned: success\n            type: bool\n            sample: True\n        path:\n            description: The full path of the file/object to get the facts of\n            returned: success and if path exists\n            type: str\n            sample: '/path/to/file'\n        mode:\n            description: Unix permissions of the file in octal representation as a string\n            returned: success, path exists and user can read stats\n            type: str\n            sample: 1755\n        isdir:\n            description: Tells you if the path is a directory\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        ischr:\n            description: Tells you if the path is a character device\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        isblk:\n            description: Tells you if the path is a block device\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        isreg:\n            description: Tells you if the path is a regular file\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: True\n        isfifo:\n            description: Tells you if the path is a named pipe\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        islnk:\n            description: Tells you if the path is a symbolic link\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        issock:\n            description: Tells you if the path is a unix domain socket\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        uid:\n            description: Numeric id representing the file owner\n            returned: success, path exists and user can read stats\n            type: int\n            sample: 1003\n        gid:\n            description: Numeric id representing the group of the owner\n            returned: success, path exists and user can read stats\n            type: int\n            sample: 1003\n        size:\n            description: Size in bytes for a plain file, amount of data for some special files\n            returned: success, path exists and user can read stats\n            type: int\n            sample: 203\n        inode:\n            description: Inode number of the path\n            returned: success, path exists and user can read stats\n            type: int\n            sample: 12758\n        dev:\n            description: Device the inode resides on\n            returned: success, path exists and user can read stats\n            type: int\n            sample: 33\n        nlink:\n            description: Number of links to the inode (hard links)\n            returned: success, path exists and user can read stats\n            type: int\n            sample: 1\n        atime:\n            description: Time of last access\n            returned: success, path exists and user can read stats\n            type: float\n            sample: 1424348972.575\n        mtime:\n            description: Time of last modification\n            returned: success, path exists and user can read stats\n            type: float\n            sample: 1424348972.575\n        ctime:\n            description: Time of last metadata update or creation (depends on OS)\n            returned: success, path exists and user can read stats\n            type: float\n            sample: 1424348972.575\n        wusr:\n            description: Tells you if the owner has write permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: True\n        rusr:\n            description: Tells you if the owner has read permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: True\n        xusr:\n            description: Tells you if the owner has execute permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: True\n        wgrp:\n            description: Tells you if the owner's group has write permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        rgrp:\n            description: Tells you if the owner's group has read permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: True\n        xgrp:\n            description: Tells you if the owner's group has execute permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: True\n        woth:\n            description: Tells you if others have write permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        roth:\n            description: Tells you if others have read permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: True\n        xoth:\n            description: Tells you if others have execute permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: True\n        isuid:\n            description: Tells you if the invoking user's id matches the owner's id\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        isgid:\n            description: Tells you if the invoking user's group id matches the owner's group id\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        lnk_source:\n            description: Target of the symlink normalized for the remote filesystem\n            returned: success, path exists and user can read stats and the path is a symbolic link\n            type: str\n            sample: /home/foobar/21102015-1445431274-908472971\n        lnk_target:\n            description: Target of the symlink.  Note that relative paths remain relative\n            returned: success, path exists and user can read stats and the path is a symbolic link\n            type: str\n            sample: ../foobar/21102015-1445431274-908472971\n            version_added: 2.4\n        md5:\n            description: md5 hash of the file; this will be removed in Ansible 2.9 in\n                favor of the checksum return value\n            returned: success, path exists and user can read stats and path\n                supports hashing and md5 is supported\n            type: str\n            sample: f88fa92d8cf2eeecf4c0a50ccc96d0c0\n        checksum:\n            description: hash of the file\n            returned: success, path exists, user can read stats, path supports\n                hashing and supplied checksum algorithm is available\n            type: str\n            sample: 50ba294cdf28c0d5bcde25708df53346825a429f\n        pw_name:\n            description: User name of owner\n            returned: success, path exists and user can read stats and installed python supports it\n            type: str\n            sample: httpd\n        gr_name:\n            description: Group name of owner\n            returned: success, path exists and user can read stats and installed python supports it\n            type: str\n            sample: www-data\n        mimetype:\n            description: file magic data or mime-type\n            returned: success, path exists and user can read stats and\n                installed python supports it and the I(mime) option was true, will\n                return C(unknown) on error.\n            type: str\n            sample: application/pdf; charset=binary\n        charset:\n            description: file character set or encoding\n            returned: success, path exists and user can read stats and\n                installed python supports it and the I(mime) option was true, will\n                return C(unknown) on error.\n            type: str\n            sample: us-ascii\n        readable:\n            description: Tells you if the invoking user has the right to read the path\n            returned: success, path exists and user can read the path\n            type: bool\n            sample: False\n            version_added: 2.2\n        writeable:\n            description: Tells you if the invoking user has the right to write the path\n            returned: success, path exists and user can write the path\n            type: bool\n            sample: False\n            version_added: 2.2\n        executable:\n            description: Tells you if the invoking user has execute permission on the path\n            returned: success, path exists and user can execute the path\n            type: bool\n            sample: False\n            version_added: 2.2\n        attributes:\n            description: list of file attributes\n            returned: success, path exists and user can execute the path\n            type: list\n            sample: [ immutable, extent ]\n            version_added: 2.3\n        version:\n            description: The version/generation attribute of a file according to the filesystem\n            returned: success, path exists, user can execute the path, lsattr is available and filesystem supports\n            type: str\n            sample: \"381700746\"\n            version_added: 2.3\n"},{"normalizedName":"Subversion","module":"subversion","short_description":"Deploys a subversion repository","description":["Deploy given repository URL / revision to dest. If dest exists, update to the specified revision, otherwise perform a checkout."],"options":{"checkout":{"normalizedName":"Checkout","structTag":"`yaml:\"checkout,omitempty\" json:\"checkout,omitempty\"`","goType":"bool","goElements":"","description":["If C(no), do not check out the repository if it does not exist locally."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null},"dest":{"normalizedName":"Dest","structTag":"`yaml:\"dest,omitempty\" json:\"dest,omitempty\"`","goType":"string","goElements":"","description":["Absolute path where the repository should be deployed.","The destination directory must be specified unless I(checkout=no), I(update=no), and I(export=no)."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"executable":{"normalizedName":"Executable","structTag":"`yaml:\"executable,omitempty\" json:\"executable,omitempty\"`","goType":"string","goElements":"","description":["Path to svn executable to use. If not supplied, the normal mechanism for resolving binary paths will be used."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"export":{"normalizedName":"Export","structTag":"`yaml:\"export,omitempty\" json:\"export,omitempty\"`","goType":"bool","goElements":"","description":["If C(yes), do export instead of checkout/update."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"force":{"normalizedName":"Force","structTag":"`yaml:\"force,omitempty\" json:\"force,omitempty\"`","goType":"bool","goElements":"","description":["If C(yes), modified files will be discarded. If C(no), module will fail if it encounters modified files. Prior to 1.9 the default was C(yes)."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"in_place":{"normalizedName":"InPlace","structTag":"`yaml:\"in_place,omitempty\" json:\"in_place,omitempty\"`","goType":"bool","goElements":"","description":["If the directory exists, then the working copy will be checked-out over-the-top using svn checkout --force; if force is specified then existing files with different content are reverted."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"password":{"normalizedName":"Password","structTag":"`yaml:\"password,omitempty\" json:\"password,omitempty\"`","goType":"string","goElements":"","description":["C(--password) parameter passed to svn when svn is less than version 1.10.0. This is not secure and the password will be leaked to argv.","C(--password-from-stdin) parameter when svn is greater or equal to version 1.10.0."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"repo":{"normalizedName":"Repo","structTag":"`yaml:\"repo,omitempty\" json:\"repo,omitempty\"`","goType":"string","goElements":"","description":["The subversion URL to the repository."],"type":"str","required":true,"default":null,"elements":"","aliases":["name","repository"]},"revision":{"normalizedName":"Revision","structTag":"`yaml:\"revision,omitempty\" json:\"revision,omitempty\"`","goType":"string","goElements":"","description":["Specific revision to checkout."],"type":"str","required":false,"default":"HEAD","elements":"","aliases":["rev","version"]},"switch":{"normalizedName":"Switch","structTag":"`yaml:\"switch,omitempty\" json:\"switch,omitempty\"`","goType":"bool","goElements":"","description":["If C(no), do not call svn switch before update."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null},"update":{"normalizedName":"Update","structTag":"`yaml:\"update,omitempty\" json:\"update,omitempty\"`","goType":"bool","goElements":"","description":["If C(no), do not retrieve new revisions from the origin repository."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null},"username":{"normalizedName":"Username","structTag":"`yaml:\"username,omitempty\" json:\"username,omitempty\"`","goType":"string","goElements":"","description":["C(--username) parameter passed to svn."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"validate_certs":{"normalizedName":"ValidateCerts","structTag":"`yaml:\"validate_certs,omitempty\" json:\"validate_certs,omitempty\"`","goType":"bool","goElements":"","description":["If C(no), passes the C(--trust-server-cert) flag to svn.","If C(yes), does not pass the flag."],"type":"bool","required":false,"default":"no","elements":"","aliases":null}},"returns":{},"doc":"\n---\nmodule: subversion\nshort_description: Deploys a subversion repository\ndescription:\n   - Deploy given repository URL / revision to dest. If dest exists, update to the specified revision, otherwise perform a checkout.\nversion_added: \"0.7\"\nauthor:\n- Dane Summers (@dsummersl) \u003cnjharman@gmail.com\u003e\noptions:\n  repo:\n    description:\n      - The subversion URL to the repository.\n    type: str\n    required: true\n    aliases: [ name, repository ]\n  dest:\n    description:\n      - Absolute path where the repository should be deployed.\n      - The destination directory must be specified unless I(checkout=no), I(update=no), and I(export=no).\n    type: path\n  revision:\n    description:\n      - Specific revision to checkout.\n    type: str\n    default: HEAD\n    aliases: [ rev, version ]\n  force:\n    description:\n      - If C(yes), modified files will be discarded. If C(no), module will fail if it encounters modified files.\n        Prior to 1.9 the default was C(yes).\n    type: bool\n    default: \"no\"\n  in_place:\n    description:\n      - If the directory exists, then the working copy will be checked-out over-the-top using\n        svn checkout --force; if force is specified then existing files with different content are reverted.\n    type: bool\n    default: \"no\"\n    version_added: \"2.6\"\n  username:\n    description:\n      - C(--username) parameter passed to svn.\n    type: str\n  password:\n    description:\n      - C(--password) parameter passed to svn when svn is less than version 1.10.0. This is not secure and\n        the password will be leaked to argv.\n      - C(--password-from-stdin) parameter when svn is greater or equal to version 1.10.0.\n    type: str\n  executable:\n    description:\n      - Path to svn executable to use. If not supplied,\n        the normal mechanism for resolving binary paths will be used.\n    type: path\n    version_added: \"1.4\"\n  checkout:\n    description:\n     - If C(no), do not check out the repository if it does not exist locally.\n    type: bool\n    default: \"yes\"\n    version_added: \"2.3\"\n  update:\n    description:\n     - If C(no), do not retrieve new revisions from the origin repository.\n    type: bool\n    default: \"yes\"\n    version_added: \"2.3\"\n  export:\n    description:\n      - If C(yes), do export instead of checkout/update.\n    type: bool\n    default: \"no\"\n    version_added: \"1.6\"\n  switch:\n    description:\n      - If C(no), do not call svn switch before update.\n    default: \"yes\"\n    version_added: \"2.0\"\n    type: bool\n  validate_certs:\n    description:\n      - If C(no), passes the C(--trust-server-cert) flag to svn.\n      - If C(yes), does not pass the flag.\n    default: \"no\"\n    version_added: \"2.11\"\n    type: bool\nextends_documentation_fragment: action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    platform:\n        platforms: posix\nnotes:\n   - This module does not handle externals.\n\nrequirements:\n    - subversion (the command line tool with C(svn) entrypoint)\n","return":"#"},{"normalizedName":"Systemd","module":"systemd","short_description":"Manage systemd units","description":["Controls systemd units (services, timers, and so on) on remote hosts."],"options":{"daemon_reexec":{"normalizedName":"DaemonReexec","structTag":"`yaml:\"daemon_reexec,omitempty\" json:\"daemon_reexec,omitempty\"`","goType":"bool","goElements":"","description":["Run daemon_reexec command before doing any other operations, the systemd manager will serialize the manager state."],"type":"bool","required":false,"default":"no","elements":"","aliases":["daemon-reexec"]},"daemon_reload":{"normalizedName":"DaemonReload","structTag":"`yaml:\"daemon_reload,omitempty\" json:\"daemon_reload,omitempty\"`","goType":"bool","goElements":"","description":["Run daemon-reload before doing any other operations, to make sure systemd has read any changes.","When set to C(true), runs daemon-reload even if the module does not start or stop anything."],"type":"bool","required":false,"default":"no","elements":"","aliases":["daemon-reload"]},"enabled":{"normalizedName":"Enabled","structTag":"`yaml:\"enabled,omitempty\" json:\"enabled,omitempty\"`","goType":"bool","goElements":"","description":["Whether the unit should start on boot. B(At least one of state and enabled are required.)"],"type":"bool","required":false,"default":null,"elements":"","aliases":null},"force":{"normalizedName":"Force","structTag":"`yaml:\"force,omitempty\" json:\"force,omitempty\"`","goType":"bool","goElements":"","description":["Whether to override existing symlinks."],"type":"bool","required":false,"default":null,"elements":"","aliases":null},"masked":{"normalizedName":"Masked","structTag":"`yaml:\"masked,omitempty\" json:\"masked,omitempty\"`","goType":"bool","goElements":"","description":["Whether the unit should be masked or not, a masked unit is impossible to start."],"type":"bool","required":false,"default":null,"elements":"","aliases":null},"name":{"normalizedName":"Name","structTag":"`yaml:\"name,omitempty\" json:\"name,omitempty\"`","goType":"string","goElements":"","description":["Name of the unit. This parameter takes the name of exactly one unit to work with.","When no extension is given, it is implied to a C(.service) as systemd.","When using in a chroot environment you always need to specify the name of the unit with the extension. For example, C(crond.service)."],"type":"str","required":false,"default":null,"elements":"","aliases":["service","unit"]},"no_block":{"normalizedName":"NoBlock","structTag":"`yaml:\"no_block,omitempty\" json:\"no_block,omitempty\"`","goType":"bool","goElements":"","description":["Do not synchronously wait for the requested operation to finish. Enqueued job will continue without Ansible blocking on its completion."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"scope":{"normalizedName":"Scope","structTag":"`yaml:\"scope,omitempty\" json:\"scope,omitempty\"`","goType":"string","goElements":"","description":["Run systemctl within a given service manager scope, either as the default system scope C(system), the current user's scope C(user), or the scope of all users C(global).","For systemd to work with 'user', the executing user must have its own instance of dbus started and accessible (systemd requirement).","The user dbus process is normally started during normal login, but not during the run of Ansible tasks. Otherwise you will probably get a 'Failed to connect to bus: no such file or directory' error.","The user must have access, normally given via setting the C(XDG_RUNTIME_DIR) variable, see example below."],"type":"str","required":false,"default":"system","elements":"","aliases":null},"state":{"normalizedName":"State","structTag":"`yaml:\"state,omitempty\" json:\"state,omitempty\"`","goType":"string","goElements":"","description":["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary. C(restarted) will always bounce the unit. C(reloaded) will always reload."],"type":"str","required":false,"default":null,"elements":"","aliases":null}},"returns":{"status":{"normalizedName":"Status","description":"A dictionary with the key=value pairs returned from C(systemctl show).","returned":"success","type":"complex","sample":{"ActiveEnterTimestamp":"Sun 2016-05-15 18:28:49 EDT","ActiveEnterTimestampMonotonic":"8135942","ActiveExitTimestampMonotonic":"0","ActiveState":"active","After":"auditd.service systemd-user-sessions.service time-sync.target systemd-journald.socket basic.target system.slice","AllowIsolate":"no","Before":"shutdown.target multi-user.target","BlockIOAccounting":"no","BlockIOWeight":"1000","CPUAccounting":"no","CPUSchedulingPolicy":"0","CPUSchedulingPriority":"0","CPUSchedulingResetOnFork":"no","CPUShares":"1024","CanIsolate":"no","CanReload":"yes","CanStart":"yes","CanStop":"yes","CapabilityBoundingSet":"18446744073709551615","ConditionResult":"yes","ConditionTimestamp":"Sun 2016-05-15 18:28:49 EDT","ConditionTimestampMonotonic":"7902742","Conflicts":"shutdown.target","ControlGroup":"/system.slice/crond.service","ControlPID":"0","DefaultDependencies":"yes","Delegate":"no","Description":"Command Scheduler","DevicePolicy":"auto","EnvironmentFile":"/etc/sysconfig/crond (ignore_errors=no)","ExecMainCode":"0","ExecMainExitTimestampMonotonic":"0","ExecMainPID":"595","ExecMainStartTimestamp":"Sun 2016-05-15 18:28:49 EDT","ExecMainStartTimestampMonotonic":"8134990","ExecMainStatus":"0","ExecReload":"{ path=/bin/kill ; argv[]=/bin/kill -HUP $MAINPID ; ignore_errors=no ; start_time=[n/a] ; stop_time=[n/a] ; pid=0 ; code=(null) ; status=0/0 }","ExecStart":"{ path=/usr/sbin/crond ; argv[]=/usr/sbin/crond -n $CRONDARGS ; ignore_errors=no ; start_time=[n/a] ; stop_time=[n/a] ; pid=0 ; code=(null) ; status=0/0 }","FragmentPath":"/usr/lib/systemd/system/crond.service","GuessMainPID":"yes","IOScheduling":"0","Id":"crond.service","IgnoreOnIsolate":"no","IgnoreOnSnapshot":"no","IgnoreSIGPIPE":"yes","InactiveEnterTimestampMonotonic":"0","InactiveExitTimestamp":"Sun 2016-05-15 18:28:49 EDT","InactiveExitTimestampMonotonic":"8135942","JobTimeoutUSec":"0","KillMode":"process","KillSignal":"15","LimitAS":"18446744073709551615","LimitCORE":"18446744073709551615","LimitCPU":"18446744073709551615","LimitDATA":"18446744073709551615","LimitFSIZE":"18446744073709551615","LimitLOCKS":"18446744073709551615","LimitMEMLOCK":"65536","LimitMSGQUEUE":"819200","LimitNICE":"0","LimitNOFILE":"4096","LimitNPROC":"3902","LimitRSS":"18446744073709551615","LimitRTPRIO":"0","LimitRTTIME":"18446744073709551615","LimitSIGPENDING":"3902","LimitSTACK":"18446744073709551615","LoadState":"loaded","MainPID":"595","MemoryAccounting":"no","MemoryLimit":"18446744073709551615","MountFlags":"0","Names":"crond.service","NeedDaemonReload":"no","Nice":"0","NoNewPrivileges":"no","NonBlocking":"no","NotifyAccess":"none","OOMScoreAdjust":"0","OnFailureIsolate":"no","PermissionsStartOnly":"no","PrivateNetwork":"no","PrivateTmp":"no","RefuseManualStart":"no","RefuseManualStop":"no","RemainAfterExit":"no","Requires":"basic.target","Restart":"no","RestartUSec":"100ms","Result":"success","RootDirectoryStartOnly":"no","SameProcessGroup":"no","SecureBits":"0","SendSIGHUP":"no","SendSIGKILL":"yes","Slice":"system.slice","StandardError":"inherit","StandardInput":"null","StandardOutput":"journal","StartLimitAction":"none","StartLimitBurst":"5","StartLimitInterval":"10000000","StatusErrno":"0","StopWhenUnneeded":"no","SubState":"running","SyslogLevelPrefix":"yes","SyslogPriority":"30","TTYReset":"no","TTYVHangup":"no","TTYVTDisallocate":"no","TimeoutStartUSec":"1min 30s","TimeoutStopUSec":"1min 30s","TimerSlackNSec":"50000","Transient":"no","Type":"simple","UMask":"0022","UnitFileState":"enabled","WantedBy":"multi-user.target","Wants":"system.slice","WatchdogTimestampMonotonic":"0","WatchdogUSec":"0"},"goType":"interface{}","structTag":"`yaml:\"status,omitempty\" json:\"status,omitempty\"`"}},"doc":"\nmodule: systemd\nauthor:\n    - Ansible Core Team\nversion_added: \"2.2\"\nshort_description:  Manage systemd units\ndescription:\n    - Controls systemd units (services, timers, and so on) on remote hosts.\noptions:\n    name:\n        description:\n            - Name of the unit. This parameter takes the name of exactly one unit to work with.\n            - When no extension is given, it is implied to a C(.service) as systemd.\n            - When using in a chroot environment you always need to specify the name of the unit with the extension. For example, C(crond.service).\n        type: str\n        aliases: [ service, unit ]\n    state:\n        description:\n            - C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.\n              C(restarted) will always bounce the unit. C(reloaded) will always reload.\n        type: str\n        choices: [ reloaded, restarted, started, stopped ]\n    enabled:\n        description:\n            - Whether the unit should start on boot. B(At least one of state and enabled are required.)\n        type: bool\n    force:\n        description:\n            - Whether to override existing symlinks.\n        type: bool\n        version_added: 2.6\n    masked:\n        description:\n            - Whether the unit should be masked or not, a masked unit is impossible to start.\n        type: bool\n    daemon_reload:\n        description:\n            - Run daemon-reload before doing any other operations, to make sure systemd has read any changes.\n            - When set to C(true), runs daemon-reload even if the module does not start or stop anything.\n        type: bool\n        default: no\n        aliases: [ daemon-reload ]\n    daemon_reexec:\n        description:\n            - Run daemon_reexec command before doing any other operations, the systemd manager will serialize the manager state.\n        type: bool\n        default: no\n        aliases: [ daemon-reexec ]\n        version_added: \"2.8\"\n    scope:\n        description:\n            - Run systemctl within a given service manager scope, either as the default system scope C(system),\n              the current user's scope C(user), or the scope of all users C(global).\n            - \"For systemd to work with 'user', the executing user must have its own instance of dbus started and accessible (systemd requirement).\"\n            - \"The user dbus process is normally started during normal login, but not during the run of Ansible tasks.\n              Otherwise you will probably get a 'Failed to connect to bus: no such file or directory' error.\"\n            - The user must have access, normally given via setting the C(XDG_RUNTIME_DIR) variable, see example below.\n\n        type: str\n        choices: [ system, user, global ]\n        default: system\n        version_added: \"2.7\"\n    no_block:\n        description:\n            - Do not synchronously wait for the requested operation to finish.\n              Enqueued job will continue without Ansible blocking on its completion.\n        type: bool\n        default: no\n        version_added: \"2.3\"\nextends_documentation_fragment: action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    platform:\n        platforms: posix\nnotes:\n    - Since 2.4, one of the following options is required C(state), C(enabled), C(masked), C(daemon_reload), (C(daemon_reexec) since 2.8),\n      and all except C(daemon_reload) and (C(daemon_reexec) since 2.8) also require C(name).\n    - Before 2.4 you always required C(name).\n    - Globs are not supported in name, i.e C(postgres*.service).\n    - The service names might vary by specific OS/distribution\nrequirements:\n    - A system managed by systemd.\n","return":"\nstatus:\n    description: A dictionary with the key=value pairs returned from C(systemctl show).\n    returned: success\n    type: complex\n    sample: {\n            \"ActiveEnterTimestamp\": \"Sun 2016-05-15 18:28:49 EDT\",\n            \"ActiveEnterTimestampMonotonic\": \"8135942\",\n            \"ActiveExitTimestampMonotonic\": \"0\",\n            \"ActiveState\": \"active\",\n            \"After\": \"auditd.service systemd-user-sessions.service time-sync.target systemd-journald.socket basic.target system.slice\",\n            \"AllowIsolate\": \"no\",\n            \"Before\": \"shutdown.target multi-user.target\",\n            \"BlockIOAccounting\": \"no\",\n            \"BlockIOWeight\": \"1000\",\n            \"CPUAccounting\": \"no\",\n            \"CPUSchedulingPolicy\": \"0\",\n            \"CPUSchedulingPriority\": \"0\",\n            \"CPUSchedulingResetOnFork\": \"no\",\n            \"CPUShares\": \"1024\",\n            \"CanIsolate\": \"no\",\n            \"CanReload\": \"yes\",\n            \"CanStart\": \"yes\",\n            \"CanStop\": \"yes\",\n            \"CapabilityBoundingSet\": \"18446744073709551615\",\n            \"ConditionResult\": \"yes\",\n            \"ConditionTimestamp\": \"Sun 2016-05-15 18:28:49 EDT\",\n            \"ConditionTimestampMonotonic\": \"7902742\",\n            \"Conflicts\": \"shutdown.target\",\n            \"ControlGroup\": \"/system.slice/crond.service\",\n            \"ControlPID\": \"0\",\n            \"DefaultDependencies\": \"yes\",\n            \"Delegate\": \"no\",\n            \"Description\": \"Command Scheduler\",\n            \"DevicePolicy\": \"auto\",\n            \"EnvironmentFile\": \"/etc/sysconfig/crond (ignore_errors=no)\",\n            \"ExecMainCode\": \"0\",\n            \"ExecMainExitTimestampMonotonic\": \"0\",\n            \"ExecMainPID\": \"595\",\n            \"ExecMainStartTimestamp\": \"Sun 2016-05-15 18:28:49 EDT\",\n            \"ExecMainStartTimestampMonotonic\": \"8134990\",\n            \"ExecMainStatus\": \"0\",\n            \"ExecReload\": \"{ path=/bin/kill ; argv[]=/bin/kill -HUP $MAINPID ; ignore_errors=no ; start_time=[n/a] ; stop_time=[n/a] ; pid=0 ; code=(null) ; status=0/0 }\",\n            \"ExecStart\": \"{ path=/usr/sbin/crond ; argv[]=/usr/sbin/crond -n $CRONDARGS ; ignore_errors=no ; start_time=[n/a] ; stop_time=[n/a] ; pid=0 ; code=(null) ; status=0/0 }\",\n            \"FragmentPath\": \"/usr/lib/systemd/system/crond.service\",\n            \"GuessMainPID\": \"yes\",\n            \"IOScheduling\": \"0\",\n            \"Id\": \"crond.service\",\n            \"IgnoreOnIsolate\": \"no\",\n            \"IgnoreOnSnapshot\": \"no\",\n            \"IgnoreSIGPIPE\": \"yes\",\n            \"InactiveEnterTimestampMonotonic\": \"0\",\n            \"InactiveExitTimestamp\": \"Sun 2016-05-15 18:28:49 EDT\",\n            \"InactiveExitTimestampMonotonic\": \"8135942\",\n            \"JobTimeoutUSec\": \"0\",\n            \"KillMode\": \"process\",\n            \"KillSignal\": \"15\",\n            \"LimitAS\": \"18446744073709551615\",\n            \"LimitCORE\": \"18446744073709551615\",\n            \"LimitCPU\": \"18446744073709551615\",\n            \"LimitDATA\": \"18446744073709551615\",\n            \"LimitFSIZE\": \"18446744073709551615\",\n            \"LimitLOCKS\": \"18446744073709551615\",\n            \"LimitMEMLOCK\": \"65536\",\n            \"LimitMSGQUEUE\": \"819200\",\n            \"LimitNICE\": \"0\",\n            \"LimitNOFILE\": \"4096\",\n            \"LimitNPROC\": \"3902\",\n            \"LimitRSS\": \"18446744073709551615\",\n            \"LimitRTPRIO\": \"0\",\n            \"LimitRTTIME\": \"18446744073709551615\",\n            \"LimitSIGPENDING\": \"3902\",\n            \"LimitSTACK\": \"18446744073709551615\",\n            \"LoadState\": \"loaded\",\n            \"MainPID\": \"595\",\n            \"MemoryAccounting\": \"no\",\n            \"MemoryLimit\": \"18446744073709551615\",\n            \"MountFlags\": \"0\",\n            \"Names\": \"crond.service\",\n            \"NeedDaemonReload\": \"no\",\n            \"Nice\": \"0\",\n            \"NoNewPrivileges\": \"no\",\n            \"NonBlocking\": \"no\",\n            \"NotifyAccess\": \"none\",\n            \"OOMScoreAdjust\": \"0\",\n            \"OnFailureIsolate\": \"no\",\n            \"PermissionsStartOnly\": \"no\",\n            \"PrivateNetwork\": \"no\",\n            \"PrivateTmp\": \"no\",\n            \"RefuseManualStart\": \"no\",\n            \"RefuseManualStop\": \"no\",\n            \"RemainAfterExit\": \"no\",\n            \"Requires\": \"basic.target\",\n            \"Restart\": \"no\",\n            \"RestartUSec\": \"100ms\",\n            \"Result\": \"success\",\n            \"RootDirectoryStartOnly\": \"no\",\n            \"SameProcessGroup\": \"no\",\n            \"SecureBits\": \"0\",\n            \"SendSIGHUP\": \"no\",\n            \"SendSIGKILL\": \"yes\",\n            \"Slice\": \"system.slice\",\n            \"StandardError\": \"inherit\",\n            \"StandardInput\": \"null\",\n            \"StandardOutput\": \"journal\",\n            \"StartLimitAction\": \"none\",\n            \"StartLimitBurst\": \"5\",\n            \"StartLimitInterval\": \"10000000\",\n            \"StatusErrno\": \"0\",\n            \"StopWhenUnneeded\": \"no\",\n            \"SubState\": \"running\",\n            \"SyslogLevelPrefix\": \"yes\",\n            \"SyslogPriority\": \"30\",\n            \"TTYReset\": \"no\",\n            \"TTYVHangup\": \"no\",\n            \"TTYVTDisallocate\": \"no\",\n            \"TimeoutStartUSec\": \"1min 30s\",\n            \"TimeoutStopUSec\": \"1min 30s\",\n            \"TimerSlackNSec\": \"50000\",\n            \"Transient\": \"no\",\n            \"Type\": \"simple\",\n            \"UMask\": \"0022\",\n            \"UnitFileState\": \"enabled\",\n            \"WantedBy\": \"multi-user.target\",\n            \"Wants\": \"system.slice\",\n            \"WatchdogTimestampMonotonic\": \"0\",\n            \"WatchdogUSec\": \"0\",\n        }\n"},{"normalizedName":"Sysvinit","module":"sysvinit","short_description":"Manage SysV services.","description":["Controls services on target hosts that use the SysV init system."],"options":{"arguments":{"normalizedName":"Arguments","structTag":"`yaml:\"arguments,omitempty\" json:\"arguments,omitempty\"`","goType":"string","goElements":"","description":["Additional arguments provided on the command line that some init scripts accept."],"type":"str","required":false,"default":null,"elements":"","aliases":["args"]},"daemonize":{"normalizedName":"Daemonize","structTag":"`yaml:\"daemonize,omitempty\" json:\"daemonize,omitempty\"`","goType":"bool","goElements":"","description":["Have the module daemonize as the service itself might not do so properly.","This is useful with badly written init scripts or daemons, which commonly manifests as the task hanging as it is still holding the tty or the service dying when the task is over as the connection closes the session."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"enabled":{"normalizedName":"Enabled","structTag":"`yaml:\"enabled,omitempty\" json:\"enabled,omitempty\"`","goType":"bool","goElements":"","description":["Whether the service should start on boot. B(At least one of state and enabled are required.)"],"type":"bool","required":false,"default":null,"elements":"","aliases":null},"name":{"normalizedName":"Name","structTag":"`yaml:\"name,omitempty\" json:\"name,omitempty\"`","goType":"string","goElements":"","description":["Name of the service."],"type":"str","required":true,"default":null,"elements":"","aliases":["service"]},"pattern":{"normalizedName":"Pattern","structTag":"`yaml:\"pattern,omitempty\" json:\"pattern,omitempty\"`","goType":"string","goElements":"","description":["A substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.","If the string is found, the service will be assumed to be running.","This option is mainly for use with init scripts that don't support the 'status' option."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"runlevels":{"normalizedName":"Runlevels","structTag":"`yaml:\"runlevels,omitempty\" json:\"runlevels,omitempty\"`","goType":"[]string","goElements":"","description":["The runlevels this script should be enabled/disabled from.","Use this to override the defaults set by the package or init script itself."],"type":"list","required":false,"default":null,"elements":"str","aliases":null},"sleep":{"normalizedName":"Sleep","structTag":"`yaml:\"sleep,omitempty\" json:\"sleep,omitempty\"`","goType":"int","goElements":"","description":["If the service is being C(restarted) or C(reloaded) then sleep this many seconds between the stop and start command. This helps to workaround badly behaving services."],"type":"int","required":false,"default":1,"elements":"","aliases":null},"state":{"normalizedName":"State","structTag":"`yaml:\"state,omitempty\" json:\"state,omitempty\"`","goType":"string","goElements":"","description":["C(started)/C(stopped) are idempotent actions that will not run commands unless necessary. Not all init scripts support C(restarted) nor C(reloaded) natively, so these will both trigger a stop and start as needed."],"type":"str","required":false,"default":null,"elements":"","aliases":null}},"returns":{"results":{"normalizedName":"Results","description":"results from actions taken","returned":"always","type":"complex","sample":{"attempts":1,"changed":true,"name":"apache2","status":{"enabled":{"changed":true,"rc":0,"stderr":"","stdout":""},"stopped":{"changed":true,"rc":0,"stderr":"","stdout":"Stopping web server: apache2.\n"}}},"goType":"interface{}","structTag":"`yaml:\"results,omitempty\" json:\"results,omitempty\"`"}},"doc":"\nmodule: sysvinit\nauthor:\n    - \"Ansible Core Team\"\nversion_added: \"2.6\"\nshort_description:  Manage SysV services.\ndescription:\n    - Controls services on target hosts that use the SysV init system.\noptions:\n    name:\n        required: true\n        description:\n            - Name of the service.\n        type: str\n        aliases: ['service']\n    state:\n        choices: [ 'started', 'stopped', 'restarted', 'reloaded' ]\n        description:\n            - C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.\n              Not all init scripts support C(restarted) nor C(reloaded) natively, so these will both trigger a stop and start as needed.\n        type: str\n    enabled:\n        type: bool\n        description:\n            - Whether the service should start on boot. B(At least one of state and enabled are required.)\n    sleep:\n        default: 1\n        description:\n            - If the service is being C(restarted) or C(reloaded) then sleep this many seconds between the stop and start command.\n              This helps to workaround badly behaving services.\n        type: int\n    pattern:\n        description:\n            - A substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.\n            - If the string is found, the service will be assumed to be running.\n            - \"This option is mainly for use with init scripts that don't support the 'status' option.\"\n        type: str\n    runlevels:\n        description:\n            - The runlevels this script should be enabled/disabled from.\n            - Use this to override the defaults set by the package or init script itself.\n        type: list\n        elements: str\n    arguments:\n        description:\n            - Additional arguments provided on the command line that some init scripts accept.\n        type: str\n        aliases: [ 'args' ]\n    daemonize:\n        type: bool\n        description:\n            - Have the module daemonize as the service itself might not do so properly.\n            - This is useful with badly written init scripts or daemons, which\n              commonly manifests as the task hanging as it is still holding the\n              tty or the service dying when the task is over as the connection\n              closes the session.\n        default: no\nextends_documentation_fragment: action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    platform:\n        platforms: posix\nnotes:\n    - One option other than name is required.\n    - The service names might vary by specific OS/distribution\nrequirements:\n    - That the service managed has a corresponding init script.\n","return":"\nresults:\n    description: results from actions taken\n    returned: always\n    type: complex\n    sample: {\n            \"attempts\": 1,\n            \"changed\": true,\n            \"name\": \"apache2\",\n            \"status\": {\n                \"enabled\": {\n                    \"changed\": true,\n                    \"rc\": 0,\n                    \"stderr\": \"\",\n                    \"stdout\": \"\"\n                },\n                \"stopped\": {\n                    \"changed\": true,\n                    \"rc\": 0,\n                    \"stderr\": \"\",\n                    \"stdout\": \"Stopping web server: apache2.\\n\"\n                }\n            }\n        }\n"},{"normalizedName":"Tempfile","module":"tempfile","short_description":"Creates temporary files and directories","description":["The C(tempfile) module creates temporary files and directories. C(mktemp) command takes different parameters on various systems, this module helps to avoid troubles related to that. Files/directories created by module are accessible only by creator. In case you need to make them world-accessible you need to use M(ansible.builtin.file) module.","For Windows targets, use the M(ansible.windows.win_tempfile) module instead."],"options":{"path":{"normalizedName":"Path","structTag":"`yaml:\"path,omitempty\" json:\"path,omitempty\"`","goType":"string","goElements":"","description":["Location where temporary file or directory should be created.","If path is not specified, the default system temporary directory will be used."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"prefix":{"normalizedName":"Prefix","structTag":"`yaml:\"prefix,omitempty\" json:\"prefix,omitempty\"`","goType":"string","goElements":"","description":["Prefix of file/directory name created by module."],"type":"str","required":false,"default":"ansible.","elements":"","aliases":null},"state":{"normalizedName":"State","structTag":"`yaml:\"state,omitempty\" json:\"state,omitempty\"`","goType":"string","goElements":"","description":["Whether to create file or directory."],"type":"str","required":false,"default":"file","elements":"","aliases":null},"suffix":{"normalizedName":"Suffix","structTag":"`yaml:\"suffix,omitempty\" json:\"suffix,omitempty\"`","goType":"string","goElements":"","description":["Suffix of file/directory name created by module."],"type":"str","required":false,"default":"","elements":"","aliases":null}},"returns":{"path":{"normalizedName":"Path","description":"Path to created file or directory.","returned":"success","type":"str","sample":"/tmp/ansible.bMlvdk","goType":"string","structTag":"`yaml:\"path,omitempty\" json:\"path,omitempty\"`"}},"doc":"\n---\nmodule: tempfile\nversion_added: \"2.3\"\nshort_description: Creates temporary files and directories\ndescription:\n  - The C(tempfile) module creates temporary files and directories. C(mktemp) command takes different parameters on various systems, this module helps\n    to avoid troubles related to that. Files/directories created by module are accessible only by creator. In case you need to make them world-accessible\n    you need to use M(ansible.builtin.file) module.\n  - For Windows targets, use the M(ansible.windows.win_tempfile) module instead.\noptions:\n  state:\n    description:\n      - Whether to create file or directory.\n    type: str\n    choices: [ directory, file ]\n    default: file\n  path:\n    description:\n      - Location where temporary file or directory should be created.\n      - If path is not specified, the default system temporary directory will be used.\n    type: path\n  prefix:\n    description:\n      - Prefix of file/directory name created by module.\n    type: str\n    default: ansible.\n  suffix:\n    description:\n      - Suffix of file/directory name created by module.\n    type: str\n    default: \"\"\nextends_documentation_fragment: action_common_attributes\nattributes:\n    check_mode:\n        support: none\n    diff_mode:\n        support: none\n    platform:\n        platforms: posix\nseealso:\n- module: ansible.builtin.file\n- module: ansible.windows.win_tempfile\nauthor:\n  - Krzysztof Magosa (@krzysztof-magosa)\n","return":"\npath:\n  description: Path to created file or directory.\n  returned: success\n  type: str\n  sample: \"/tmp/ansible.bMlvdk\"\n"},{"normalizedName":"Template","module":"template","short_description":"Template a file out to a target host","description":null,"options":{"follow":{"normalizedName":"Follow","structTag":"`yaml:\"follow,omitempty\" json:\"follow,omitempty\"`","goType":"bool","goElements":"","description":["Determine whether symbolic links should be followed.","When set to C(yes) symbolic links will be followed, if they exist.","When set to C(no) symbolic links will not be followed.","Previous to Ansible 2.4, this was hardcoded as C(yes)."],"type":"bool","required":false,"default":"no","elements":"","aliases":null}},"returns":{},"doc":"\n---\nmodule: template\nversion_added: historical\nshort_description: Template a file out to a target host\noptions:\n  follow:\n    description:\n    - Determine whether symbolic links should be followed.\n    - When set to C(yes) symbolic links will be followed, if they exist.\n    - When set to C(no) symbolic links will not be followed.\n    - Previous to Ansible 2.4, this was hardcoded as C(yes).\n    type: bool\n    default: no\n    version_added: '2.4'\nnotes:\n- For Windows you can use M(ansible.windows.win_template) which uses '\\\\r\\\\n' as C(newline_sequence) by default.\n- The C(jinja2_native) setting has no effect. Native types are never used in the C(template) module which is by design used for generating text files.\n  For working with templates and utilizing Jinja2 native types see the C(jinja2_native) parameter of the C(template lookup).\nseealso:\n- module: ansible.builtin.copy\n- module: ansible.windows.win_copy\n- module: ansible.windows.win_template\nauthor:\n- Ansible Core Team\n- Michael DeHaan\nextends_documentation_fragment:\n- action_common_attributes\n- action_common_attributes.flow\n- action_common_attributes.files\n- backup\n- files\n- template_common\n- validate\nattributes:\n    action:\n      support: full\n    async:\n      support: none\n    bypass_host_loop:\n      support: none\n    check_mode:\n      support: full\n    diff_mode:\n      support: full\n    platform:\n      platforms: posix\n    safe_file_operations:\n      support: full\n    vault:\n      support: full\n","return":""},{"normalizedName":"Unarchive","module":"unarchive","short_description":"Unpacks an archive after (optionally) copying it from the local machine","description":["The C(unarchive) module unpacks an archive. It will not unpack a compressed file that does not contain an archive.","By default, it will copy the source file from the local system to the target before unpacking.","Set C(remote_src=yes) to unpack an archive which already exists on the target.","If checksum validation is desired, use M(ansible.builtin.get_url) or M(ansible.builtin.uri) instead to fetch the file and set C(remote_src=yes).","For Windows targets, use the M(community.windows.win_unzip) module instead."],"options":{"copy":{"normalizedName":"Copy","structTag":"`yaml:\"copy,omitempty\" json:\"copy,omitempty\"`","goType":"bool","goElements":"","description":["If true, the file is copied from local controller to the managed (remote) node, otherwise, the plugin will look for src archive on the managed machine.","This option has been deprecated in favor of C(remote_src).","This option is mutually exclusive with C(remote_src)."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null},"creates":{"normalizedName":"Creates","structTag":"`yaml:\"creates,omitempty\" json:\"creates,omitempty\"`","goType":"string","goElements":"","description":["If the specified absolute path (file or directory) already exists, this step will B(not) be run."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"dest":{"normalizedName":"Dest","structTag":"`yaml:\"dest,omitempty\" json:\"dest,omitempty\"`","goType":"string","goElements":"","description":["Remote absolute path where the archive should be unpacked."],"type":"path","required":true,"default":null,"elements":"","aliases":null},"exclude":{"normalizedName":"Exclude","structTag":"`yaml:\"exclude,omitempty\" json:\"exclude,omitempty\"`","goType":"[]string","goElements":"","description":["List the directory and file entries that you would like to exclude from the unarchive action.","Mutually exclusive with C(include)."],"type":"list","required":false,"default":[],"elements":"str","aliases":null},"extra_opts":{"normalizedName":"ExtraOpts","structTag":"`yaml:\"extra_opts,omitempty\" json:\"extra_opts,omitempty\"`","goType":"[]string","goElements":"","description":["Specify additional options by passing in an array.","Each space-separated command-line option should be a new element of the array. See examples.","Command-line options with multiple elements must use multiple lines in the array, one for each element."],"type":"list","required":false,"default":"","elements":"str","aliases":null},"include":{"normalizedName":"Include","structTag":"`yaml:\"include,omitempty\" json:\"include,omitempty\"`","goType":"[]string","goElements":"","description":["List of directory and file entries that you would like to extract from the archive. If C(include) is not empty, only files listed here will be extracted.","Mutually exclusive with C(exclude)."],"type":"list","required":false,"default":[],"elements":"str","aliases":null},"io_buffer_size":{"normalizedName":"IoBufferSize","structTag":"`yaml:\"io_buffer_size,omitempty\" json:\"io_buffer_size,omitempty\"`","goType":"int","goElements":"","description":["Size of the volatile memory buffer that is used for extracting files from the archive in bytes."],"type":"int","required":false,"default":65536,"elements":"","aliases":null},"keep_newer":{"normalizedName":"KeepNewer","structTag":"`yaml:\"keep_newer,omitempty\" json:\"keep_newer,omitempty\"`","goType":"bool","goElements":"","description":["Do not replace existing files that are newer than files from the archive."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"list_files":{"normalizedName":"ListFiles","structTag":"`yaml:\"list_files,omitempty\" json:\"list_files,omitempty\"`","goType":"bool","goElements":"","description":["If set to True, return the list of files that are contained in the tarball."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"remote_src":{"normalizedName":"RemoteSrc","structTag":"`yaml:\"remote_src,omitempty\" json:\"remote_src,omitempty\"`","goType":"bool","goElements":"","description":["Set to C(yes) to indicate the archived file is already on the remote system and not local to the Ansible controller.","This option is mutually exclusive with C(copy)."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"src":{"normalizedName":"Src","structTag":"`yaml:\"src,omitempty\" json:\"src,omitempty\"`","goType":"string","goElements":"","description":["If C(remote_src=no) (default), local path to archive file to copy to the target server; can be absolute or relative. If C(remote_src=yes), path on the target server to existing archive file to unpack.","If C(remote_src=yes) and C(src) contains C(://), the remote machine will download the file from the URL first. (version_added 2.0). This is only for simple cases, for full download support use the M(ansible.builtin.get_url) module."],"type":"path","required":true,"default":null,"elements":"","aliases":null},"validate_certs":{"normalizedName":"ValidateCerts","structTag":"`yaml:\"validate_certs,omitempty\" json:\"validate_certs,omitempty\"`","goType":"bool","goElements":"","description":["This only applies if using a https URL as the source of the file.","This should only set to C(no) used on personally controlled sites using self-signed certificate.","Prior to 2.2 the code worked as if this was set to C(yes)."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null}},"returns":{"dest":{"normalizedName":"Dest","description":"Path to the destination directory.","returned":"always","type":"str","sample":"/opt/software","goType":"string","structTag":"`yaml:\"dest,omitempty\" json:\"dest,omitempty\"`"},"files":{"normalizedName":"Files","description":"List of all the files in the archive.","returned":"When I(list_files) is True","type":"list","sample":"[\"file1\", \"file2\"]","goType":"[]map[string]interface{}","structTag":"`yaml:\"files,omitempty\" json:\"files,omitempty\"`"},"gid":{"normalizedName":"Gid","description":"Numerical ID of the group that owns the destination directory.","returned":"always","type":"int","sample":1000,"goType":"int","structTag":"`yaml:\"gid,omitempty\" json:\"gid,omitempty\"`"},"group":{"normalizedName":"Group","description":"Name of the group that owns the destination directory.","returned":"always","type":"str","sample":"librarians","goType":"string","structTag":"`yaml:\"group,omitempty\" json:\"group,omitempty\"`"},"handler":{"normalizedName":"Handler","description":"Archive software handler used to extract and decompress the archive.","returned":"always","type":"str","sample":"TgzArchive","goType":"string","structTag":"`yaml:\"handler,omitempty\" json:\"handler,omitempty\"`"},"mode":{"normalizedName":"Mode","description":"String that represents the octal permissions of the destination directory.","returned":"always","type":"str","sample":"0755","goType":"string","structTag":"`yaml:\"mode,omitempty\" json:\"mode,omitempty\"`"},"owner":{"normalizedName":"Owner","description":"Name of the user that owns the destination directory.","returned":"always","type":"str","sample":"paul","goType":"string","structTag":"`yaml:\"owner,omitempty\" json:\"owner,omitempty\"`"},"size":{"normalizedName":"Size","description":"The size of destination directory in bytes. Does not include the size of files or subdirectories contained within.","returned":"always","type":"int","sample":36,"goType":"int","structTag":"`yaml:\"size,omitempty\" json:\"size,omitempty\"`"},"src":{"normalizedName":"Src","description":["The source archive's path.","If I(src) was a remote web URL, or from the local ansible controller, this shows the temporary location where the download was stored."],"returned":"always","type":"str","sample":"/home/paul/test.tar.gz","goType":"string","structTag":"`yaml:\"src,omitempty\" json:\"src,omitempty\"`"},"state":{"normalizedName":"State","description":"State of the destination. Effectively always \"directory\".","returned":"always","type":"str","sample":"directory","goType":"string","structTag":"`yaml:\"state,omitempty\" json:\"state,omitempty\"`"},"uid":{"normalizedName":"Uid","description":"Numerical ID of the user that owns the destination directory.","returned":"always","type":"int","sample":1000,"goType":"int","structTag":"`yaml:\"uid,omitempty\" json:\"uid,omitempty\"`"}},"doc":"\n---\nmodule: unarchive\nversion_added: '1.4'\nshort_description: Unpacks an archive after (optionally) copying it from the local machine\ndescription:\n     - The C(unarchive) module unpacks an archive. It will not unpack a compressed file that does not contain an archive.\n     - By default, it will copy the source file from the local system to the target before unpacking.\n     - Set C(remote_src=yes) to unpack an archive which already exists on the target.\n     - If checksum validation is desired, use M(ansible.builtin.get_url) or M(ansible.builtin.uri) instead to fetch the file and set C(remote_src=yes).\n     - For Windows targets, use the M(community.windows.win_unzip) module instead.\noptions:\n  src:\n    description:\n      - If C(remote_src=no) (default), local path to archive file to copy to the target server; can be absolute or relative. If C(remote_src=yes), path on the\n        target server to existing archive file to unpack.\n      - If C(remote_src=yes) and C(src) contains C(://), the remote machine will download the file from the URL first. (version_added 2.0). This is only for\n        simple cases, for full download support use the M(ansible.builtin.get_url) module.\n    type: path\n    required: true\n  dest:\n    description:\n      - Remote absolute path where the archive should be unpacked.\n    type: path\n    required: true\n  copy:\n    description:\n      - If true, the file is copied from local controller to the managed (remote) node, otherwise, the plugin will look for src archive on the managed machine.\n      - This option has been deprecated in favor of C(remote_src).\n      - This option is mutually exclusive with C(remote_src).\n    type: bool\n    default: yes\n  creates:\n    description:\n      - If the specified absolute path (file or directory) already exists, this step will B(not) be run.\n    type: path\n    version_added: \"1.6\"\n  io_buffer_size:\n    description:\n      - Size of the volatile memory buffer that is used for extracting files from the archive in bytes.\n    type: int\n    default: 65536\n    version_added: \"2.12\"\n  list_files:\n    description:\n      - If set to True, return the list of files that are contained in the tarball.\n    type: bool\n    default: no\n    version_added: \"2.0\"\n  exclude:\n    description:\n      - List the directory and file entries that you would like to exclude from the unarchive action.\n      - Mutually exclusive with C(include).\n    type: list\n    default: []\n    elements: str\n    version_added: \"2.1\"\n  include:\n    description:\n      - List of directory and file entries that you would like to extract from the archive. If C(include)\n        is not empty, only files listed here will be extracted.\n      - Mutually exclusive with C(exclude).\n    type: list\n    default: []\n    elements: str\n    version_added: \"2.11\"\n  keep_newer:\n    description:\n      - Do not replace existing files that are newer than files from the archive.\n    type: bool\n    default: no\n    version_added: \"2.1\"\n  extra_opts:\n    description:\n      - Specify additional options by passing in an array.\n      - Each space-separated command-line option should be a new element of the array. See examples.\n      - Command-line options with multiple elements must use multiple lines in the array, one for each element.\n    type: list\n    elements: str\n    default: \"\"\n    version_added: \"2.1\"\n  remote_src:\n    description:\n      - Set to C(yes) to indicate the archived file is already on the remote system and not local to the Ansible controller.\n      - This option is mutually exclusive with C(copy).\n    type: bool\n    default: no\n    version_added: \"2.2\"\n  validate_certs:\n    description:\n      - This only applies if using a https URL as the source of the file.\n      - This should only set to C(no) used on personally controlled sites using self-signed certificate.\n      - Prior to 2.2 the code worked as if this was set to C(yes).\n    type: bool\n    default: yes\n    version_added: \"2.2\"\nextends_documentation_fragment:\n- action_common_attributes\n- action_common_attributes.flow\n- action_common_attributes.files\n- decrypt\n- files\nattributes:\n    action:\n      support: full\n    async:\n      support: none\n    bypass_host_loop:\n      support: none\n    check_mode:\n      support: full\n    diff_mode:\n      support: partial\n      details: Uses gtar's C(--diff) arg to calculate if changed or not. If this C(arg) is not supported, it will always unpack the archive.\n    platform:\n      platforms: posix\n    safe_file_operations:\n      support: none\n    vault:\n      support: full\ntodo:\n    - Re-implement tar support using native tarfile module.\n    - Re-implement zip support using native zipfile module.\nnotes:\n    - Requires C(zipinfo) and C(gtar)/C(unzip) command on target host.\n    - Requires C(zstd) command on target host to expand I(.tar.zst) files.\n    - Can handle I(.zip) files using C(unzip) as well as I(.tar), I(.tar.gz), I(.tar.bz2), I(.tar.xz), and I(.tar.zst) files using C(gtar).\n    - Does not handle I(.gz) files, I(.bz2) files, I(.xz), or I(.zst) files that do not contain a I(.tar) archive.\n    - Existing files/directories in the destination which are not in the archive\n      are not touched. This is the same behavior as a normal archive extraction.\n    - Existing files/directories in the destination which are not in the archive\n      are ignored for purposes of deciding if the archive should be unpacked or not.\nseealso:\n- module: community.general.archive\n- module: community.general.iso_extract\n- module: community.windows.win_unzip\nauthor: Michael DeHaan\n","return":"\ndest:\n  description: Path to the destination directory.\n  returned: always\n  type: str\n  sample: /opt/software\nfiles:\n  description: List of all the files in the archive.\n  returned: When I(list_files) is True\n  type: list\n  sample: '[\"file1\", \"file2\"]'\ngid:\n  description: Numerical ID of the group that owns the destination directory.\n  returned: always\n  type: int\n  sample: 1000\ngroup:\n  description: Name of the group that owns the destination directory.\n  returned: always\n  type: str\n  sample: \"librarians\"\nhandler:\n  description: Archive software handler used to extract and decompress the archive.\n  returned: always\n  type: str\n  sample: \"TgzArchive\"\nmode:\n  description: String that represents the octal permissions of the destination directory.\n  returned: always\n  type: str\n  sample: \"0755\"\nowner:\n  description: Name of the user that owns the destination directory.\n  returned: always\n  type: str\n  sample: \"paul\"\nsize:\n  description: The size of destination directory in bytes. Does not include the size of files or subdirectories contained within.\n  returned: always\n  type: int\n  sample: 36\nsrc:\n  description:\n    - The source archive's path.\n    - If I(src) was a remote web URL, or from the local ansible controller, this shows the temporary location where the download was stored.\n  returned: always\n  type: str\n  sample: \"/home/paul/test.tar.gz\"\nstate:\n  description: State of the destination. Effectively always \"directory\".\n  returned: always\n  type: str\n  sample: \"directory\"\nuid:\n  description: Numerical ID of the user that owns the destination directory.\n  returned: always\n  type: int\n  sample: 1000\n"},{"normalizedName":"Uri","module":"uri","short_description":"Interacts with webservices","description":["Interacts with HTTP and HTTPS web services and supports Digest, Basic and WSSE HTTP authentication mechanisms.","For Windows targets, use the M(ansible.windows.win_uri) module instead."],"options":{"body":{"normalizedName":"Body","structTag":"`yaml:\"body,omitempty\" json:\"body,omitempty\"`","goType":"string","goElements":"","description":["The body of the http request/response to the web service. If C(body_format) is set to 'json' it will take an already formatted JSON string or convert a data structure into JSON.","If C(body_format) is set to 'form-urlencoded' it will convert a dictionary or list of tuples into an 'application/x-www-form-urlencoded' string. (Added in v2.7)","If C(body_format) is set to 'form-multipart' it will convert a dictionary into 'multipart/form-multipart' body. (Added in v2.10)"],"type":"raw","required":false,"default":null,"elements":"","aliases":null},"body_format":{"normalizedName":"BodyFormat","structTag":"`yaml:\"body_format,omitempty\" json:\"body_format,omitempty\"`","goType":"string","goElements":"","description":["The serialization format of the body. When set to C(json), C(form-multipart), or C(form-urlencoded), encodes the body argument, if needed, and automatically sets the Content-Type header accordingly.","As of v2.3 it is possible to override the C(Content-Type) header, when set to C(json) or C(form-urlencoded) via the I(headers) option.","The 'Content-Type' header cannot be overridden when using C(form-multipart)","C(form-urlencoded) was added in v2.7.","C(form-multipart) was added in v2.10."],"type":"str","required":false,"default":"raw","elements":"","aliases":null},"ca_path":{"normalizedName":"CaPath","structTag":"`yaml:\"ca_path,omitempty\" json:\"ca_path,omitempty\"`","goType":"string","goElements":"","description":["PEM formatted file that contains a CA certificate to be used for validation"],"type":"path","required":false,"default":null,"elements":"","aliases":null},"client_cert":{"normalizedName":"ClientCert","structTag":"`yaml:\"client_cert,omitempty\" json:\"client_cert,omitempty\"`","goType":"string","goElements":"","description":["PEM formatted certificate chain file to be used for SSL client authentication.","This file can also include the key as well, and if the key is included, I(client_key) is not required"],"type":"path","required":false,"default":null,"elements":"","aliases":null},"client_key":{"normalizedName":"ClientKey","structTag":"`yaml:\"client_key,omitempty\" json:\"client_key,omitempty\"`","goType":"string","goElements":"","description":["PEM formatted file that contains your private key to be used for SSL client authentication.","If I(client_cert) contains both the certificate and key, this option is not required."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"creates":{"normalizedName":"Creates","structTag":"`yaml:\"creates,omitempty\" json:\"creates,omitempty\"`","goType":"string","goElements":"","description":["A filename, when it already exists, this step will not be run."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"dest":{"normalizedName":"Dest","structTag":"`yaml:\"dest,omitempty\" json:\"dest,omitempty\"`","goType":"string","goElements":"","description":["A path of where to download the file to (if desired). If I(dest) is a directory, the basename of the file on the remote server will be used."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"follow_redirects":{"normalizedName":"FollowRedirects","structTag":"`yaml:\"follow_redirects,omitempty\" json:\"follow_redirects,omitempty\"`","goType":"string","goElements":"","description":["Whether or not the URI module should follow redirects. C(all) will follow all redirects. C(safe) will follow only \"safe\" redirects, where \"safe\" means that the client is only doing a GET or HEAD on the URI to which it is being redirected. C(none) will not follow any redirects. Note that C(yes) and C(no) choices are accepted for backwards compatibility, where C(yes) is the equivalent of C(all) and C(no) is the equivalent of C(safe). C(yes) and C(no) are deprecated and will be removed in some future version of Ansible."],"type":"str","required":false,"default":"safe","elements":"","aliases":null},"force":{"normalizedName":"Force","structTag":"`yaml:\"force,omitempty\" json:\"force,omitempty\"`","goType":"bool","goElements":"","description":["If C(yes) do not get a cached copy."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"force_basic_auth":{"normalizedName":"ForceBasicAuth","structTag":"`yaml:\"force_basic_auth,omitempty\" json:\"force_basic_auth,omitempty\"`","goType":"bool","goElements":"","description":["Force the sending of the Basic authentication header upon initial request.","The library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"headers":{"normalizedName":"Headers","structTag":"`yaml:\"headers,omitempty\" json:\"headers,omitempty\"`","goType":"map[string]string","goElements":"","description":["Add custom HTTP headers to a request in the format of a YAML hash. As of C(2.3) supplying C(Content-Type) here will override the header generated by supplying C(json) or C(form-urlencoded) for I(body_format)."],"type":"dict","required":false,"default":null,"elements":"","aliases":null},"http_agent":{"normalizedName":"HttpAgent","structTag":"`yaml:\"http_agent,omitempty\" json:\"http_agent,omitempty\"`","goType":"string","goElements":"","description":["Header to identify as, generally appears in web server logs."],"type":"str","required":false,"default":"ansible-httpget","elements":"","aliases":null},"method":{"normalizedName":"Method","structTag":"`yaml:\"method,omitempty\" json:\"method,omitempty\"`","goType":"string","goElements":"","description":["The HTTP method of the request or response.","In more recent versions we do not restrict the method at the module level anymore but it still must be a valid method accepted by the service handling the request."],"type":"str","required":false,"default":"GET","elements":"","aliases":null},"remote_src":{"normalizedName":"RemoteSrc","structTag":"`yaml:\"remote_src,omitempty\" json:\"remote_src,omitempty\"`","goType":"bool","goElements":"","description":["If C(no), the module will search for the C(src) on the controller node.","If C(yes), the module will search for the C(src) on the managed (remote) node."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"removes":{"normalizedName":"Removes","structTag":"`yaml:\"removes,omitempty\" json:\"removes,omitempty\"`","goType":"string","goElements":"","description":["A filename, when it does not exist, this step will not be run."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"return_content":{"normalizedName":"ReturnContent","structTag":"`yaml:\"return_content,omitempty\" json:\"return_content,omitempty\"`","goType":"bool","goElements":"","description":["Whether or not to return the body of the response as a \"content\" key in the dictionary result no matter it succeeded or failed.","Independently of this option, if the reported Content-type is \"application/json\", then the JSON is always loaded into a key called C(json) in the dictionary results."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"src":{"normalizedName":"Src","structTag":"`yaml:\"src,omitempty\" json:\"src,omitempty\"`","goType":"string","goElements":"","description":["Path to file to be submitted to the remote server.","Cannot be used with I(body)."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"status_code":{"normalizedName":"StatusCode","structTag":"`yaml:\"status_code,omitempty\" json:\"status_code,omitempty\"`","goType":"[]int","goElements":"","description":["A list of valid, numeric, HTTP status codes that signifies success of the request."],"type":"list","required":false,"default":[200],"elements":"int","aliases":null},"timeout":{"normalizedName":"Timeout","structTag":"`yaml:\"timeout,omitempty\" json:\"timeout,omitempty\"`","goType":"int","goElements":"","description":["The socket level timeout in seconds"],"type":"int","required":false,"default":30,"elements":"","aliases":null},"unix_socket":{"normalizedName":"UnixSocket","structTag":"`yaml:\"unix_socket,omitempty\" json:\"unix_socket,omitempty\"`","goType":"string","goElements":"","description":["Path to Unix domain socket to use for connection"],"type":"path","required":false,"default":null,"elements":"","aliases":null},"unredirected_headers":{"normalizedName":"UnredirectedHeaders","structTag":"`yaml:\"unredirected_headers,omitempty\" json:\"unredirected_headers,omitempty\"`","goType":"[]string","goElements":"","description":["A list of header names that will not be sent on subsequent redirected requests. This list is case insensitive. By default all headers will be redirected. In some cases it may be beneficial to list headers such as C(Authorization) here to avoid potential credential exposure."],"type":"list","required":false,"default":[],"elements":"str","aliases":null},"url":{"normalizedName":"Url","structTag":"`yaml:\"url,omitempty\" json:\"url,omitempty\"`","goType":"string","goElements":"","description":["HTTP or HTTPS URL in the form (http|https)://host.domain[:port]/path"],"type":"str","required":true,"default":null,"elements":"","aliases":null},"url_password":{"normalizedName":"UrlPassword","structTag":"`yaml:\"url_password,omitempty\" json:\"url_password,omitempty\"`","goType":"string","goElements":"","description":["A password for the module to use for Digest, Basic or WSSE authentication."],"type":"str","required":false,"default":null,"elements":"","aliases":["password"]},"url_username":{"normalizedName":"UrlUsername","structTag":"`yaml:\"url_username,omitempty\" json:\"url_username,omitempty\"`","goType":"string","goElements":"","description":["A username for the module to use for Digest, Basic or WSSE authentication."],"type":"str","required":false,"default":null,"elements":"","aliases":["user"]},"use_gssapi":{"normalizedName":"UseGssapi","structTag":"`yaml:\"use_gssapi,omitempty\" json:\"use_gssapi,omitempty\"`","goType":"bool","goElements":"","description":["Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.","Requires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.","Credentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.","NTLM authentication is C(not) supported even if the GSSAPI mech for NTLM has been installed."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"use_proxy":{"normalizedName":"UseProxy","structTag":"`yaml:\"use_proxy,omitempty\" json:\"use_proxy,omitempty\"`","goType":"bool","goElements":"","description":["If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null},"validate_certs":{"normalizedName":"ValidateCerts","structTag":"`yaml:\"validate_certs,omitempty\" json:\"validate_certs,omitempty\"`","goType":"bool","goElements":"","description":["If C(no), SSL certificates will not be validated.","This should only set to C(no) used on personally controlled sites using self-signed certificates.","Prior to 1.9.2 the code defaulted to C(no)."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null}},"returns":{"content":{"normalizedName":"Content","description":"The response body content.","returned":"status not in status_code or return_content is true","type":"str","sample":"{}","goType":"string","structTag":"`yaml:\"content,omitempty\" json:\"content,omitempty\"`"},"cookies":{"normalizedName":"Cookies","description":"The cookie values placed in cookie jar.","returned":"on success","type":"dict","sample":{"SESSIONID":"[SESSIONID]"},"goType":"map[string]string","structTag":"`yaml:\"cookies,omitempty\" json:\"cookies,omitempty\"`"},"cookies_string":{"normalizedName":"CookiesString","description":"The value for future request Cookie headers.","returned":"on success","type":"str","sample":"SESSIONID=[SESSIONID]","goType":"string","structTag":"`yaml:\"cookies_string,omitempty\" json:\"cookies_string,omitempty\"`"},"elapsed":{"normalizedName":"Elapsed","description":"The number of seconds that elapsed while performing the download.","returned":"on success","type":"int","sample":23,"goType":"int","structTag":"`yaml:\"elapsed,omitempty\" json:\"elapsed,omitempty\"`"},"msg":{"normalizedName":"Msg","description":"The HTTP message from the request.","returned":"always","type":"str","sample":"OK (unknown bytes)","goType":"string","structTag":"`yaml:\"msg,omitempty\" json:\"msg,omitempty\"`"},"path":{"normalizedName":"Path","description":"destination file/path","returned":"dest is defined","type":"str","sample":"/path/to/file.txt","goType":"string","structTag":"`yaml:\"path,omitempty\" json:\"path,omitempty\"`"},"redirected":{"normalizedName":"Redirected","description":"Whether the request was redirected.","returned":"on success","type":"bool","sample":false,"goType":"bool","structTag":"`yaml:\"redirected,omitempty\" json:\"redirected,omitempty\"`"},"status":{"normalizedName":"Status","description":"The HTTP status code from the request.","returned":"always","type":"int","sample":200,"goType":"int","structTag":"`yaml:\"status,omitempty\" json:\"status,omitempty\"`"},"url":{"normalizedName":"Url","description":"The actual URL used for the request.","returned":"always","type":"str","sample":"https://www.ansible.com/","goType":"string","structTag":"`yaml:\"url,omitempty\" json:\"url,omitempty\"`"}},"doc":"\n---\nmodule: uri\nshort_description: Interacts with webservices\ndescription:\n  - Interacts with HTTP and HTTPS web services and supports Digest, Basic and WSSE\n    HTTP authentication mechanisms.\n  - For Windows targets, use the M(ansible.windows.win_uri) module instead.\nversion_added: \"1.1\"\noptions:\n  url:\n    description:\n      - HTTP or HTTPS URL in the form (http|https)://host.domain[:port]/path\n    type: str\n    required: true\n  dest:\n    description:\n      - A path of where to download the file to (if desired). If I(dest) is a\n        directory, the basename of the file on the remote server will be used.\n    type: path\n  url_username:\n    description:\n      - A username for the module to use for Digest, Basic or WSSE authentication.\n    type: str\n    aliases: [ user ]\n  url_password:\n    description:\n      - A password for the module to use for Digest, Basic or WSSE authentication.\n    type: str\n    aliases: [ password ]\n  body:\n    description:\n      - The body of the http request/response to the web service. If C(body_format) is set\n        to 'json' it will take an already formatted JSON string or convert a data structure\n        into JSON.\n      - If C(body_format) is set to 'form-urlencoded' it will convert a dictionary\n        or list of tuples into an 'application/x-www-form-urlencoded' string. (Added in v2.7)\n      - If C(body_format) is set to 'form-multipart' it will convert a dictionary\n        into 'multipart/form-multipart' body. (Added in v2.10)\n    type: raw\n  body_format:\n    description:\n      - The serialization format of the body. When set to C(json), C(form-multipart), or C(form-urlencoded), encodes\n        the body argument, if needed, and automatically sets the Content-Type header accordingly.\n      - As of v2.3 it is possible to override the C(Content-Type) header, when\n        set to C(json) or C(form-urlencoded) via the I(headers) option.\n      - The 'Content-Type' header cannot be overridden when using C(form-multipart)\n      - C(form-urlencoded) was added in v2.7.\n      - C(form-multipart) was added in v2.10.\n    type: str\n    choices: [ form-urlencoded, json, raw, form-multipart ]\n    default: raw\n    version_added: \"2.0\"\n  method:\n    description:\n      - The HTTP method of the request or response.\n      - In more recent versions we do not restrict the method at the module level anymore\n        but it still must be a valid method accepted by the service handling the request.\n    type: str\n    default: GET\n  return_content:\n    description:\n      - Whether or not to return the body of the response as a \"content\" key in\n        the dictionary result no matter it succeeded or failed.\n      - Independently of this option, if the reported Content-type is \"application/json\", then the JSON is\n        always loaded into a key called C(json) in the dictionary results.\n    type: bool\n    default: no\n  force_basic_auth:\n    description:\n      - Force the sending of the Basic authentication header upon initial request.\n      - The library used by the uri module only sends authentication information when a webservice\n        responds to an initial request with a 401 status. Since some basic auth services do not properly\n        send a 401, logins will fail.\n    type: bool\n    default: no\n  follow_redirects:\n    description:\n      - Whether or not the URI module should follow redirects. C(all) will follow all redirects.\n        C(safe) will follow only \"safe\" redirects, where \"safe\" means that the client is only\n        doing a GET or HEAD on the URI to which it is being redirected. C(none) will not follow\n        any redirects. Note that C(yes) and C(no) choices are accepted for backwards compatibility,\n        where C(yes) is the equivalent of C(all) and C(no) is the equivalent of C(safe). C(yes) and C(no)\n        are deprecated and will be removed in some future version of Ansible.\n    type: str\n    choices: ['all', 'no', 'none', 'safe', 'urllib2', 'yes']\n    default: safe\n  creates:\n    description:\n      - A filename, when it already exists, this step will not be run.\n    type: path\n  removes:\n    description:\n      - A filename, when it does not exist, this step will not be run.\n    type: path\n  status_code:\n    description:\n      - A list of valid, numeric, HTTP status codes that signifies success of the request.\n    type: list\n    elements: int\n    default: [ 200 ]\n  timeout:\n    description:\n      - The socket level timeout in seconds\n    type: int\n    default: 30\n  headers:\n    description:\n        - Add custom HTTP headers to a request in the format of a YAML hash. As\n          of C(2.3) supplying C(Content-Type) here will override the header\n          generated by supplying C(json) or C(form-urlencoded) for I(body_format).\n    type: dict\n    version_added: '2.1'\n  validate_certs:\n    description:\n      - If C(no), SSL certificates will not be validated.\n      - This should only set to C(no) used on personally controlled sites using self-signed certificates.\n      - Prior to 1.9.2 the code defaulted to C(no).\n    type: bool\n    default: yes\n    version_added: '1.9.2'\n  client_cert:\n    description:\n      - PEM formatted certificate chain file to be used for SSL client authentication.\n      - This file can also include the key as well, and if the key is included, I(client_key) is not required\n    type: path\n    version_added: '2.4'\n  client_key:\n    description:\n      - PEM formatted file that contains your private key to be used for SSL client authentication.\n      - If I(client_cert) contains both the certificate and key, this option is not required.\n    type: path\n    version_added: '2.4'\n  ca_path:\n    description:\n      - PEM formatted file that contains a CA certificate to be used for validation\n    type: path\n    version_added: '2.11'\n  src:\n    description:\n      - Path to file to be submitted to the remote server.\n      - Cannot be used with I(body).\n    type: path\n    version_added: '2.7'\n  remote_src:\n    description:\n      - If C(no), the module will search for the C(src) on the controller node.\n      - If C(yes), the module will search for the C(src) on the managed (remote) node.\n    type: bool\n    default: no\n    version_added: '2.7'\n  force:\n    description:\n      - If C(yes) do not get a cached copy.\n    type: bool\n    default: no\n  use_proxy:\n    description:\n      - If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.\n    type: bool\n    default: yes\n  unix_socket:\n    description:\n    - Path to Unix domain socket to use for connection\n    type: path\n    version_added: '2.8'\n  http_agent:\n    description:\n      - Header to identify as, generally appears in web server logs.\n    type: str\n    default: ansible-httpget\n  unredirected_headers:\n    description:\n      - A list of header names that will not be sent on subsequent redirected requests. This list is case\n        insensitive. By default all headers will be redirected. In some cases it may be beneficial to list\n        headers such as C(Authorization) here to avoid potential credential exposure.\n    default: []\n    type: list\n    elements: str\n    version_added: '2.12'\n  use_gssapi:\n    description:\n      - Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate\n        authentication.\n      - Requires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.\n      - Credentials for GSSAPI can be specified with I(url_username)/I(url_password) or with the GSSAPI env var\n        C(KRB5CCNAME) that specified a custom Kerberos credential cache.\n      - NTLM authentication is C(not) supported even if the GSSAPI mech for NTLM has been installed.\n    type: bool\n    default: no\n    version_added: '2.11'\nextends_documentation_fragment:\n  - action_common_attributes\n  - files\nattributes:\n    check_mode:\n        support: none\n    diff_mode:\n        support: none\n    platform:\n        platforms: posix\nnotes:\n  - The dependency on httplib2 was removed in Ansible 2.1.\n  - The module returns all the HTTP headers in lower-case.\n  - For Windows targets, use the M(ansible.windows.win_uri) module instead.\nseealso:\n- module: ansible.builtin.get_url\n- module: ansible.windows.win_uri\nauthor:\n- Romeo Theriault (@romeotheriault)\n","return":"\n# The return information includes all the HTTP headers in lower-case.\ncontent:\n  description: The response body content.\n  returned: status not in status_code or return_content is true\n  type: str\n  sample: \"{}\"\ncookies:\n  description: The cookie values placed in cookie jar.\n  returned: on success\n  type: dict\n  sample: {\"SESSIONID\": \"[SESSIONID]\"}\n  version_added: \"2.4\"\ncookies_string:\n  description: The value for future request Cookie headers.\n  returned: on success\n  type: str\n  sample: \"SESSIONID=[SESSIONID]\"\n  version_added: \"2.6\"\nelapsed:\n  description: The number of seconds that elapsed while performing the download.\n  returned: on success\n  type: int\n  sample: 23\nmsg:\n  description: The HTTP message from the request.\n  returned: always\n  type: str\n  sample: OK (unknown bytes)\npath:\n  description: destination file/path\n  returned: dest is defined\n  type: str\n  sample: /path/to/file.txt\nredirected:\n  description: Whether the request was redirected.\n  returned: on success\n  type: bool\n  sample: false\nstatus:\n  description: The HTTP status code from the request.\n  returned: always\n  type: int\n  sample: 200\nurl:\n  description: The actual URL used for the request.\n  returned: always\n  type: str\n  sample: https://www.ansible.com/\n"},{"normalizedName":"User","module":"user","short_description":"Manage user accounts","description":["Manage user accounts and user attributes.","For Windows targets, use the M(ansible.windows.win_user) module instead."],"options":{"append":{"normalizedName":"Append","structTag":"`yaml:\"append,omitempty\" json:\"append,omitempty\"`","goType":"bool","goElements":"","description":["If C(yes), add the user to the groups specified in C(groups).","If C(no), user will only be added to the groups specified in C(groups), removing them from all other groups."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"authorization":{"normalizedName":"Authorization","structTag":"`yaml:\"authorization,omitempty\" json:\"authorization,omitempty\"`","goType":"string","goElements":"","description":["Sets the authorization of the user.","Does nothing when used with other platforms.","Can set multiple authorizations using comma separation.","To delete all authorizations, use C(authorization='').","Currently supported on Illumos/Solaris."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"comment":{"normalizedName":"Comment","structTag":"`yaml:\"comment,omitempty\" json:\"comment,omitempty\"`","goType":"string","goElements":"","description":["Optionally sets the description (aka I(GECOS)) of user account."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"create_home":{"normalizedName":"CreateHome","structTag":"`yaml:\"create_home,omitempty\" json:\"create_home,omitempty\"`","goType":"bool","goElements":"","description":["Unless set to C(no), a home directory will be made for the user when the account is created or if the home directory does not exist.","Changed from C(createhome) to C(create_home) in Ansible 2.5."],"type":"bool","required":false,"default":"yes","elements":"","aliases":["createhome"]},"expires":{"normalizedName":"Expires","structTag":"`yaml:\"expires,omitempty\" json:\"expires,omitempty\"`","goType":"float64","goElements":"","description":["An expiry time for the user in epoch, it will be ignored on platforms that do not support this.","Currently supported on GNU/Linux, FreeBSD, and DragonFlyBSD.","Since Ansible 2.6 you can remove the expiry time by specifying a negative value. Currently supported on GNU/Linux and FreeBSD."],"type":"float","required":false,"default":null,"elements":"","aliases":null},"force":{"normalizedName":"Force","structTag":"`yaml:\"force,omitempty\" json:\"force,omitempty\"`","goType":"bool","goElements":"","description":["This only affects C(state=absent), it forces removal of the user and associated directories on supported platforms.","The behavior is the same as C(userdel --force), check the man page for C(userdel) on your system for details and support.","When used with C(generate_ssh_key=yes) this forces an existing key to be overwritten."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"generate_ssh_key":{"normalizedName":"GenerateSshKey","structTag":"`yaml:\"generate_ssh_key,omitempty\" json:\"generate_ssh_key,omitempty\"`","goType":"bool","goElements":"","description":["Whether to generate a SSH key for the user in question.","This will B(not) overwrite an existing SSH key unless used with C(force=yes)."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"group":{"normalizedName":"Group","structTag":"`yaml:\"group,omitempty\" json:\"group,omitempty\"`","goType":"string","goElements":"","description":["Optionally sets the user's primary group (takes a group name)."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"groups":{"normalizedName":"Groups","structTag":"`yaml:\"groups,omitempty\" json:\"groups,omitempty\"`","goType":"[]string","goElements":"","description":["List of groups user will be added to.","By default, the user is removed from all other groups. Configure C(append) to modify this.","When set to an empty string C(''), the user is removed from all groups except the primary group.","Before Ansible 2.3, the only input format allowed was a comma separated string."],"type":"list","required":false,"default":null,"elements":"str","aliases":null},"hidden":{"normalizedName":"Hidden","structTag":"`yaml:\"hidden,omitempty\" json:\"hidden,omitempty\"`","goType":"bool","goElements":"","description":["macOS only, optionally hide the user from the login window and system preferences.","The default will be C(yes) if the I(system) option is used."],"type":"bool","required":false,"default":null,"elements":"","aliases":null},"home":{"normalizedName":"Home","structTag":"`yaml:\"home,omitempty\" json:\"home,omitempty\"`","goType":"string","goElements":"","description":["Optionally set the user's home directory."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"local":{"normalizedName":"Local","structTag":"`yaml:\"local,omitempty\" json:\"local,omitempty\"`","goType":"bool","goElements":"","description":["Forces the use of \"local\" command alternatives on platforms that implement it.","This is useful in environments that use centralized authentication when you want to manipulate the local users (in other words, it uses C(luseradd) instead of C(useradd)).","This will check C(/etc/passwd) for an existing account before invoking commands. If the local account database exists somewhere other than C(/etc/passwd), this setting will not work properly.","This requires that the above commands as well as C(/etc/passwd) must exist on the target host, otherwise it will be a fatal error."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"login_class":{"normalizedName":"LoginClass","structTag":"`yaml:\"login_class,omitempty\" json:\"login_class,omitempty\"`","goType":"string","goElements":"","description":["Optionally sets the user's login class, a feature of most BSD OSs."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"move_home":{"normalizedName":"MoveHome","structTag":"`yaml:\"move_home,omitempty\" json:\"move_home,omitempty\"`","goType":"bool","goElements":"","description":["If set to C(yes) when used with C(home: ), attempt to move the user's old home directory to the specified directory if it isn't there already and the old home exists."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"name":{"normalizedName":"Name","structTag":"`yaml:\"name,omitempty\" json:\"name,omitempty\"`","goType":"string","goElements":"","description":["Name of the user to create, remove or modify."],"type":"str","required":true,"default":null,"elements":"","aliases":["user"]},"non_unique":{"normalizedName":"NonUnique","structTag":"`yaml:\"non_unique,omitempty\" json:\"non_unique,omitempty\"`","goType":"bool","goElements":"","description":["Optionally when used with the -u option, this option allows to change the user ID to a non-unique value."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"password":{"normalizedName":"Password","structTag":"`yaml:\"password,omitempty\" json:\"password,omitempty\"`","goType":"string","goElements":"","description":["Optionally set the user's password to this crypted value.","On macOS systems, this value has to be cleartext. Beware of security issues.","To create a an account with a locked/disabled password on Linux systems, set this to C('!') or C('*').","To create a an account with a locked/disabled password on OpenBSD, set this to C('*************').","See L(FAQ entry,https://docs.ansible.com/ansible/latest/reference_appendices/faq.html#how-do-i-generate-encrypted-passwords-for-the-user-module) for details on various ways to generate these password values."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"password_expire_max":{"normalizedName":"PasswordExpireMax","structTag":"`yaml:\"password_expire_max,omitempty\" json:\"password_expire_max,omitempty\"`","goType":"int","goElements":"","description":["Maximum number of days between password change.","Supported on Linux only."],"type":"int","required":false,"default":null,"elements":"","aliases":null},"password_expire_min":{"normalizedName":"PasswordExpireMin","structTag":"`yaml:\"password_expire_min,omitempty\" json:\"password_expire_min,omitempty\"`","goType":"int","goElements":"","description":["Minimum number of days between password change.","Supported on Linux only."],"type":"int","required":false,"default":null,"elements":"","aliases":null},"password_lock":{"normalizedName":"PasswordLock","structTag":"`yaml:\"password_lock,omitempty\" json:\"password_lock,omitempty\"`","goType":"bool","goElements":"","description":["Lock the password (C(usermod -L), C(usermod -U), C(pw lock)).","Implementation differs by platform. This option does not always mean the user cannot login using other methods.","This option does not disable the user, only lock the password.","This must be set to C(False) in order to unlock a currently locked password. The absence of this parameter will not unlock a password.","Currently supported on Linux, FreeBSD, DragonFlyBSD, NetBSD, OpenBSD."],"type":"bool","required":false,"default":null,"elements":"","aliases":null},"profile":{"normalizedName":"Profile","structTag":"`yaml:\"profile,omitempty\" json:\"profile,omitempty\"`","goType":"string","goElements":"","description":["Sets the profile of the user.","Does nothing when used with other platforms.","Can set multiple profiles using comma separation.","To delete all the profiles, use C(profile='').","Currently supported on Illumos/Solaris."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"remove":{"normalizedName":"Remove","structTag":"`yaml:\"remove,omitempty\" json:\"remove,omitempty\"`","goType":"bool","goElements":"","description":["This only affects C(state=absent), it attempts to remove directories associated with the user.","The behavior is the same as C(userdel --remove), check the man page for details and support."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"role":{"normalizedName":"Role","structTag":"`yaml:\"role,omitempty\" json:\"role,omitempty\"`","goType":"string","goElements":"","description":["Sets the role of the user.","Does nothing when used with other platforms.","Can set multiple roles using comma separation.","To delete all roles, use C(role='').","Currently supported on Illumos/Solaris."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"seuser":{"normalizedName":"Seuser","structTag":"`yaml:\"seuser,omitempty\" json:\"seuser,omitempty\"`","goType":"string","goElements":"","description":["Optionally sets the seuser type (user_u) on selinux enabled systems."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"shell":{"normalizedName":"Shell","structTag":"`yaml:\"shell,omitempty\" json:\"shell,omitempty\"`","goType":"string","goElements":"","description":["Optionally set the user's shell.","On macOS, before Ansible 2.5, the default shell for non-system users was C(/usr/bin/false). Since Ansible 2.5, the default shell for non-system users on macOS is C(/bin/bash).","See notes for details on how other operating systems determine the default shell by the underlying tool."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"skeleton":{"normalizedName":"Skeleton","structTag":"`yaml:\"skeleton,omitempty\" json:\"skeleton,omitempty\"`","goType":"string","goElements":"","description":["Optionally set a home skeleton directory.","Requires C(create_home) option!"],"type":"str","required":false,"default":null,"elements":"","aliases":null},"ssh_key_bits":{"normalizedName":"SshKeyBits","structTag":"`yaml:\"ssh_key_bits,omitempty\" json:\"ssh_key_bits,omitempty\"`","goType":"int","goElements":"","description":["Optionally specify number of bits in SSH key to create.","The default value depends on ssh-keygen."],"type":"int","required":false,"default":null,"elements":"","aliases":null},"ssh_key_comment":{"normalizedName":"SshKeyComment","structTag":"`yaml:\"ssh_key_comment,omitempty\" json:\"ssh_key_comment,omitempty\"`","goType":"string","goElements":"","description":["Optionally define the comment for the SSH key."],"type":"str","required":false,"default":"ansible-generated on $HOSTNAME","elements":"","aliases":null},"ssh_key_file":{"normalizedName":"SshKeyFile","structTag":"`yaml:\"ssh_key_file,omitempty\" json:\"ssh_key_file,omitempty\"`","goType":"string","goElements":"","description":["Optionally specify the SSH key filename.","If this is a relative filename then it will be relative to the user's home directory.","This parameter defaults to I(.ssh/id_rsa)."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"ssh_key_passphrase":{"normalizedName":"SshKeyPassphrase","structTag":"`yaml:\"ssh_key_passphrase,omitempty\" json:\"ssh_key_passphrase,omitempty\"`","goType":"string","goElements":"","description":["Set a passphrase for the SSH key.","If no passphrase is provided, the SSH key will default to having no passphrase."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"ssh_key_type":{"normalizedName":"SshKeyType","structTag":"`yaml:\"ssh_key_type,omitempty\" json:\"ssh_key_type,omitempty\"`","goType":"string","goElements":"","description":["Optionally specify the type of SSH key to generate.","Available SSH key types will depend on implementation present on target host."],"type":"str","required":false,"default":"rsa","elements":"","aliases":null},"state":{"normalizedName":"State","structTag":"`yaml:\"state,omitempty\" json:\"state,omitempty\"`","goType":"string","goElements":"","description":["Whether the account should exist or not, taking action if the state is different from what is stated."],"type":"str","required":false,"default":"present","elements":"","aliases":null},"system":{"normalizedName":"System","structTag":"`yaml:\"system,omitempty\" json:\"system,omitempty\"`","goType":"bool","goElements":"","description":["When creating an account C(state=present), setting this to C(yes) makes the user a system account.","This setting cannot be changed on existing users."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"uid":{"normalizedName":"Uid","structTag":"`yaml:\"uid,omitempty\" json:\"uid,omitempty\"`","goType":"int","goElements":"","description":["Optionally sets the I(UID) of the user."],"type":"int","required":false,"default":null,"elements":"","aliases":null},"umask":{"normalizedName":"Umask","structTag":"`yaml:\"umask,omitempty\" json:\"umask,omitempty\"`","goType":"string","goElements":"","description":["Sets the umask of the user.","Does nothing when used with other platforms.","Currently supported on Linux.","Requires C(local) is omitted or False."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"update_password":{"normalizedName":"UpdatePassword","structTag":"`yaml:\"update_password,omitempty\" json:\"update_password,omitempty\"`","goType":"string","goElements":"","description":["C(always) will update passwords if they differ.","C(on_create) will only set the password for newly created users."],"type":"str","required":false,"default":"always","elements":"","aliases":null}},"returns":{"append":{"normalizedName":"Append","description":"Whether or not to append the user to groups.","returned":"When state is C(present) and the user exists","type":"bool","sample":true,"goType":"bool","structTag":"`yaml:\"append,omitempty\" json:\"append,omitempty\"`"},"comment":{"normalizedName":"Comment","description":"Comment section from passwd file, usually the user name.","returned":"When user exists","type":"str","sample":"Agent Smith","goType":"string","structTag":"`yaml:\"comment,omitempty\" json:\"comment,omitempty\"`"},"create_home":{"normalizedName":"CreateHome","description":"Whether or not to create the home directory.","returned":"When user does not exist and not check mode","type":"bool","sample":true,"goType":"bool","structTag":"`yaml:\"create_home,omitempty\" json:\"create_home,omitempty\"`"},"force":{"normalizedName":"Force","description":"Whether or not a user account was forcibly deleted.","returned":"When I(state) is C(absent) and user exists","type":"bool","sample":false,"goType":"bool","structTag":"`yaml:\"force,omitempty\" json:\"force,omitempty\"`"},"group":{"normalizedName":"Group","description":"Primary user group ID","returned":"When user exists","type":"int","sample":1001,"goType":"int","structTag":"`yaml:\"group,omitempty\" json:\"group,omitempty\"`"},"groups":{"normalizedName":"Groups","description":"List of groups of which the user is a member.","returned":"When I(groups) is not empty and I(state) is C(present)","type":"str","sample":"chrony,apache","goType":"string","structTag":"`yaml:\"groups,omitempty\" json:\"groups,omitempty\"`"},"home":{"normalizedName":"Home","description":"Path to user's home directory.","returned":"When I(state) is C(present)","type":"str","sample":"/home/asmith","goType":"string","structTag":"`yaml:\"home,omitempty\" json:\"home,omitempty\"`"},"move_home":{"normalizedName":"MoveHome","description":"Whether or not to move an existing home directory.","returned":"When I(state) is C(present) and user exists","type":"bool","sample":false,"goType":"bool","structTag":"`yaml:\"move_home,omitempty\" json:\"move_home,omitempty\"`"},"name":{"normalizedName":"Name","description":"User account name.","returned":"always","type":"str","sample":"asmith","goType":"string","structTag":"`yaml:\"name,omitempty\" json:\"name,omitempty\"`"},"password":{"normalizedName":"Password","description":"Masked value of the password.","returned":"When I(state) is C(present) and I(password) is not empty","type":"str","sample":"NOT_LOGGING_PASSWORD","goType":"string","structTag":"`yaml:\"password,omitempty\" json:\"password,omitempty\"`"},"password_expire_max":{"normalizedName":"PasswordExpireMax","description":"Maximum number of days during which a password is valid.","returned":"When user exists","type":"int","sample":20,"goType":"int","structTag":"`yaml:\"password_expire_max,omitempty\" json:\"password_expire_max,omitempty\"`"},"password_expire_min":{"normalizedName":"PasswordExpireMin","description":"Minimum number of days between password change","returned":"When user exists","type":"int","sample":20,"goType":"int","structTag":"`yaml:\"password_expire_min,omitempty\" json:\"password_expire_min,omitempty\"`"},"remove":{"normalizedName":"Remove","description":"Whether or not to remove the user account.","returned":"When I(state) is C(absent) and user exists","type":"bool","sample":true,"goType":"bool","structTag":"`yaml:\"remove,omitempty\" json:\"remove,omitempty\"`"},"shell":{"normalizedName":"Shell","description":"User login shell.","returned":"When I(state) is C(present)","type":"str","sample":"/bin/bash","goType":"string","structTag":"`yaml:\"shell,omitempty\" json:\"shell,omitempty\"`"},"ssh_fingerprint":{"normalizedName":"SshFingerprint","description":"Fingerprint of generated SSH key.","returned":"When I(generate_ssh_key) is C(True)","type":"str","sample":"2048 SHA256:aYNHYcyVm87Igh0IMEDMbvW0QDlRQfE0aJugp684ko8 ansible-generated on host (RSA)","goType":"string","structTag":"`yaml:\"ssh_fingerprint,omitempty\" json:\"ssh_fingerprint,omitempty\"`"},"ssh_key_file":{"normalizedName":"SshKeyFile","description":"Path to generated SSH private key file.","returned":"When I(generate_ssh_key) is C(True)","type":"str","sample":"/home/asmith/.ssh/id_rsa","goType":"string","structTag":"`yaml:\"ssh_key_file,omitempty\" json:\"ssh_key_file,omitempty\"`"},"ssh_public_key":{"normalizedName":"SshPublicKey","description":"Generated SSH public key file.","returned":"When I(generate_ssh_key) is C(True)","type":"str","sample":"'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC95opt4SPEC06tOYsJQJIuN23BbLMGmYo8ysVZQc4h2DZE9ugbjWWGS1/pweUGjVstgzMkBEeBCByaEf/RJKNecKRPeGd2Bw9DCj/bn5Z6rGfNENKBmo 618mUJBvdlEgea96QGjOwSB7/gmonduC7gsWDMNcOdSE3wJMTim4lddiBx4RgC9yXsJ6Tkz9BHD73MXPpT5ETnse+A3fw3IGVSjaueVnlUyUmOBf7fzmZbhlFVXf2Zi2rFTXqvbdGHKkzpw1U8eB8xFPP7y d5u1u0e6Acju/8aZ/l17IDFiLke5IzlqIMRTEbDwLNeO84YQKWTm9fODHzhYe0yvxqLiK07 ansible-generated on host'\n","goType":"string","structTag":"`yaml:\"ssh_public_key,omitempty\" json:\"ssh_public_key,omitempty\"`"},"stderr":{"normalizedName":"Stderr","description":"Standard error from running commands.","returned":"When stderr is returned by a command that is run","type":"str","sample":"Group wheels does not exist","goType":"string","structTag":"`yaml:\"stderr,omitempty\" json:\"stderr,omitempty\"`"},"stdout":{"normalizedName":"Stdout","description":"Standard output from running commands.","returned":"When standard output is returned by the command that is run","type":"str","sample":null,"goType":"string","structTag":"`yaml:\"stdout,omitempty\" json:\"stdout,omitempty\"`"},"system":{"normalizedName":"System","description":"Whether or not the account is a system account.","returned":"When I(system) is passed to the module and the account does not exist","type":"bool","sample":true,"goType":"bool","structTag":"`yaml:\"system,omitempty\" json:\"system,omitempty\"`"},"uid":{"normalizedName":"Uid","description":"User ID of the user account.","returned":"When I(uid) is passed to the module","type":"int","sample":1044,"goType":"int","structTag":"`yaml:\"uid,omitempty\" json:\"uid,omitempty\"`"}},"doc":"\nmodule: user\nversion_added: \"0.2\"\nshort_description: Manage user accounts\ndescription:\n    - Manage user accounts and user attributes.\n    - For Windows targets, use the M(ansible.windows.win_user) module instead.\noptions:\n    name:\n        description:\n            - Name of the user to create, remove or modify.\n        type: str\n        required: true\n        aliases: [ user ]\n    uid:\n        description:\n            - Optionally sets the I(UID) of the user.\n        type: int\n    comment:\n        description:\n            - Optionally sets the description (aka I(GECOS)) of user account.\n        type: str\n    hidden:\n        description:\n            - macOS only, optionally hide the user from the login window and system preferences.\n            - The default will be C(yes) if the I(system) option is used.\n        type: bool\n        version_added: \"2.6\"\n    non_unique:\n        description:\n            - Optionally when used with the -u option, this option allows to change the user ID to a non-unique value.\n        type: bool\n        default: no\n        version_added: \"1.1\"\n    seuser:\n        description:\n            - Optionally sets the seuser type (user_u) on selinux enabled systems.\n        type: str\n        version_added: \"2.1\"\n    group:\n        description:\n            - Optionally sets the user's primary group (takes a group name).\n        type: str\n    groups:\n        description:\n            - List of groups user will be added to.\n            - By default, the user is removed from all other groups. Configure C(append) to modify this.\n            - When set to an empty string C(''),\n              the user is removed from all groups except the primary group.\n            - Before Ansible 2.3, the only input format allowed was a comma separated string.\n        type: list\n        elements: str\n    append:\n        description:\n            - If C(yes), add the user to the groups specified in C(groups).\n            - If C(no), user will only be added to the groups specified in C(groups),\n              removing them from all other groups.\n        type: bool\n        default: no\n    shell:\n        description:\n            - Optionally set the user's shell.\n            - On macOS, before Ansible 2.5, the default shell for non-system users was C(/usr/bin/false).\n              Since Ansible 2.5, the default shell for non-system users on macOS is C(/bin/bash).\n            - See notes for details on how other operating systems determine the default shell by\n              the underlying tool.\n        type: str\n    home:\n        description:\n            - Optionally set the user's home directory.\n        type: path\n    skeleton:\n        description:\n            - Optionally set a home skeleton directory.\n            - Requires C(create_home) option!\n        type: str\n        version_added: \"2.0\"\n    password:\n        description:\n            - Optionally set the user's password to this crypted value.\n            - On macOS systems, this value has to be cleartext. Beware of security issues.\n            - To create a an account with a locked/disabled password on Linux systems, set this to C('!') or C('*').\n            - To create a an account with a locked/disabled password on OpenBSD, set this to C('*************').\n            - See L(FAQ entry,https://docs.ansible.com/ansible/latest/reference_appendices/faq.html#how-do-i-generate-encrypted-passwords-for-the-user-module)\n              for details on various ways to generate these password values.\n        type: str\n    state:\n        description:\n            - Whether the account should exist or not, taking action if the state is different from what is stated.\n        type: str\n        choices: [ absent, present ]\n        default: present\n    create_home:\n        description:\n            - Unless set to C(no), a home directory will be made for the user\n              when the account is created or if the home directory does not exist.\n            - Changed from C(createhome) to C(create_home) in Ansible 2.5.\n        type: bool\n        default: yes\n        aliases: [ createhome ]\n    move_home:\n        description:\n            - \"If set to C(yes) when used with C(home: ), attempt to move the user's old home\n              directory to the specified directory if it isn't there already and the old home exists.\"\n        type: bool\n        default: no\n    system:\n        description:\n            - When creating an account C(state=present), setting this to C(yes) makes the user a system account.\n            - This setting cannot be changed on existing users.\n        type: bool\n        default: no\n    force:\n        description:\n            - This only affects C(state=absent), it forces removal of the user and associated directories on supported platforms.\n            - The behavior is the same as C(userdel --force), check the man page for C(userdel) on your system for details and support.\n            - When used with C(generate_ssh_key=yes) this forces an existing key to be overwritten.\n        type: bool\n        default: no\n    remove:\n        description:\n            - This only affects C(state=absent), it attempts to remove directories associated with the user.\n            - The behavior is the same as C(userdel --remove), check the man page for details and support.\n        type: bool\n        default: no\n    login_class:\n        description:\n            - Optionally sets the user's login class, a feature of most BSD OSs.\n        type: str\n    generate_ssh_key:\n        description:\n            - Whether to generate a SSH key for the user in question.\n            - This will B(not) overwrite an existing SSH key unless used with C(force=yes).\n        type: bool\n        default: no\n        version_added: \"0.9\"\n    ssh_key_bits:\n        description:\n            - Optionally specify number of bits in SSH key to create.\n            - The default value depends on ssh-keygen.\n        type: int\n        version_added: \"0.9\"\n    ssh_key_type:\n        description:\n            - Optionally specify the type of SSH key to generate.\n            - Available SSH key types will depend on implementation\n              present on target host.\n        type: str\n        default: rsa\n        version_added: \"0.9\"\n    ssh_key_file:\n        description:\n            - Optionally specify the SSH key filename.\n            - If this is a relative filename then it will be relative to the user's home directory.\n            - This parameter defaults to I(.ssh/id_rsa).\n        type: path\n        version_added: \"0.9\"\n    ssh_key_comment:\n        description:\n            - Optionally define the comment for the SSH key.\n        type: str\n        default: ansible-generated on $HOSTNAME\n        version_added: \"0.9\"\n    ssh_key_passphrase:\n        description:\n            - Set a passphrase for the SSH key.\n            - If no passphrase is provided, the SSH key will default to having no passphrase.\n        type: str\n        version_added: \"0.9\"\n    update_password:\n        description:\n            - C(always) will update passwords if they differ.\n            - C(on_create) will only set the password for newly created users.\n        type: str\n        choices: [ always, on_create ]\n        default: always\n        version_added: \"1.3\"\n    expires:\n        description:\n            - An expiry time for the user in epoch, it will be ignored on platforms that do not support this.\n            - Currently supported on GNU/Linux, FreeBSD, and DragonFlyBSD.\n            - Since Ansible 2.6 you can remove the expiry time by specifying a negative value.\n              Currently supported on GNU/Linux and FreeBSD.\n        type: float\n        version_added: \"1.9\"\n    password_lock:\n        description:\n            - Lock the password (C(usermod -L), C(usermod -U), C(pw lock)).\n            - Implementation differs by platform. This option does not always mean the user cannot login using other methods.\n            - This option does not disable the user, only lock the password.\n            - This must be set to C(False) in order to unlock a currently locked password. The absence of this parameter will not unlock a password.\n            - Currently supported on Linux, FreeBSD, DragonFlyBSD, NetBSD, OpenBSD.\n        type: bool\n        version_added: \"2.6\"\n    local:\n        description:\n            - Forces the use of \"local\" command alternatives on platforms that implement it.\n            - This is useful in environments that use centralized authentication when you want to manipulate the local users\n              (in other words, it uses C(luseradd) instead of C(useradd)).\n            - This will check C(/etc/passwd) for an existing account before invoking commands. If the local account database\n              exists somewhere other than C(/etc/passwd), this setting will not work properly.\n            - This requires that the above commands as well as C(/etc/passwd) must exist on the target host, otherwise it will be a fatal error.\n        type: bool\n        default: no\n        version_added: \"2.4\"\n    profile:\n        description:\n            - Sets the profile of the user.\n            - Does nothing when used with other platforms.\n            - Can set multiple profiles using comma separation.\n            - To delete all the profiles, use C(profile='').\n            - Currently supported on Illumos/Solaris.\n        type: str\n        version_added: \"2.8\"\n    authorization:\n        description:\n            - Sets the authorization of the user.\n            - Does nothing when used with other platforms.\n            - Can set multiple authorizations using comma separation.\n            - To delete all authorizations, use C(authorization='').\n            - Currently supported on Illumos/Solaris.\n        type: str\n        version_added: \"2.8\"\n    role:\n        description:\n            - Sets the role of the user.\n            - Does nothing when used with other platforms.\n            - Can set multiple roles using comma separation.\n            - To delete all roles, use C(role='').\n            - Currently supported on Illumos/Solaris.\n        type: str\n        version_added: \"2.8\"\n    password_expire_max:\n        description:\n            - Maximum number of days between password change.\n            - Supported on Linux only.\n        type: int\n        version_added: \"2.11\"\n    password_expire_min:\n        description:\n            - Minimum number of days between password change.\n            - Supported on Linux only.\n        type: int\n        version_added: \"2.11\"\n    umask:\n        description:\n            - Sets the umask of the user.\n            - Does nothing when used with other platforms.\n            - Currently supported on Linux.\n            - Requires C(local) is omitted or False.\n        type: str\n        version_added: \"2.12\"\nextends_documentation_fragment: action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    platform:\n        platforms: posix\nnotes:\n  - There are specific requirements per platform on user management utilities. However\n    they generally come pre-installed with the system and Ansible will require they\n    are present at runtime. If they are not, a descriptive error message will be shown.\n  - On SunOS platforms, the shadow file is backed up automatically since this module edits it directly.\n    On other platforms, the shadow file is backed up by the underlying tools used by this module.\n  - On macOS, this module uses C(dscl) to create, modify, and delete accounts. C(dseditgroup) is used to\n    modify group membership. Accounts are hidden from the login window by modifying\n    C(/Library/Preferences/com.apple.loginwindow.plist).\n  - On FreeBSD, this module uses C(pw useradd) and C(chpass) to create, C(pw usermod) and C(chpass) to modify,\n    C(pw userdel) remove, C(pw lock) to lock, and C(pw unlock) to unlock accounts.\n  - On all other platforms, this module uses C(useradd) to create, C(usermod) to modify, and\n    C(userdel) to remove accounts.\nseealso:\n- module: ansible.posix.authorized_key\n- module: ansible.builtin.group\n- module: ansible.windows.win_user\nauthor:\n- Stephen Fromm (@sfromm)\n","return":"\nappend:\n  description: Whether or not to append the user to groups.\n  returned: When state is C(present) and the user exists\n  type: bool\n  sample: True\ncomment:\n  description: Comment section from passwd file, usually the user name.\n  returned: When user exists\n  type: str\n  sample: Agent Smith\ncreate_home:\n  description: Whether or not to create the home directory.\n  returned: When user does not exist and not check mode\n  type: bool\n  sample: True\nforce:\n  description: Whether or not a user account was forcibly deleted.\n  returned: When I(state) is C(absent) and user exists\n  type: bool\n  sample: False\ngroup:\n  description: Primary user group ID\n  returned: When user exists\n  type: int\n  sample: 1001\ngroups:\n  description: List of groups of which the user is a member.\n  returned: When I(groups) is not empty and I(state) is C(present)\n  type: str\n  sample: 'chrony,apache'\nhome:\n  description: \"Path to user's home directory.\"\n  returned: When I(state) is C(present)\n  type: str\n  sample: '/home/asmith'\nmove_home:\n  description: Whether or not to move an existing home directory.\n  returned: When I(state) is C(present) and user exists\n  type: bool\n  sample: False\nname:\n  description: User account name.\n  returned: always\n  type: str\n  sample: asmith\npassword:\n  description: Masked value of the password.\n  returned: When I(state) is C(present) and I(password) is not empty\n  type: str\n  sample: 'NOT_LOGGING_PASSWORD'\nremove:\n  description: Whether or not to remove the user account.\n  returned: When I(state) is C(absent) and user exists\n  type: bool\n  sample: True\nshell:\n  description: User login shell.\n  returned: When I(state) is C(present)\n  type: str\n  sample: '/bin/bash'\nssh_fingerprint:\n  description: Fingerprint of generated SSH key.\n  returned: When I(generate_ssh_key) is C(True)\n  type: str\n  sample: '2048 SHA256:aYNHYcyVm87Igh0IMEDMbvW0QDlRQfE0aJugp684ko8 ansible-generated on host (RSA)'\nssh_key_file:\n  description: Path to generated SSH private key file.\n  returned: When I(generate_ssh_key) is C(True)\n  type: str\n  sample: /home/asmith/.ssh/id_rsa\nssh_public_key:\n  description: Generated SSH public key file.\n  returned: When I(generate_ssh_key) is C(True)\n  type: str\n  sample: \u003e\n    'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC95opt4SPEC06tOYsJQJIuN23BbLMGmYo8ysVZQc4h2DZE9ugbjWWGS1/pweUGjVstgzMkBEeBCByaEf/RJKNecKRPeGd2Bw9DCj/bn5Z6rGfNENKBmo\n    618mUJBvdlEgea96QGjOwSB7/gmonduC7gsWDMNcOdSE3wJMTim4lddiBx4RgC9yXsJ6Tkz9BHD73MXPpT5ETnse+A3fw3IGVSjaueVnlUyUmOBf7fzmZbhlFVXf2Zi2rFTXqvbdGHKkzpw1U8eB8xFPP7y\n    d5u1u0e6Acju/8aZ/l17IDFiLke5IzlqIMRTEbDwLNeO84YQKWTm9fODHzhYe0yvxqLiK07 ansible-generated on host'\nstderr:\n  description: Standard error from running commands.\n  returned: When stderr is returned by a command that is run\n  type: str\n  sample: Group wheels does not exist\nstdout:\n  description: Standard output from running commands.\n  returned: When standard output is returned by the command that is run\n  type: str\n  sample:\nsystem:\n  description: Whether or not the account is a system account.\n  returned: When I(system) is passed to the module and the account does not exist\n  type: bool\n  sample: True\nuid:\n  description: User ID of the user account.\n  returned: When I(uid) is passed to the module\n  type: int\n  sample: 1044\npassword_expire_max:\n  description: Maximum number of days during which a password is valid.\n  returned: When user exists\n  type: int\n  sample: 20\npassword_expire_min:\n  description: Minimum number of days between password change\n  returned: When user exists\n  type: int\n  sample: 20\n"},{"normalizedName":"WaitFor","module":"wait_for","short_description":"Waits for a condition before continuing","description":["You can wait for a set amount of time C(timeout), this is the default if nothing is specified or just C(timeout) is specified. This does not produce an error.","Waiting for a port to become available is useful for when services are not immediately available after their init scripts return which is true of certain Java application servers.","It is also useful when starting guests with the M(community.libvirt.virt) module and needing to pause until they are ready.","This module can also be used to wait for a regex match a string to be present in a file.","In Ansible 1.6 and later, this module can also be used to wait for a file to be available or absent on the filesystem.","In Ansible 1.8 and later, this module can also be used to wait for active connections to be closed before continuing, useful if a node is being rotated out of a load balancer pool.","For Windows targets, use the M(ansible.windows.win_wait_for) module instead."],"options":{"active_connection_states":{"normalizedName":"ActiveConnectionStates","structTag":"`yaml:\"active_connection_states,omitempty\" json:\"active_connection_states,omitempty\"`","goType":"[]string","goElements":"","description":["The list of TCP connection states which are counted as active connections."],"type":"list","required":false,"default":["ESTABLISHED","FIN_WAIT1","FIN_WAIT2","SYN_RECV","SYN_SENT","TIME_WAIT"],"elements":"str","aliases":null},"connect_timeout":{"normalizedName":"ConnectTimeout","structTag":"`yaml:\"connect_timeout,omitempty\" json:\"connect_timeout,omitempty\"`","goType":"int","goElements":"","description":["Maximum number of seconds to wait for a connection to happen before closing and retrying."],"type":"int","required":false,"default":5,"elements":"","aliases":null},"delay":{"normalizedName":"Delay","structTag":"`yaml:\"delay,omitempty\" json:\"delay,omitempty\"`","goType":"int","goElements":"","description":["Number of seconds to wait before starting to poll."],"type":"int","required":false,"default":0,"elements":"","aliases":null},"exclude_hosts":{"normalizedName":"ExcludeHosts","structTag":"`yaml:\"exclude_hosts,omitempty\" json:\"exclude_hosts,omitempty\"`","goType":"[]string","goElements":"","description":["List of hosts or IPs to ignore when looking for active TCP connections for C(drained) state."],"type":"list","required":false,"default":null,"elements":"str","aliases":null},"host":{"normalizedName":"Host","structTag":"`yaml:\"host,omitempty\" json:\"host,omitempty\"`","goType":"string","goElements":"","description":["A resolvable hostname or IP address to wait for."],"type":"str","required":false,"default":"127.0.0.1","elements":"","aliases":null},"msg":{"normalizedName":"Msg","structTag":"`yaml:\"msg,omitempty\" json:\"msg,omitempty\"`","goType":"string","goElements":"","description":["This overrides the normal error message from a failure to meet the required conditions."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"path":{"normalizedName":"Path","structTag":"`yaml:\"path,omitempty\" json:\"path,omitempty\"`","goType":"string","goElements":"","description":["Path to a file on the filesystem that must exist before continuing.","C(path) and C(port) are mutually exclusive parameters."],"type":"path","required":false,"default":null,"elements":"","aliases":null},"port":{"normalizedName":"Port","structTag":"`yaml:\"port,omitempty\" json:\"port,omitempty\"`","goType":"int","goElements":"","description":["Port number to poll.","C(path) and C(port) are mutually exclusive parameters."],"type":"int","required":false,"default":null,"elements":"","aliases":null},"search_regex":{"normalizedName":"SearchRegex","structTag":"`yaml:\"search_regex,omitempty\" json:\"search_regex,omitempty\"`","goType":"string","goElements":"","description":["Can be used to match a string in either a file or a socket connection.","Defaults to a multiline regex."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"sleep":{"normalizedName":"Sleep","structTag":"`yaml:\"sleep,omitempty\" json:\"sleep,omitempty\"`","goType":"int","goElements":"","description":["Number of seconds to sleep between checks.","Before Ansible 2.3 this was hardcoded to 1 second."],"type":"int","required":false,"default":1,"elements":"","aliases":null},"state":{"normalizedName":"State","structTag":"`yaml:\"state,omitempty\" json:\"state,omitempty\"`","goType":"string","goElements":"","description":["Either C(present), C(started), or C(stopped), C(absent), or C(drained).","When checking a port C(started) will ensure the port is open, C(stopped) will check that it is closed, C(drained) will check for active connections.","When checking for a file or a search string C(present) or C(started) will ensure that the file or string is present before continuing, C(absent) will check that file is absent or removed."],"type":"str","required":false,"default":"started","elements":"","aliases":null},"timeout":{"normalizedName":"Timeout","structTag":"`yaml:\"timeout,omitempty\" json:\"timeout,omitempty\"`","goType":"int","goElements":"","description":["Maximum number of seconds to wait for, when used with another condition it will force an error.","When used without other conditions it is equivalent of just sleeping."],"type":"int","required":false,"default":300,"elements":"","aliases":null}},"returns":{"elapsed":{"normalizedName":"Elapsed","description":"The number of seconds that elapsed while waiting","returned":"always","type":"int","sample":23,"goType":"int","structTag":"`yaml:\"elapsed,omitempty\" json:\"elapsed,omitempty\"`"},"match_groupdict":{"normalizedName":"MatchGroupdict","description":"Dictionary containing all the named subgroups of the match, keyed by the subgroup name, as returned by U(https://docs.python.org/3/library/re.html#re.MatchObject.groupdict)","returned":"always","type":"dict","sample":{"group":"match"},"goType":"map[string]string","structTag":"`yaml:\"match_groupdict,omitempty\" json:\"match_groupdict,omitempty\"`"},"match_groups":{"normalizedName":"MatchGroups","description":"Tuple containing all the subgroups of the match as returned by U(https://docs.python.org/3/library/re.html#re.MatchObject.groups)","returned":"always","type":"list","sample":["match 1","match 2"],"goType":"[]map[string]interface{}","structTag":"`yaml:\"match_groups,omitempty\" json:\"match_groups,omitempty\"`"}},"doc":"\n---\nmodule: wait_for\nshort_description: Waits for a condition before continuing\ndescription:\n     - You can wait for a set amount of time C(timeout), this is the default if nothing is specified or just C(timeout) is specified.\n       This does not produce an error.\n     - Waiting for a port to become available is useful for when services are not immediately available after their init scripts return\n       which is true of certain Java application servers.\n     - It is also useful when starting guests with the M(community.libvirt.virt) module and needing to pause until they are ready.\n     - This module can also be used to wait for a regex match a string to be present in a file.\n     - In Ansible 1.6 and later, this module can also be used to wait for a file to be available or\n       absent on the filesystem.\n     - In Ansible 1.8 and later, this module can also be used to wait for active connections to be closed before continuing, useful if a node\n       is being rotated out of a load balancer pool.\n     - For Windows targets, use the M(ansible.windows.win_wait_for) module instead.\nversion_added: \"0.7\"\noptions:\n  host:\n    description:\n      - A resolvable hostname or IP address to wait for.\n    type: str\n    default: 127.0.0.1\n  timeout:\n    description:\n      - Maximum number of seconds to wait for, when used with another condition it will force an error.\n      - When used without other conditions it is equivalent of just sleeping.\n    type: int\n    default: 300\n  connect_timeout:\n    description:\n      - Maximum number of seconds to wait for a connection to happen before closing and retrying.\n    type: int\n    default: 5\n  delay:\n    description:\n      - Number of seconds to wait before starting to poll.\n    type: int\n    default: 0\n  port:\n    description:\n      - Port number to poll.\n      - C(path) and C(port) are mutually exclusive parameters.\n    type: int\n  active_connection_states:\n    description:\n      - The list of TCP connection states which are counted as active connections.\n    type: list\n    elements: str\n    default: [ ESTABLISHED, FIN_WAIT1, FIN_WAIT2, SYN_RECV, SYN_SENT, TIME_WAIT ]\n    version_added: \"2.3\"\n  state:\n    description:\n      - Either C(present), C(started), or C(stopped), C(absent), or C(drained).\n      - When checking a port C(started) will ensure the port is open, C(stopped) will check that it is closed, C(drained) will check for active connections.\n      - When checking for a file or a search string C(present) or C(started) will ensure that the file or string is present before continuing,\n        C(absent) will check that file is absent or removed.\n    type: str\n    choices: [ absent, drained, present, started, stopped ]\n    default: started\n  path:\n    description:\n      - Path to a file on the filesystem that must exist before continuing.\n      - C(path) and C(port) are mutually exclusive parameters.\n    type: path\n    version_added: \"1.4\"\n  search_regex:\n    description:\n      - Can be used to match a string in either a file or a socket connection.\n      - Defaults to a multiline regex.\n    type: str\n    version_added: \"1.4\"\n  exclude_hosts:\n    description:\n      - List of hosts or IPs to ignore when looking for active TCP connections for C(drained) state.\n    type: list\n    elements: str\n    version_added: \"1.8\"\n  sleep:\n    description:\n      - Number of seconds to sleep between checks.\n      - Before Ansible 2.3 this was hardcoded to 1 second.\n    type: int\n    default: 1\n    version_added: \"2.3\"\n  msg:\n    description:\n      - This overrides the normal error message from a failure to meet the required conditions.\n    type: str\n    version_added: \"2.4\"\nextends_documentation_fragment: action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    platform:\n        platforms: posix\nnotes:\n  - The ability to use search_regex with a port connection was added in Ansible 1.7.\n  - Prior to Ansible 2.4, testing for the absence of a directory or UNIX socket did not work correctly.\n  - Prior to Ansible 2.4, testing for the presence of a file did not work correctly if the remote user did not have read access to that file.\n  - Under some circumstances when using mandatory access control, a path may always be treated as being absent even if it exists, but\n    can't be modified or created by the remote user either.\n  - When waiting for a path, symbolic links will be followed.  Many other modules that manipulate files do not follow symbolic links,\n    so operations on the path using other modules may not work exactly as expected.\nseealso:\n- module: ansible.builtin.wait_for_connection\n- module: ansible.windows.win_wait_for\n- module: community.windows.win_wait_for_process\nauthor:\n    - Jeroen Hoekx (@jhoekx)\n    - John Jarvis (@jarv)\n    - Andrii Radyk (@AnderEnder)\n","return":"\nelapsed:\n  description: The number of seconds that elapsed while waiting\n  returned: always\n  type: int\n  sample: 23\nmatch_groups:\n  description: Tuple containing all the subgroups of the match as returned by U(https://docs.python.org/3/library/re.html#re.MatchObject.groups)\n  returned: always\n  type: list\n  sample: ['match 1', 'match 2']\nmatch_groupdict:\n  description: Dictionary containing all the named subgroups of the match, keyed by the subgroup name,\n    as returned by U(https://docs.python.org/3/library/re.html#re.MatchObject.groupdict)\n  returned: always\n  type: dict\n  sample:\n    {\n      'group': 'match'\n    }\n"},{"normalizedName":"Yum","module":"yum","short_description":"Manages packages with the I(yum) package manager","description":["Installs, upgrade, downgrades, removes, and lists packages and groups with the I(yum) package manager.","This module only works on Python 2. If you require Python 3 support see the M(ansible.builtin.dnf) module."],"options":{"allow_downgrade":{"normalizedName":"AllowDowngrade","structTag":"`yaml:\"allow_downgrade,omitempty\" json:\"allow_downgrade,omitempty\"`","goType":"bool","goElements":"","description":["Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"autoremove":{"normalizedName":"Autoremove","structTag":"`yaml:\"autoremove,omitempty\" json:\"autoremove,omitempty\"`","goType":"bool","goElements":"","description":["If C(yes), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)","NOTE: This feature requires yum \u003e= 3.4.3 (RHEL/CentOS 7+)"],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"bugfix":{"normalizedName":"Bugfix","structTag":"`yaml:\"bugfix,omitempty\" json:\"bugfix,omitempty\"`","goType":"bool","goElements":"","description":["If set to C(yes), and C(state=latest) then only installs updates that have been marked bugfix related."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"cacheonly":{"normalizedName":"Cacheonly","structTag":"`yaml:\"cacheonly,omitempty\" json:\"cacheonly,omitempty\"`","goType":"bool","goElements":"","description":["Tells yum to run entirely from system cache; does not download or update metadata."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"conf_file":{"normalizedName":"ConfFile","structTag":"`yaml:\"conf_file,omitempty\" json:\"conf_file,omitempty\"`","goType":"string","goElements":"","description":["The remote yum configuration file to use for the transaction."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"disable_excludes":{"normalizedName":"DisableExcludes","structTag":"`yaml:\"disable_excludes,omitempty\" json:\"disable_excludes,omitempty\"`","goType":"string","goElements":"","description":["Disable the excludes defined in YUM config files.","If set to C(all), disables all excludes.","If set to C(main), disable excludes defined in [main] in yum.conf.","If set to C(repoid), disable excludes defined for given repo id."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"disable_gpg_check":{"normalizedName":"DisableGpgCheck","structTag":"`yaml:\"disable_gpg_check,omitempty\" json:\"disable_gpg_check,omitempty\"`","goType":"bool","goElements":"","description":["Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest)."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"disable_plugin":{"normalizedName":"DisablePlugin","structTag":"`yaml:\"disable_plugin,omitempty\" json:\"disable_plugin,omitempty\"`","goType":"[]string","goElements":"","description":["I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."],"type":"list","required":false,"default":null,"elements":"str","aliases":null},"disablerepo":{"normalizedName":"Disablerepo","structTag":"`yaml:\"disablerepo,omitempty\" json:\"disablerepo,omitempty\"`","goType":"[]string","goElements":"","description":["I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").","As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"],"type":"list","required":false,"default":null,"elements":"str","aliases":null},"download_dir":{"normalizedName":"DownloadDir","structTag":"`yaml:\"download_dir,omitempty\" json:\"download_dir,omitempty\"`","goType":"string","goElements":"","description":["Specifies an alternate directory to store packages.","Has an effect only if I(download_only) is specified."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"download_only":{"normalizedName":"DownloadOnly","structTag":"`yaml:\"download_only,omitempty\" json:\"download_only,omitempty\"`","goType":"bool","goElements":"","description":["Only download the packages, do not install them."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"enable_plugin":{"normalizedName":"EnablePlugin","structTag":"`yaml:\"enable_plugin,omitempty\" json:\"enable_plugin,omitempty\"`","goType":"[]string","goElements":"","description":["I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."],"type":"list","required":false,"default":null,"elements":"str","aliases":null},"enablerepo":{"normalizedName":"Enablerepo","structTag":"`yaml:\"enablerepo,omitempty\" json:\"enablerepo,omitempty\"`","goType":"[]string","goElements":"","description":["I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(\",\").","As of Ansible 2.7, this can alternatively be a list instead of C(\",\") separated string"],"type":"list","required":false,"default":null,"elements":"str","aliases":null},"exclude":{"normalizedName":"Exclude","structTag":"`yaml:\"exclude,omitempty\" json:\"exclude,omitempty\"`","goType":"[]string","goElements":"","description":["Package name(s) to exclude when state=present, or latest"],"type":"list","required":false,"default":null,"elements":"str","aliases":null},"install_repoquery":{"normalizedName":"InstallRepoquery","structTag":"`yaml:\"install_repoquery,omitempty\" json:\"install_repoquery,omitempty\"`","goType":"bool","goElements":"","description":["If repoquery is not available, install yum-utils. If the system is registered to RHN or an RHN Satellite, repoquery allows for querying all channels assigned to the system. It is also required to use the 'list' parameter.","NOTE: This will run and be logged as a separate yum transation which takes place before any other installation or removal.","NOTE: This will use the system's default enabled repositories without regard for disablerepo/enablerepo given to the module."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null},"install_weak_deps":{"normalizedName":"InstallWeakDeps","structTag":"`yaml:\"install_weak_deps,omitempty\" json:\"install_weak_deps,omitempty\"`","goType":"bool","goElements":"","description":["Will also install all packages linked by a weak dependency relation.","NOTE: This feature requires yum \u003e= 4 (RHEL/CentOS 8+)"],"type":"bool","required":false,"default":"yes","elements":"","aliases":null},"installroot":{"normalizedName":"Installroot","structTag":"`yaml:\"installroot,omitempty\" json:\"installroot,omitempty\"`","goType":"string","goElements":"","description":["Specifies an alternative installroot, relative to which all packages will be installed."],"type":"str","required":false,"default":"/","elements":"","aliases":null},"list":{"normalizedName":"List","structTag":"`yaml:\"list,omitempty\" json:\"list,omitempty\"`","goType":"string","goElements":"","description":["Package name to run the equivalent of yum list C(--show-duplicates \u003cpackage\u003e) against. In addition to listing packages, use can also list the following: C(installed), C(updates), C(available) and C(repos).","This parameter is mutually exclusive with I(name)."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"lock_timeout":{"normalizedName":"LockTimeout","structTag":"`yaml:\"lock_timeout,omitempty\" json:\"lock_timeout,omitempty\"`","goType":"int","goElements":"","description":["Amount of time to wait for the yum lockfile to be freed."],"type":"int","required":false,"default":30,"elements":"","aliases":null},"name":{"normalizedName":"Name","structTag":"`yaml:\"name,omitempty\" json:\"name,omitempty\"`","goType":"[]string","goElements":"","description":["A package name or package specifier with version, like C(name-1.0).","Comparison operators for package version are valid here C(\u003e), C(\u003c), C(\u003e=), C(\u003c=). Example - C(name\u003e=1.0)","If a previous version is specified, the task also needs to turn C(allow_downgrade) on. See the C(allow_downgrade) documentation for caveats with downgrading packages.","When using state=latest, this can be C('*') which means run C(yum -y update).","You can also pass a url or a local path to a rpm file (using state=present). To operate on several packages this can accept a comma separated string of packages or (as of 2.0) a list of packages."],"type":"list","required":false,"default":null,"elements":"str","aliases":["pkg"]},"releasever":{"normalizedName":"Releasever","structTag":"`yaml:\"releasever,omitempty\" json:\"releasever,omitempty\"`","goType":"string","goElements":"","description":["Specifies an alternative release from which all packages will be installed."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"security":{"normalizedName":"Security","structTag":"`yaml:\"security,omitempty\" json:\"security,omitempty\"`","goType":"bool","goElements":"","description":["If set to C(yes), and C(state=latest) then only installs updates that have been marked security related."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"skip_broken":{"normalizedName":"SkipBroken","structTag":"`yaml:\"skip_broken,omitempty\" json:\"skip_broken,omitempty\"`","goType":"bool","goElements":"","description":["Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"sslverify":{"normalizedName":"Sslverify","structTag":"`yaml:\"sslverify,omitempty\" json:\"sslverify,omitempty\"`","goType":"bool","goElements":"","description":["Disables SSL validation of the repository server for this transaction.","This should be set to C(no) if one of the configured repositories is using an untrusted or self-signed certificate."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null},"state":{"normalizedName":"State","structTag":"`yaml:\"state,omitempty\" json:\"state,omitempty\"`","goType":"string","goElements":"","description":["Whether to install (C(present) or C(installed), C(latest)), or remove (C(absent) or C(removed)) a package.","C(present) and C(installed) will simply ensure that a desired package is installed.","C(latest) will update the specified package if it's not of the latest available version.","C(absent) and C(removed) will remove the specified package.","Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"update_cache":{"normalizedName":"UpdateCache","structTag":"`yaml:\"update_cache,omitempty\" json:\"update_cache,omitempty\"`","goType":"bool","goElements":"","description":["Force yum to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."],"type":"bool","required":false,"default":"no","elements":"","aliases":["expire-cache"]},"update_only":{"normalizedName":"UpdateOnly","structTag":"`yaml:\"update_only,omitempty\" json:\"update_only,omitempty\"`","goType":"bool","goElements":"","description":["When using latest, only update installed packages. Do not install packages.","Has an effect only if state is I(latest)"],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"use_backend":{"normalizedName":"UseBackend","structTag":"`yaml:\"use_backend,omitempty\" json:\"use_backend,omitempty\"`","goType":"string","goElements":"","description":["This module supports C(yum) (as it always has), this is known as C(yum3)/C(YUM3)/C(yum-deprecated) by upstream yum developers. As of Ansible 2.7+, this module also supports C(YUM4), which is the \"new yum\" and it has an C(dnf) backend.","By default, this module will select the backend based on the C(ansible_pkg_mgr) fact."],"type":"str","required":false,"default":"auto","elements":"","aliases":null},"validate_certs":{"normalizedName":"ValidateCerts","structTag":"`yaml:\"validate_certs,omitempty\" json:\"validate_certs,omitempty\"`","goType":"bool","goElements":"","description":["This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(no), the SSL certificates will not be validated.","This should only set to C(no) used on personally controlled sites using self-signed certificates as it avoids verifying the source site.","Prior to 2.1 the code worked as if this was set to C(yes)."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null}},"returns":{},"doc":"\n---\nmodule: yum\nversion_added: historical\nshort_description: Manages packages with the I(yum) package manager\ndescription:\n     - Installs, upgrade, downgrades, removes, and lists packages and groups with the I(yum) package manager.\n     - This module only works on Python 2. If you require Python 3 support see the M(ansible.builtin.dnf) module.\noptions:\n  use_backend:\n    description:\n      - This module supports C(yum) (as it always has), this is known as C(yum3)/C(YUM3)/C(yum-deprecated) by\n        upstream yum developers. As of Ansible 2.7+, this module also supports C(YUM4), which is the\n        \"new yum\" and it has an C(dnf) backend.\n      - By default, this module will select the backend based on the C(ansible_pkg_mgr) fact.\n    default: \"auto\"\n    choices: [ auto, yum, yum4, dnf ]\n    type: str\n    version_added: \"2.7\"\n  name:\n    description:\n      - A package name or package specifier with version, like C(name-1.0).\n      - Comparison operators for package version are valid here C(\u003e), C(\u003c), C(\u003e=), C(\u003c=). Example - C(name\u003e=1.0)\n      - If a previous version is specified, the task also needs to turn C(allow_downgrade) on.\n        See the C(allow_downgrade) documentation for caveats with downgrading packages.\n      - When using state=latest, this can be C('*') which means run C(yum -y update).\n      - You can also pass a url or a local path to a rpm file (using state=present).\n        To operate on several packages this can accept a comma separated string of packages or (as of 2.0) a list of packages.\n    aliases: [ pkg ]\n    type: list\n    elements: str\n  exclude:\n    description:\n      - Package name(s) to exclude when state=present, or latest\n    type: list\n    elements: str\n    version_added: \"2.0\"\n  list:\n    description:\n      - \"Package name to run the equivalent of yum list C(--show-duplicates \u003cpackage\u003e) against. In addition to listing packages,\n        use can also list the following: C(installed), C(updates), C(available) and C(repos).\"\n      - This parameter is mutually exclusive with I(name).\n    type: str\n  state:\n    description:\n      - Whether to install (C(present) or C(installed), C(latest)), or remove (C(absent) or C(removed)) a package.\n      - C(present) and C(installed) will simply ensure that a desired package is installed.\n      - C(latest) will update the specified package if it's not of the latest available version.\n      - C(absent) and C(removed) will remove the specified package.\n      - Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is\n        enabled for this module, then C(absent) is inferred.\n    type: str\n    choices: [ absent, installed, latest, present, removed ]\n  enablerepo:\n    description:\n      - I(Repoid) of repositories to enable for the install/update operation.\n        These repos will not persist beyond the transaction.\n        When specifying multiple repos, separate them with a C(\",\").\n      - As of Ansible 2.7, this can alternatively be a list instead of C(\",\")\n        separated string\n    type: list\n    elements: str\n    version_added: \"0.9\"\n  disablerepo:\n    description:\n      - I(Repoid) of repositories to disable for the install/update operation.\n        These repos will not persist beyond the transaction.\n        When specifying multiple repos, separate them with a C(\",\").\n      - As of Ansible 2.7, this can alternatively be a list instead of C(\",\")\n        separated string\n    type: list\n    elements: str\n    version_added: \"0.9\"\n  conf_file:\n    description:\n      - The remote yum configuration file to use for the transaction.\n    type: str\n    version_added: \"0.6\"\n  disable_gpg_check:\n    description:\n      - Whether to disable the GPG checking of signatures of packages being\n        installed. Has an effect only if state is I(present) or I(latest).\n    type: bool\n    default: \"no\"\n    version_added: \"1.2\"\n  skip_broken:\n    description:\n      - Skip all unavailable packages or packages with broken dependencies\n        without raising an error. Equivalent to passing the --skip-broken option.\n    type: bool\n    default: \"no\"\n    version_added: \"2.3\"\n  update_cache:\n    description:\n      - Force yum to check if cache is out of date and redownload if needed.\n        Has an effect only if state is I(present) or I(latest).\n    type: bool\n    default: \"no\"\n    aliases: [ expire-cache ]\n    version_added: \"1.9\"\n  validate_certs:\n    description:\n      - This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(no), the SSL certificates will not be validated.\n      - This should only set to C(no) used on personally controlled sites using self-signed certificates as it avoids verifying the source site.\n      - Prior to 2.1 the code worked as if this was set to C(yes).\n    type: bool\n    default: \"yes\"\n    version_added: \"2.1\"\n  sslverify:\n    description:\n      - Disables SSL validation of the repository server for this transaction.\n      - This should be set to C(no) if one of the configured repositories is using an untrusted or self-signed certificate.\n    type: bool\n    default: \"yes\"\n    version_added: \"2.13\"\n  update_only:\n    description:\n      - When using latest, only update installed packages. Do not install packages.\n      - Has an effect only if state is I(latest)\n    default: \"no\"\n    type: bool\n    version_added: \"2.5\"\n\n  installroot:\n    description:\n      - Specifies an alternative installroot, relative to which all packages\n        will be installed.\n    default: \"/\"\n    type: str\n    version_added: \"2.3\"\n  security:\n    description:\n      - If set to C(yes), and C(state=latest) then only installs updates that have been marked security related.\n    type: bool\n    default: \"no\"\n    version_added: \"2.4\"\n  bugfix:\n    description:\n      - If set to C(yes), and C(state=latest) then only installs updates that have been marked bugfix related.\n    default: \"no\"\n    type: bool\n    version_added: \"2.6\"\n  allow_downgrade:\n    description:\n      - Specify if the named package and version is allowed to downgrade\n        a maybe already installed higher version of that package.\n        Note that setting allow_downgrade=True can make this module\n        behave in a non-idempotent way. The task could end up with a set\n        of packages that does not match the complete list of specified\n        packages to install (because dependencies between the downgraded\n        package and others can cause changes to the packages which were\n        in the earlier transaction).\n    type: bool\n    default: \"no\"\n    version_added: \"2.4\"\n  enable_plugin:\n    description:\n      - I(Plugin) name to enable for the install/update operation.\n        The enabled plugin will not persist beyond the transaction.\n    type: list\n    elements: str\n    version_added: \"2.5\"\n  disable_plugin:\n    description:\n      - I(Plugin) name to disable for the install/update operation.\n        The disabled plugins will not persist beyond the transaction.\n    type: list\n    elements: str\n    version_added: \"2.5\"\n  releasever:\n    description:\n      - Specifies an alternative release from which all packages will be\n        installed.\n    type: str\n    version_added: \"2.7\"\n  autoremove:\n    description:\n      - If C(yes), removes all \"leaf\" packages from the system that were originally\n        installed as dependencies of user-installed packages but which are no longer\n        required by any such package. Should be used alone or when state is I(absent)\n      - \"NOTE: This feature requires yum \u003e= 3.4.3 (RHEL/CentOS 7+)\"\n    type: bool\n    default: \"no\"\n    version_added: \"2.7\"\n  disable_excludes:\n    description:\n      - Disable the excludes defined in YUM config files.\n      - If set to C(all), disables all excludes.\n      - If set to C(main), disable excludes defined in [main] in yum.conf.\n      - If set to C(repoid), disable excludes defined for given repo id.\n    type: str\n    version_added: \"2.7\"\n  download_only:\n    description:\n      - Only download the packages, do not install them.\n    default: \"no\"\n    type: bool\n    version_added: \"2.7\"\n  lock_timeout:\n    description:\n      - Amount of time to wait for the yum lockfile to be freed.\n    required: false\n    default: 30\n    type: int\n    version_added: \"2.8\"\n  install_weak_deps:\n    description:\n      - Will also install all packages linked by a weak dependency relation.\n      - \"NOTE: This feature requires yum \u003e= 4 (RHEL/CentOS 8+)\"\n    type: bool\n    default: \"yes\"\n    version_added: \"2.8\"\n  download_dir:\n    description:\n      - Specifies an alternate directory to store packages.\n      - Has an effect only if I(download_only) is specified.\n    type: str\n    version_added: \"2.8\"\n  install_repoquery:\n    description:\n      - If repoquery is not available, install yum-utils. If the system is\n        registered to RHN or an RHN Satellite, repoquery allows for querying\n        all channels assigned to the system. It is also required to use the\n        'list' parameter.\n      - \"NOTE: This will run and be logged as a separate yum transation which\n        takes place before any other installation or removal.\"\n      - \"NOTE: This will use the system's default enabled repositories without\n        regard for disablerepo/enablerepo given to the module.\"\n    required: false\n    version_added: \"1.5\"\n    default: \"yes\"\n    type: bool\n  cacheonly:\n    description:\n      - Tells yum to run entirely from system cache; does not download or update metadata.\n    default: \"no\"\n    type: bool\n    version_added: \"2.12\"\nextends_documentation_fragment:\n- action_common_attributes\n- action_common_attributes.flow\nattributes:\n    action:\n        details: In the case of yum, it has 2 action plugins that use it under the hood, M(ansible.builtin.yum) and M(ansible.builtin.package).\n        support: partial\n    async:\n        support: none\n    bypass_host_loop:\n        support: none\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        platforms: rhel\nnotes:\n  - When used with a C(loop:) each package will be processed individually,\n    it is much more efficient to pass the list directly to the I(name) option.\n  - In versions prior to 1.9.2 this module installed and removed each package\n    given to the yum module separately. This caused problems when packages\n    specified by filename or url had to be installed or removed together. In\n    1.9.2 this was fixed so that packages are installed in one yum\n    transaction. However, if one of the packages adds a new yum repository\n    that the other packages come from (such as epel-release) then that package\n    needs to be installed in a separate task. This mimics yum's command line\n    behaviour.\n  - 'Yum itself has two types of groups.  \"Package groups\" are specified in the\n    rpm itself while \"environment groups\" are specified in a separate file\n    (usually by the distribution).  Unfortunately, this division becomes\n    apparent to ansible users because ansible needs to operate on the group\n    of packages in a single transaction and yum requires groups to be specified\n    in different ways when used in that way.  Package groups are specified as\n    \"@development-tools\" and environment groups are \"@^gnome-desktop-environment\".\n    Use the \"yum group list hidden ids\" command to see which category of group the group\n    you want to install falls into.'\n  - 'The yum module does not support clearing yum cache in an idempotent way, so it\n    was decided not to implement it, the only method is to use command and call the yum\n    command directly, namely \"command: yum clean all\"\n    https://github.com/ansible/ansible/pull/31450#issuecomment-352889579'\n# informational: requirements for nodes\nrequirements:\n- yum\nauthor:\n    - Ansible Core Team\n    - Seth Vidal (@skvidal)\n    - Eduard Snesarev (@verm666)\n    - Berend De Schouwer (@berenddeschouwer)\n    - Abhijeet Kasurde (@Akasurde)\n    - Adam Miller (@maxamillion)\n","return":""},{"normalizedName":"YumRepository","module":"yum_repository","short_description":"Add or remove YUM repositories","description":["Add or remove YUM repositories in RPM-based Linux distributions.","If you wish to update an existing repository definition use M(community.general.ini_file) instead."],"options":{"async":{"normalizedName":"Async","structTag":"`yaml:\"async,omitempty\" json:\"async,omitempty\"`","goType":"bool","goElements":"","description":["If set to C(yes) Yum will download packages and metadata from this repo in parallel, if possible."],"type":"bool","required":false,"default":"yes","elements":"","aliases":null},"bandwidth":{"normalizedName":"Bandwidth","structTag":"`yaml:\"bandwidth,omitempty\" json:\"bandwidth,omitempty\"`","goType":"string","goElements":"","description":["Maximum available network bandwidth in bytes/second. Used with the I(throttle) option.","If I(throttle) is a percentage and bandwidth is C(0) then bandwidth throttling will be disabled. If I(throttle) is expressed as a data rate (bytes/sec) then this option is ignored. Default is C(0) (no bandwidth throttling)."],"type":"str","required":false,"default":"0","elements":"","aliases":null},"baseurl":{"normalizedName":"Baseurl","structTag":"`yaml:\"baseurl,omitempty\" json:\"baseurl,omitempty\"`","goType":"[]string","goElements":"","description":["URL to the directory where the yum repository's 'repodata' directory lives.","It can also be a list of multiple URLs.","This, the I(metalink) or I(mirrorlist) parameters are required if I(state) is set to C(present)."],"type":"list","required":false,"default":null,"elements":"str","aliases":null},"cost":{"normalizedName":"Cost","structTag":"`yaml:\"cost,omitempty\" json:\"cost,omitempty\"`","goType":"string","goElements":"","description":["Relative cost of accessing this repository. Useful for weighing one repo's packages as greater/less than any other."],"type":"str","required":false,"default":"1000","elements":"","aliases":null},"deltarpm_metadata_percentage":{"normalizedName":"DeltarpmMetadataPercentage","structTag":"`yaml:\"deltarpm_metadata_percentage,omitempty\" json:\"deltarpm_metadata_percentage,omitempty\"`","goType":"string","goElements":"","description":["When the relative size of deltarpm metadata vs pkgs is larger than this, deltarpm metadata is not downloaded from the repo. Note that you can give values over C(100), so C(200) means that the metadata is required to be half the size of the packages. Use C(0) to turn off this check, and always download metadata."],"type":"str","required":false,"default":"100","elements":"","aliases":null},"deltarpm_percentage":{"normalizedName":"DeltarpmPercentage","structTag":"`yaml:\"deltarpm_percentage,omitempty\" json:\"deltarpm_percentage,omitempty\"`","goType":"string","goElements":"","description":["When the relative size of delta vs pkg is larger than this, delta is not used. Use C(0) to turn off delta rpm processing. Local repositories (with file:// I(baseurl)) have delta rpms turned off by default."],"type":"str","required":false,"default":"75","elements":"","aliases":null},"description":{"normalizedName":"Description","structTag":"`yaml:\"description,omitempty\" json:\"description,omitempty\"`","goType":"string","goElements":"","description":["A human readable string describing the repository. This option corresponds to the \"name\" property in the repo file.","This parameter is only required if I(state) is set to C(present)."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"enabled":{"normalizedName":"Enabled","structTag":"`yaml:\"enabled,omitempty\" json:\"enabled,omitempty\"`","goType":"bool","goElements":"","description":["This tells yum whether or not use this repository.","Yum default value is C(true)."],"type":"bool","required":false,"default":null,"elements":"","aliases":null},"enablegroups":{"normalizedName":"Enablegroups","structTag":"`yaml:\"enablegroups,omitempty\" json:\"enablegroups,omitempty\"`","goType":"bool","goElements":"","description":["Determines whether yum will allow the use of package groups for this repository.","Yum default value is C(true)."],"type":"bool","required":false,"default":null,"elements":"","aliases":null},"exclude":{"normalizedName":"Exclude","structTag":"`yaml:\"exclude,omitempty\" json:\"exclude,omitempty\"`","goType":"[]string","goElements":"","description":["List of packages to exclude from updates or installs. This should be a space separated list. Shell globs using wildcards (eg. C(*) and C(?)) are allowed.","The list can also be a regular YAML array."],"type":"list","required":false,"default":null,"elements":"str","aliases":null},"failovermethod":{"normalizedName":"Failovermethod","structTag":"`yaml:\"failovermethod,omitempty\" json:\"failovermethod,omitempty\"`","goType":"string","goElements":"","description":["C(roundrobin) randomly selects a URL out of the list of URLs to start with and proceeds through each of them as it encounters a failure contacting the host.","C(priority) starts from the first I(baseurl) listed and reads through them sequentially."],"type":"str","required":false,"default":"roundrobin","elements":"","aliases":null},"file":{"normalizedName":"File","structTag":"`yaml:\"file,omitempty\" json:\"file,omitempty\"`","goType":"string","goElements":"","description":["File name without the C(.repo) extension to save the repo in. Defaults to the value of I(name)."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"gpgcakey":{"normalizedName":"Gpgcakey","structTag":"`yaml:\"gpgcakey,omitempty\" json:\"gpgcakey,omitempty\"`","goType":"string","goElements":"","description":["A URL pointing to the ASCII-armored CA key file for the repository."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"gpgcheck":{"normalizedName":"Gpgcheck","structTag":"`yaml:\"gpgcheck,omitempty\" json:\"gpgcheck,omitempty\"`","goType":"bool","goElements":"","description":["Tells yum whether or not it should perform a GPG signature check on packages.","No default setting. If the value is not set, the system setting from C(/etc/yum.conf) or system default of C(no) will be used."],"type":"bool","required":false,"default":null,"elements":"","aliases":null},"gpgkey":{"normalizedName":"Gpgkey","structTag":"`yaml:\"gpgkey,omitempty\" json:\"gpgkey,omitempty\"`","goType":"[]string","goElements":"","description":["A URL pointing to the ASCII-armored GPG key file for the repository.","It can also be a list of multiple URLs."],"type":"list","required":false,"default":null,"elements":"str","aliases":null},"http_caching":{"normalizedName":"HttpCaching","structTag":"`yaml:\"http_caching,omitempty\" json:\"http_caching,omitempty\"`","goType":"string","goElements":"","description":["Determines how upstream HTTP caches are instructed to handle any HTTP downloads that Yum does.","C(all) means that all HTTP downloads should be cached.","C(packages) means that only RPM package downloads should be cached (but not repository metadata downloads).","C(none) means that no HTTP downloads should be cached."],"type":"str","required":false,"default":"all","elements":"","aliases":null},"include":{"normalizedName":"Include","structTag":"`yaml:\"include,omitempty\" json:\"include,omitempty\"`","goType":"string","goElements":"","description":["Include external configuration file. Both, local path and URL is supported. Configuration file will be inserted at the position of the I(include=) line. Included files may contain further include lines. Yum will abort with an error if an inclusion loop is detected."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"includepkgs":{"normalizedName":"Includepkgs","structTag":"`yaml:\"includepkgs,omitempty\" json:\"includepkgs,omitempty\"`","goType":"[]string","goElements":"","description":["List of packages you want to only use from a repository. This should be a space separated list. Shell globs using wildcards (eg. C(*) and C(?)) are allowed. Substitution variables (e.g. C($releasever)) are honored here.","The list can also be a regular YAML array."],"type":"list","required":false,"default":null,"elements":"str","aliases":null},"ip_resolve":{"normalizedName":"IpResolve","structTag":"`yaml:\"ip_resolve,omitempty\" json:\"ip_resolve,omitempty\"`","goType":"string","goElements":"","description":["Determines how yum resolves host names.","C(4) or C(IPv4) - resolve to IPv4 addresses only.","C(6) or C(IPv6) - resolve to IPv6 addresses only."],"type":"str","required":false,"default":"whatever","elements":"","aliases":null},"keepalive":{"normalizedName":"Keepalive","structTag":"`yaml:\"keepalive,omitempty\" json:\"keepalive,omitempty\"`","goType":"bool","goElements":"","description":["This tells yum whether or not HTTP/1.1 keepalive should be used with this repository. This can improve transfer speeds by using one connection when downloading multiple files from a repository."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"keepcache":{"normalizedName":"Keepcache","structTag":"`yaml:\"keepcache,omitempty\" json:\"keepcache,omitempty\"`","goType":"string","goElements":"","description":["Either C(1) or C(0). Determines whether or not yum keeps the cache of headers and packages after successful installation."],"type":"str","required":false,"default":"1","elements":"","aliases":null},"metadata_expire":{"normalizedName":"MetadataExpire","structTag":"`yaml:\"metadata_expire,omitempty\" json:\"metadata_expire,omitempty\"`","goType":"string","goElements":"","description":["Time (in seconds) after which the metadata will expire.","Default value is 6 hours."],"type":"str","required":false,"default":"21600","elements":"","aliases":null},"metadata_expire_filter":{"normalizedName":"MetadataExpireFilter","structTag":"`yaml:\"metadata_expire_filter,omitempty\" json:\"metadata_expire_filter,omitempty\"`","goType":"string","goElements":"","description":["Filter the I(metadata_expire) time, allowing a trade of speed for accuracy if a command doesn't require it. Each yum command can specify that it requires a certain level of timeliness quality from the remote repos. from \"I'm about to install/upgrade, so this better be current\" to \"Anything that's available is good enough\".","C(never) - Nothing is filtered, always obey I(metadata_expire).","C(read-only:past) - Commands that only care about past information are filtered from metadata expiring. Eg. I(yum history) info (if history needs to lookup anything about a previous transaction, then by definition the remote package was available in the past).","C(read-only:present) - Commands that are balanced between past and future. Eg. I(yum list yum).","C(read-only:future) - Commands that are likely to result in running other commands which will require the latest metadata. Eg. I(yum check-update).","Note that this option does not override \"yum clean expire-cache\"."],"type":"str","required":false,"default":"read-only:present","elements":"","aliases":null},"metalink":{"normalizedName":"Metalink","structTag":"`yaml:\"metalink,omitempty\" json:\"metalink,omitempty\"`","goType":"string","goElements":"","description":["Specifies a URL to a metalink file for the repomd.xml, a list of mirrors for the entire repository are generated by converting the mirrors for the repomd.xml file to a I(baseurl).","This, the I(baseurl) or I(mirrorlist) parameters are required if I(state) is set to C(present)."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"mirrorlist":{"normalizedName":"Mirrorlist","structTag":"`yaml:\"mirrorlist,omitempty\" json:\"mirrorlist,omitempty\"`","goType":"string","goElements":"","description":["Specifies a URL to a file containing a list of baseurls.","This, the I(baseurl) or I(metalink) parameters are required if I(state) is set to C(present)."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"mirrorlist_expire":{"normalizedName":"MirrorlistExpire","structTag":"`yaml:\"mirrorlist_expire,omitempty\" json:\"mirrorlist_expire,omitempty\"`","goType":"string","goElements":"","description":["Time (in seconds) after which the mirrorlist locally cached will expire.","Default value is 6 hours."],"type":"str","required":false,"default":"21600","elements":"","aliases":null},"module_hotfixes":{"normalizedName":"ModuleHotfixes","structTag":"`yaml:\"module_hotfixes,omitempty\" json:\"module_hotfixes,omitempty\"`","goType":"bool","goElements":"","description":["Disable module RPM filtering and make all RPMs from the repository available. The default is C(None)."],"type":"bool","required":false,"default":null,"elements":"","aliases":null},"name":{"normalizedName":"Name","structTag":"`yaml:\"name,omitempty\" json:\"name,omitempty\"`","goType":"string","goElements":"","description":["Unique repository ID. This option builds the section name of the repository in the repo file.","This parameter is only required if I(state) is set to C(present) or C(absent)."],"type":"str","required":true,"default":null,"elements":"","aliases":null},"password":{"normalizedName":"Password","structTag":"`yaml:\"password,omitempty\" json:\"password,omitempty\"`","goType":"string","goElements":"","description":["Password to use with the username for basic authentication."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"priority":{"normalizedName":"Priority","structTag":"`yaml:\"priority,omitempty\" json:\"priority,omitempty\"`","goType":"string","goElements":"","description":["Enforce ordered protection of repositories. The value is an integer from 1 to 99.","This option only works if the YUM Priorities plugin is installed."],"type":"str","required":false,"default":"99","elements":"","aliases":null},"protect":{"normalizedName":"Protect","structTag":"`yaml:\"protect,omitempty\" json:\"protect,omitempty\"`","goType":"bool","goElements":"","description":["Protect packages from updates from other repositories."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"proxy":{"normalizedName":"Proxy","structTag":"`yaml:\"proxy,omitempty\" json:\"proxy,omitempty\"`","goType":"string","goElements":"","description":["URL to the proxy server that yum should use. Set to C(_none_) to disable the global proxy setting."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"proxy_password":{"normalizedName":"ProxyPassword","structTag":"`yaml:\"proxy_password,omitempty\" json:\"proxy_password,omitempty\"`","goType":"string","goElements":"","description":["Password for this proxy."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"proxy_username":{"normalizedName":"ProxyUsername","structTag":"`yaml:\"proxy_username,omitempty\" json:\"proxy_username,omitempty\"`","goType":"string","goElements":"","description":["Username to use for proxy."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"repo_gpgcheck":{"normalizedName":"RepoGpgcheck","structTag":"`yaml:\"repo_gpgcheck,omitempty\" json:\"repo_gpgcheck,omitempty\"`","goType":"bool","goElements":"","description":["This tells yum whether or not it should perform a GPG signature check on the repodata from this repository."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"reposdir":{"normalizedName":"Reposdir","structTag":"`yaml:\"reposdir,omitempty\" json:\"reposdir,omitempty\"`","goType":"string","goElements":"","description":["Directory where the C(.repo) files will be stored."],"type":"path","required":false,"default":"/etc/yum.repos.d","elements":"","aliases":null},"retries":{"normalizedName":"Retries","structTag":"`yaml:\"retries,omitempty\" json:\"retries,omitempty\"`","goType":"string","goElements":"","description":["Set the number of times any attempt to retrieve a file should retry before returning an error. Setting this to C(0) makes yum try forever."],"type":"str","required":false,"default":"10","elements":"","aliases":null},"s3_enabled":{"normalizedName":"S3Enabled","structTag":"`yaml:\"s3_enabled,omitempty\" json:\"s3_enabled,omitempty\"`","goType":"bool","goElements":"","description":["Enables support for S3 repositories.","This option only works if the YUM S3 plugin is installed."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"skip_if_unavailable":{"normalizedName":"SkipIfUnavailable","structTag":"`yaml:\"skip_if_unavailable,omitempty\" json:\"skip_if_unavailable,omitempty\"`","goType":"bool","goElements":"","description":["If set to C(yes) yum will continue running if this repository cannot be contacted for any reason. This should be set carefully as all repos are consulted for any given command."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"ssl_check_cert_permissions":{"normalizedName":"SslCheckCertPermissions","structTag":"`yaml:\"ssl_check_cert_permissions,omitempty\" json:\"ssl_check_cert_permissions,omitempty\"`","goType":"bool","goElements":"","description":["Whether yum should check the permissions on the paths for the certificates on the repository (both remote and local).","If we can't read any of the files then yum will force I(skip_if_unavailable) to be C(yes). This is most useful for non-root processes which use yum on repos that have client cert files which are readable only by root."],"type":"bool","required":false,"default":"no","elements":"","aliases":null},"sslcacert":{"normalizedName":"Sslcacert","structTag":"`yaml:\"sslcacert,omitempty\" json:\"sslcacert,omitempty\"`","goType":"string","goElements":"","description":["Path to the directory containing the databases of the certificate authorities yum should use to verify SSL certificates."],"type":"str","required":false,"default":null,"elements":"","aliases":["ca_cert"]},"sslclientcert":{"normalizedName":"Sslclientcert","structTag":"`yaml:\"sslclientcert,omitempty\" json:\"sslclientcert,omitempty\"`","goType":"string","goElements":"","description":["Path to the SSL client certificate yum should use to connect to repos/remote sites."],"type":"str","required":false,"default":null,"elements":"","aliases":["client_cert"]},"sslclientkey":{"normalizedName":"Sslclientkey","structTag":"`yaml:\"sslclientkey,omitempty\" json:\"sslclientkey,omitempty\"`","goType":"string","goElements":"","description":["Path to the SSL client key yum should use to connect to repos/remote sites."],"type":"str","required":false,"default":null,"elements":"","aliases":["client_key"]},"sslverify":{"normalizedName":"Sslverify","structTag":"`yaml:\"sslverify,omitempty\" json:\"sslverify,omitempty\"`","goType":"bool","goElements":"","description":["Defines whether yum should verify SSL certificates/hosts at all."],"type":"bool","required":false,"default":"yes","elements":"","aliases":["validate_certs"]},"state":{"normalizedName":"State","structTag":"`yaml:\"state,omitempty\" json:\"state,omitempty\"`","goType":"string","goElements":"","description":["State of the repo file."],"type":"str","required":false,"default":"present","elements":"","aliases":null},"throttle":{"normalizedName":"Throttle","structTag":"`yaml:\"throttle,omitempty\" json:\"throttle,omitempty\"`","goType":"string","goElements":"","description":["Enable bandwidth throttling for downloads.","This option can be expressed as a absolute data rate in bytes/sec. An SI prefix (k, M or G) may be appended to the bandwidth value."],"type":"str","required":false,"default":null,"elements":"","aliases":null},"timeout":{"normalizedName":"Timeout","structTag":"`yaml:\"timeout,omitempty\" json:\"timeout,omitempty\"`","goType":"string","goElements":"","description":["Number of seconds to wait for a connection before timing out."],"type":"str","required":false,"default":"30","elements":"","aliases":null},"ui_repoid_vars":{"normalizedName":"UiRepoidVars","structTag":"`yaml:\"ui_repoid_vars,omitempty\" json:\"ui_repoid_vars,omitempty\"`","goType":"string","goElements":"","description":["When a repository id is displayed, append these yum variables to the string if they are used in the I(baseurl)/etc. Variables are appended in the order listed (and found)."],"type":"str","required":false,"default":"releasever basearch","elements":"","aliases":null},"username":{"normalizedName":"Username","structTag":"`yaml:\"username,omitempty\" json:\"username,omitempty\"`","goType":"string","goElements":"","description":["Username to use for basic authentication to a repo or really any url."],"type":"str","required":false,"default":null,"elements":"","aliases":null}},"returns":{"repo":{"normalizedName":"Repo","description":"repository name","returned":"success","type":"str","sample":"epel","goType":"string","structTag":"`yaml:\"repo,omitempty\" json:\"repo,omitempty\"`"},"state":{"normalizedName":"State","description":"state of the target, after execution","returned":"success","type":"str","sample":"present","goType":"string","structTag":"`yaml:\"state,omitempty\" json:\"state,omitempty\"`"}},"doc":"\n---\nmodule: yum_repository\nauthor: Jiri Tyr (@jtyr)\nversion_added: '2.1'\nshort_description: Add or remove YUM repositories\ndescription:\n  - Add or remove YUM repositories in RPM-based Linux distributions.\n  - If you wish to update an existing repository definition use M(community.general.ini_file) instead.\n\noptions:\n  async:\n    description:\n      - If set to C(yes) Yum will download packages and metadata from this\n        repo in parallel, if possible.\n    type: bool\n    default: 'yes'\n  bandwidth:\n    description:\n      - Maximum available network bandwidth in bytes/second. Used with the\n        I(throttle) option.\n      - If I(throttle) is a percentage and bandwidth is C(0) then bandwidth\n        throttling will be disabled. If I(throttle) is expressed as a data rate\n        (bytes/sec) then this option is ignored. Default is C(0) (no bandwidth\n        throttling).\n    type: str\n    default: '0'\n  baseurl:\n    description:\n      - URL to the directory where the yum repository's 'repodata' directory\n        lives.\n      - It can also be a list of multiple URLs.\n      - This, the I(metalink) or I(mirrorlist) parameters are required if I(state) is set to\n        C(present).\n    type: list\n    elements: str\n  cost:\n    description:\n      - Relative cost of accessing this repository. Useful for weighing one\n        repo's packages as greater/less than any other.\n    type: str\n    default: '1000'\n  deltarpm_metadata_percentage:\n    description:\n      - When the relative size of deltarpm metadata vs pkgs is larger than\n        this, deltarpm metadata is not downloaded from the repo. Note that you\n        can give values over C(100), so C(200) means that the metadata is\n        required to be half the size of the packages. Use C(0) to turn off\n        this check, and always download metadata.\n    type: str\n    default: '100'\n  deltarpm_percentage:\n    description:\n      - When the relative size of delta vs pkg is larger than this, delta is\n        not used. Use C(0) to turn off delta rpm processing. Local repositories\n        (with file:// I(baseurl)) have delta rpms turned off by default.\n    type: str\n    default: '75'\n  description:\n    description:\n      - A human readable string describing the repository. This option corresponds to the \"name\" property in the repo file.\n      - This parameter is only required if I(state) is set to C(present).\n    type: str\n  enabled:\n    description:\n      - This tells yum whether or not use this repository.\n      - Yum default value is C(true).\n    type: bool\n  enablegroups:\n    description:\n      - Determines whether yum will allow the use of package groups for this\n        repository.\n      - Yum default value is C(true).\n    type: bool\n  exclude:\n    description:\n      - List of packages to exclude from updates or installs. This should be a\n        space separated list. Shell globs using wildcards (eg. C(*) and C(?))\n        are allowed.\n      - The list can also be a regular YAML array.\n    type: list\n    elements: str\n  failovermethod:\n    choices: [roundrobin, priority]\n    default: roundrobin\n    description:\n      - C(roundrobin) randomly selects a URL out of the list of URLs to start\n        with and proceeds through each of them as it encounters a failure\n        contacting the host.\n      - C(priority) starts from the first I(baseurl) listed and reads through\n        them sequentially.\n    type: str\n  file:\n    description:\n      - File name without the C(.repo) extension to save the repo in. Defaults\n        to the value of I(name).\n    type: str\n  gpgcakey:\n    description:\n      - A URL pointing to the ASCII-armored CA key file for the repository.\n    type: str\n  gpgcheck:\n    description:\n      - Tells yum whether or not it should perform a GPG signature check on\n        packages.\n      - No default setting. If the value is not set, the system setting from\n        C(/etc/yum.conf) or system default of C(no) will be used.\n    type: bool\n  gpgkey:\n    description:\n      - A URL pointing to the ASCII-armored GPG key file for the repository.\n      - It can also be a list of multiple URLs.\n    type: list\n    elements: str\n  module_hotfixes:\n    description:\n      - Disable module RPM filtering and make all RPMs from the repository\n        available. The default is C(None).\n    version_added: '2.11'\n    type: bool\n  http_caching:\n    description:\n      - Determines how upstream HTTP caches are instructed to handle any HTTP\n        downloads that Yum does.\n      - C(all) means that all HTTP downloads should be cached.\n      - C(packages) means that only RPM package downloads should be cached (but\n         not repository metadata downloads).\n      - C(none) means that no HTTP downloads should be cached.\n    choices: [all, packages, none]\n    type: str\n    default: all\n  include:\n    description:\n      - Include external configuration file. Both, local path and URL is\n        supported. Configuration file will be inserted at the position of the\n        I(include=) line. Included files may contain further include lines.\n        Yum will abort with an error if an inclusion loop is detected.\n    type: str\n  includepkgs:\n    description:\n      - List of packages you want to only use from a repository. This should be\n        a space separated list. Shell globs using wildcards (eg. C(*) and C(?))\n        are allowed. Substitution variables (e.g. C($releasever)) are honored\n        here.\n      - The list can also be a regular YAML array.\n    type: list\n    elements: str\n  ip_resolve:\n    description:\n      - Determines how yum resolves host names.\n      - C(4) or C(IPv4) - resolve to IPv4 addresses only.\n      - C(6) or C(IPv6) - resolve to IPv6 addresses only.\n    choices: ['4', '6', IPv4, IPv6, whatever]\n    type: str\n    default: whatever\n  keepalive:\n    description:\n      - This tells yum whether or not HTTP/1.1 keepalive should be used with\n        this repository. This can improve transfer speeds by using one\n        connection when downloading multiple files from a repository.\n    type: bool\n    default: 'no'\n  keepcache:\n    description:\n      - Either C(1) or C(0). Determines whether or not yum keeps the cache of\n        headers and packages after successful installation.\n    choices: ['0', '1']\n    type: str\n    default: '1'\n  metadata_expire:\n    description:\n      - Time (in seconds) after which the metadata will expire.\n      - Default value is 6 hours.\n    type: str\n    default: '21600'\n  metadata_expire_filter:\n    description:\n      - Filter the I(metadata_expire) time, allowing a trade of speed for\n        accuracy if a command doesn't require it. Each yum command can specify\n        that it requires a certain level of timeliness quality from the remote\n        repos. from \"I'm about to install/upgrade, so this better be current\"\n        to \"Anything that's available is good enough\".\n      - C(never) - Nothing is filtered, always obey I(metadata_expire).\n      - C(read-only:past) - Commands that only care about past information are\n        filtered from metadata expiring. Eg. I(yum history) info (if history\n        needs to lookup anything about a previous transaction, then by\n        definition the remote package was available in the past).\n      - C(read-only:present) - Commands that are balanced between past and\n        future. Eg. I(yum list yum).\n      - C(read-only:future) - Commands that are likely to result in running\n        other commands which will require the latest metadata. Eg.\n        I(yum check-update).\n      - Note that this option does not override \"yum clean expire-cache\".\n    choices: [never, 'read-only:past', 'read-only:present', 'read-only:future']\n    type: str\n    default: 'read-only:present'\n  metalink:\n    description:\n      - Specifies a URL to a metalink file for the repomd.xml, a list of\n        mirrors for the entire repository are generated by converting the\n        mirrors for the repomd.xml file to a I(baseurl).\n      - This, the I(baseurl) or I(mirrorlist) parameters are required if I(state) is set to\n        C(present).\n    type: str\n  mirrorlist:\n    description:\n      - Specifies a URL to a file containing a list of baseurls.\n      - This, the I(baseurl) or I(metalink) parameters are required if I(state) is set to\n        C(present).\n    type: str\n  mirrorlist_expire:\n    description:\n      - Time (in seconds) after which the mirrorlist locally cached will\n        expire.\n      - Default value is 6 hours.\n    type: str\n    default: '21600'\n  name:\n    description:\n      - Unique repository ID. This option builds the section name of the repository in the repo file.\n      - This parameter is only required if I(state) is set to C(present) or\n        C(absent).\n    type: str\n    required: true\n  password:\n    description:\n      - Password to use with the username for basic authentication.\n    type: str\n  priority:\n    description:\n      - Enforce ordered protection of repositories. The value is an integer\n        from 1 to 99.\n      - This option only works if the YUM Priorities plugin is installed.\n    type: str\n    default: '99'\n  protect:\n    description:\n      - Protect packages from updates from other repositories.\n    type: bool\n    default: 'no'\n  proxy:\n    description:\n      - URL to the proxy server that yum should use. Set to C(_none_) to\n        disable the global proxy setting.\n    type: str\n  proxy_password:\n    description:\n      - Password for this proxy.\n    type: str\n  proxy_username:\n    description:\n      - Username to use for proxy.\n    type: str\n  repo_gpgcheck:\n    description:\n      - This tells yum whether or not it should perform a GPG signature check\n        on the repodata from this repository.\n    type: bool\n    default: 'no'\n  reposdir:\n    description:\n      - Directory where the C(.repo) files will be stored.\n    type: path\n    default: /etc/yum.repos.d\n  retries:\n    description:\n      - Set the number of times any attempt to retrieve a file should retry\n        before returning an error. Setting this to C(0) makes yum try forever.\n    type: str\n    default: '10'\n  s3_enabled:\n    description:\n      - Enables support for S3 repositories.\n      - This option only works if the YUM S3 plugin is installed.\n    type: bool\n    default: 'no'\n  skip_if_unavailable:\n    description:\n      - If set to C(yes) yum will continue running if this repository cannot be\n        contacted for any reason. This should be set carefully as all repos are\n        consulted for any given command.\n    type: bool\n    default: 'no'\n  ssl_check_cert_permissions:\n    description:\n      - Whether yum should check the permissions on the paths for the\n        certificates on the repository (both remote and local).\n      - If we can't read any of the files then yum will force\n        I(skip_if_unavailable) to be C(yes). This is most useful for non-root\n        processes which use yum on repos that have client cert files which are\n        readable only by root.\n    type: bool\n    default: 'no'\n  sslcacert:\n    description:\n      - Path to the directory containing the databases of the certificate\n        authorities yum should use to verify SSL certificates.\n    type: str\n    aliases: [ ca_cert ]\n  sslclientcert:\n    description:\n      - Path to the SSL client certificate yum should use to connect to\n        repos/remote sites.\n    type: str\n    aliases: [ client_cert ]\n  sslclientkey:\n    description:\n      - Path to the SSL client key yum should use to connect to repos/remote\n        sites.\n    type: str\n    aliases: [ client_key ]\n  sslverify:\n    description:\n      - Defines whether yum should verify SSL certificates/hosts at all.\n    type: bool\n    default: 'yes'\n    aliases: [ validate_certs ]\n  state:\n    description:\n      - State of the repo file.\n    choices: [absent, present]\n    type: str\n    default: present\n  throttle:\n    description:\n      - Enable bandwidth throttling for downloads.\n      - This option can be expressed as a absolute data rate in bytes/sec. An\n        SI prefix (k, M or G) may be appended to the bandwidth value.\n    type: str\n  timeout:\n    description:\n      - Number of seconds to wait for a connection before timing out.\n    type: str\n    default: '30'\n  ui_repoid_vars:\n    description:\n      - When a repository id is displayed, append these yum variables to the\n        string if they are used in the I(baseurl)/etc. Variables are appended\n        in the order listed (and found).\n    type: str\n    default: releasever basearch\n  username:\n    description:\n      - Username to use for basic authentication to a repo or really any url.\n    type: str\n\nextends_documentation_fragment:\n    - action_common_attributes\n    - files\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        platforms: rhel\nnotes:\n  - All comments will be removed if modifying an existing repo file.\n  - Section order is preserved in an existing repo file.\n  - Parameters in a section are ordered alphabetically in an existing repo\n    file.\n  - The repo file will be automatically deleted if it contains no repository.\n  - When removing a repository, beware that the metadata cache may still remain\n    on disk until you run C(yum clean all). Use a notification handler for this.\n  - \"The C(params) parameter was removed in Ansible 2.5 due to circumventing Ansible's parameter\n    handling\"\n","return":"\nrepo:\n    description: repository name\n    returned: success\n    type: str\n    sample: \"epel\"\nstate:\n    description: state of the target, after execution\n    returned: success\n    type: str\n    sample: \"present\"\n"}]}"
)

var (
	factories = map[string]factory{}
)

type factory func() types.Module

func addModuleFactory(ty string, f factory) {
	factories[ty] = f
}

func ModuleByName(ty string) types.Module {
	return factories[ty]()
}
