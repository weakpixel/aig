package module

// Autogenerated file

import (
	"github.com/weakpixel/aig/pkg/types"
)

func init() {
	addModuleFactory("blockinfile", func() Module {
		return NewBlockinfile()
	})
}

//
// Blockinfile (blockinfile) - Insert/update/remove a text block surrounded by marker lines
//
func NewBlockinfile() *Blockinfile {
	return &Blockinfile{}
}

// Blockinfile (blockinfile) - Insert/update/remove a text block surrounded by marker lines
//
// This module will insert/update/remove a block of multi-line text surrounded by customizable marker lines.
//
// Source: https://github.com/ansible/ansible/blob/v2.13.1/lib/ansible/modules/blockinfile.py
type Blockinfile struct {
	Params BlockinfileParams
	Result BlockinfileResult
}

type BlockinfileParams struct {

	// Backup
	// Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
	//
	// Default: no
	// Required: false
	Backup bool `yaml:"backup,omitempty" json:"backup,omitempty"`

	// Block
	// The text to insert inside the marker lines.
	// If it is missing or an empty string, the block will be removed as if C(state) were specified to C(absent).
	//
	// Default:
	// Required: false
	Block string `yaml:"block,omitempty" json:"block,omitempty"`

	// Create
	// Create a new file if it does not exist.
	//
	// Default: no
	// Required: false
	Create bool `yaml:"create,omitempty" json:"create,omitempty"`

	// Insertafter
	// If specified and no begin/ending C(marker) lines are found, the block will be inserted after the last match of specified regular expression.
	// A special value is available; C(EOF) for inserting the block at the end of the file.
	// If specified regular expression has no matches, C(EOF) will be used instead.
	//
	// Default: EOF
	// Required: false
	Insertafter string `yaml:"insertafter,omitempty" json:"insertafter,omitempty"`

	// Insertbefore
	// If specified and no begin/ending C(marker) lines are found, the block will be inserted before the last match of specified regular expression.
	// A special value is available; C(BOF) for inserting the block at the beginning of the file.
	// If specified regular expression has no matches, the block will be inserted at the end of the file.
	//
	// Default: <no value>
	// Required: false
	Insertbefore string `yaml:"insertbefore,omitempty" json:"insertbefore,omitempty"`

	// Marker
	// The marker line template.
	// C({mark}) will be replaced with the values in C(marker_begin) (default="BEGIN") and C(marker_end) (default="END").
	// Using a custom marker without the C({mark}) variable may result in the block being repeatedly inserted on subsequent playbook runs.
	//
	// Default: # {mark} ANSIBLE MANAGED BLOCK
	// Required: false
	Marker string `yaml:"marker,omitempty" json:"marker,omitempty"`

	// MarkerBegin
	// This will be inserted at C({mark}) in the opening ansible block marker.
	//
	// Default: BEGIN
	// Required: false
	MarkerBegin string `yaml:"marker_begin,omitempty" json:"marker_begin,omitempty"`

	// MarkerEnd
	// This will be inserted at C({mark}) in the closing ansible block marker.
	//
	// Default: END
	// Required: false
	MarkerEnd string `yaml:"marker_end,omitempty" json:"marker_end,omitempty"`

	// Path
	// The file to modify.
	// Before Ansible 2.3 this option was only usable as I(dest), I(destfile) and I(name).
	//
	// Default: <no value>
	// Required: true
	Path string `yaml:"path,omitempty" json:"path,omitempty"`

	// State
	// Whether the block should be there or not.
	//
	// Default: present
	// Required: false
	State string `yaml:"state,omitempty" json:"state,omitempty"`
}

type BlockinfileResult struct {
	types.CommonReturn
	Raw string
}

func (m *Blockinfile) GetResult() interface{} {
	return &m.Result
}

func (m *Blockinfile) GetResultRaw() string {
	return m.Result.Raw
}

func (m *Blockinfile) GetCommonResult() types.CommonReturn {
	return m.Result.CommonReturn
}

func (m *Blockinfile) GetParams() interface{} {
	return &m.Params
}

func (m *Blockinfile) GetType() string {
	return "blockinfile"
}
