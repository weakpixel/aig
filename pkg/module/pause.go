package module

// Autogenerated file

import (
	"github.com/weakpixel/aig/pkg/types"
)

func init() {
	addModuleFactory("pause", func() Module {
		return NewPause()
	})
}

//
// Pause (pause) - Pause playbook execution
//
func NewPause() *Pause {
	return &Pause{}
}

// Pause (pause) - Pause playbook execution
//
// Pauses playbook execution for a set amount of time, or until a prompt is acknowledged. All parameters are optional. The default behavior is to pause with a prompt.
// To pause/wait/sleep per host, use the M(ansible.builtin.wait_for) module.
// You can use C(ctrl+c) if you wish to advance a pause earlier than it is set to expire or if you need to abort a playbook run entirely. To continue early press C(ctrl+c) and then C(c). To abort a playbook press C(ctrl+c) and then C(a).
// The pause module integrates into async/parallelized playbooks without any special considerations (see Rolling Updates). When using pauses with the C(serial) playbook parameter (as in rolling updates) you are only prompted once for the current group of hosts.
// This module is also supported for Windows targets.
type Pause struct {
	Params PauseParams
	Result PauseResult
}

type PauseParams struct {

	// Echo
	// Controls whether or not keyboard input is shown when typing.
	// Has no effect if 'seconds' or 'minutes' is set.
	//
	// Default: yes
	// Required: false
	Echo bool `yaml:"echo,omitempty" json:"echo,omitempty"`

	// Minutes
	// A positive number of minutes to pause for.
	//
	// Default: <no value>
	// Required: false
	Minutes string `yaml:"minutes,omitempty" json:"minutes,omitempty"`

	// Prompt
	// Optional text to use for the prompt message.
	//
	// Default: <no value>
	// Required: false
	Prompt string `yaml:"prompt,omitempty" json:"prompt,omitempty"`

	// Seconds
	// A positive number of seconds to pause for.
	//
	// Default: <no value>
	// Required: false
	Seconds string `yaml:"seconds,omitempty" json:"seconds,omitempty"`
}

type PauseResult struct {
	types.CommonReturn
	Raw string

	// Delta
	// Time paused in seconds
	Delta string `yaml:"delta,omitempty" json:"delta,omitempty"`

	// Echo
	// Value of echo setting
	Echo bool `yaml:"echo,omitempty" json:"echo,omitempty"`

	// Start
	// Time when started pausing
	Start string `yaml:"start,omitempty" json:"start,omitempty"`

	// Stdout
	// Output of pause module
	Stdout string `yaml:"stdout,omitempty" json:"stdout,omitempty"`

	// Stop
	// Time when ended pausing
	Stop string `yaml:"stop,omitempty" json:"stop,omitempty"`

	// UserInput
	// User input from interactive console
	UserInput string `yaml:"user_input,omitempty" json:"user_input,omitempty"`
}

func (m *Pause) GetResult() interface{} {
	return &m.Result
}

func (m *Pause) GetResultRaw() string {
	return m.Result.Raw
}

func (m *Pause) GetCommonResult() types.CommonReturn {
	return m.Result.CommonReturn
}

func (m *Pause) GetParams() interface{} {
	return &m.Params
}

func (m *Pause) GetType() string {
	return "pause"
}
