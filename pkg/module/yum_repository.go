package module

// Autogenerated file

import (
	"fmt"
	"github.com/weakpixel/aig/pkg/types"
)

func init() {
	addModuleFactory("yum_repository", func() types.Module {
		return NewYumRepository()
	})
}

//
// YumRepository (yum_repository) - Add or remove YUM repositories
//
func NewYumRepository() *YumRepository {
	module := YumRepository{}
	// Create dynamic param values
	paramValues := map[string]types.Value{}
	paramValues["async"] = types.NewBoolValue(&module.Params.Async)
	paramValues["bandwidth"] = types.NewStringValue(&module.Params.Bandwidth)
	paramValues["baseurl"] = types.NewStringArrayValue(&module.Params.Baseurl)
	paramValues["cost"] = types.NewStringValue(&module.Params.Cost)
	paramValues["deltarpm_metadata_percentage"] = types.NewStringValue(&module.Params.DeltarpmMetadataPercentage)
	paramValues["deltarpm_percentage"] = types.NewStringValue(&module.Params.DeltarpmPercentage)
	paramValues["description"] = types.NewStringValue(&module.Params.Description)
	paramValues["enabled"] = types.NewBoolValue(&module.Params.Enabled)
	paramValues["enablegroups"] = types.NewBoolValue(&module.Params.Enablegroups)
	paramValues["exclude"] = types.NewStringArrayValue(&module.Params.Exclude)
	paramValues["failovermethod"] = types.NewStringValue(&module.Params.Failovermethod)
	paramValues["file"] = types.NewStringValue(&module.Params.File)
	paramValues["gpgcakey"] = types.NewStringValue(&module.Params.Gpgcakey)
	paramValues["gpgcheck"] = types.NewBoolValue(&module.Params.Gpgcheck)
	paramValues["gpgkey"] = types.NewStringArrayValue(&module.Params.Gpgkey)
	paramValues["http_caching"] = types.NewStringValue(&module.Params.HttpCaching)
	paramValues["include"] = types.NewStringValue(&module.Params.Include)
	paramValues["includepkgs"] = types.NewStringArrayValue(&module.Params.Includepkgs)
	paramValues["ip_resolve"] = types.NewStringValue(&module.Params.IpResolve)
	paramValues["keepalive"] = types.NewBoolValue(&module.Params.Keepalive)
	paramValues["keepcache"] = types.NewStringValue(&module.Params.Keepcache)
	paramValues["metadata_expire"] = types.NewStringValue(&module.Params.MetadataExpire)
	paramValues["metadata_expire_filter"] = types.NewStringValue(&module.Params.MetadataExpireFilter)
	paramValues["metalink"] = types.NewStringValue(&module.Params.Metalink)
	paramValues["mirrorlist"] = types.NewStringValue(&module.Params.Mirrorlist)
	paramValues["mirrorlist_expire"] = types.NewStringValue(&module.Params.MirrorlistExpire)
	paramValues["module_hotfixes"] = types.NewBoolValue(&module.Params.ModuleHotfixes)
	paramValues["name"] = types.NewStringValue(&module.Params.Name)
	paramValues["password"] = types.NewStringValue(&module.Params.Password)
	paramValues["priority"] = types.NewStringValue(&module.Params.Priority)
	paramValues["protect"] = types.NewBoolValue(&module.Params.Protect)
	paramValues["proxy"] = types.NewStringValue(&module.Params.Proxy)
	paramValues["proxy_password"] = types.NewStringValue(&module.Params.ProxyPassword)
	paramValues["proxy_username"] = types.NewStringValue(&module.Params.ProxyUsername)
	paramValues["repo_gpgcheck"] = types.NewBoolValue(&module.Params.RepoGpgcheck)
	paramValues["reposdir"] = types.NewStringValue(&module.Params.Reposdir)
	paramValues["retries"] = types.NewStringValue(&module.Params.Retries)
	paramValues["s3_enabled"] = types.NewBoolValue(&module.Params.S3Enabled)
	paramValues["skip_if_unavailable"] = types.NewBoolValue(&module.Params.SkipIfUnavailable)
	paramValues["ssl_check_cert_permissions"] = types.NewBoolValue(&module.Params.SslCheckCertPermissions)
	paramValues["sslcacert"] = types.NewStringValue(&module.Params.Sslcacert)
	paramValues["sslclientcert"] = types.NewStringValue(&module.Params.Sslclientcert)
	paramValues["sslclientkey"] = types.NewStringValue(&module.Params.Sslclientkey)
	paramValues["sslverify"] = types.NewBoolValue(&module.Params.Sslverify)
	paramValues["state"] = types.NewStringValue(&module.Params.State)
	paramValues["throttle"] = types.NewStringValue(&module.Params.Throttle)
	paramValues["timeout"] = types.NewStringValue(&module.Params.Timeout)
	paramValues["ui_repoid_vars"] = types.NewStringValue(&module.Params.UiRepoidVars)
	paramValues["username"] = types.NewStringValue(&module.Params.Username)
	module.Params.values = paramValues

	// Create dynamic result values
	resultValues := map[string]types.Value{}

	resultValues["repo"] = types.NewStringValue(&module.Result.Repo)
	resultValues["state"] = types.NewStringValue(&module.Result.State)
	module.Result.values = resultValues

	return &module
}

// YumRepository (yum_repository) - Add or remove YUM repositories
//
// Add or remove YUM repositories in RPM-based Linux distributions.
//
// If you wish to update an existing repository definition use M(community.general.ini_file) instead.
//
//
// Source: https://github.com/ansible/ansible/blob/v2.13.1/lib/ansible/modules/yum_repository.py
type YumRepository struct {
	Params YumRepositoryParams
	Result YumRepositoryResult
}

type YumRepositoryParams struct {

	// Async
	// If set to C(yes) Yum will download packages and metadata from this repo in parallel, if possible.
	//
	// Default: yes
	// Required: false
	Async bool `yaml:"async,omitempty" json:"async,omitempty"`

	// Bandwidth
	// Maximum available network bandwidth in bytes/second. Used with the I(throttle) option.
	// If I(throttle) is a percentage and bandwidth is C(0) then bandwidth throttling will be disabled. If I(throttle) is expressed as a data rate (bytes/sec) then this option is ignored. Default is C(0) (no bandwidth throttling).
	//
	// Default: 0
	// Required: false
	Bandwidth string `yaml:"bandwidth,omitempty" json:"bandwidth,omitempty"`

	// Baseurl
	// URL to the directory where the yum repository's 'repodata' directory lives.
	// It can also be a list of multiple URLs.
	// This, the I(metalink) or I(mirrorlist) parameters are required if I(state) is set to C(present).
	//
	// Default: <no value>
	// Required: false
	Baseurl []string `yaml:"baseurl,omitempty" json:"baseurl,omitempty"`

	// Cost
	// Relative cost of accessing this repository. Useful for weighing one repo's packages as greater/less than any other.
	//
	// Default: 1000
	// Required: false
	Cost string `yaml:"cost,omitempty" json:"cost,omitempty"`

	// DeltarpmMetadataPercentage
	// When the relative size of deltarpm metadata vs pkgs is larger than this, deltarpm metadata is not downloaded from the repo. Note that you can give values over C(100), so C(200) means that the metadata is required to be half the size of the packages. Use C(0) to turn off this check, and always download metadata.
	//
	// Default: 100
	// Required: false
	DeltarpmMetadataPercentage string `yaml:"deltarpm_metadata_percentage,omitempty" json:"deltarpm_metadata_percentage,omitempty"`

	// DeltarpmPercentage
	// When the relative size of delta vs pkg is larger than this, delta is not used. Use C(0) to turn off delta rpm processing. Local repositories (with file:// I(baseurl)) have delta rpms turned off by default.
	//
	// Default: 75
	// Required: false
	DeltarpmPercentage string `yaml:"deltarpm_percentage,omitempty" json:"deltarpm_percentage,omitempty"`

	// Description
	// A human readable string describing the repository. This option corresponds to the "name" property in the repo file.
	// This parameter is only required if I(state) is set to C(present).
	//
	// Default: <no value>
	// Required: false
	Description string `yaml:"description,omitempty" json:"description,omitempty"`

	// Enabled
	// This tells yum whether or not use this repository.
	// Yum default value is C(true).
	//
	// Default: <no value>
	// Required: false
	Enabled bool `yaml:"enabled,omitempty" json:"enabled,omitempty"`

	// Enablegroups
	// Determines whether yum will allow the use of package groups for this repository.
	// Yum default value is C(true).
	//
	// Default: <no value>
	// Required: false
	Enablegroups bool `yaml:"enablegroups,omitempty" json:"enablegroups,omitempty"`

	// Exclude
	// List of packages to exclude from updates or installs. This should be a space separated list. Shell globs using wildcards (eg. C(*) and C(?)) are allowed.
	// The list can also be a regular YAML array.
	//
	// Default: <no value>
	// Required: false
	Exclude []string `yaml:"exclude,omitempty" json:"exclude,omitempty"`

	// Failovermethod
	// C(roundrobin) randomly selects a URL out of the list of URLs to start with and proceeds through each of them as it encounters a failure contacting the host.
	// C(priority) starts from the first I(baseurl) listed and reads through them sequentially.
	//
	// Default: roundrobin
	// Required: false
	Failovermethod string `yaml:"failovermethod,omitempty" json:"failovermethod,omitempty"`

	// File
	// File name without the C(.repo) extension to save the repo in. Defaults to the value of I(name).
	//
	// Default: <no value>
	// Required: false
	File string `yaml:"file,omitempty" json:"file,omitempty"`

	// Gpgcakey
	// A URL pointing to the ASCII-armored CA key file for the repository.
	//
	// Default: <no value>
	// Required: false
	Gpgcakey string `yaml:"gpgcakey,omitempty" json:"gpgcakey,omitempty"`

	// Gpgcheck
	// Tells yum whether or not it should perform a GPG signature check on packages.
	// No default setting. If the value is not set, the system setting from C(/etc/yum.conf) or system default of C(no) will be used.
	//
	// Default: <no value>
	// Required: false
	Gpgcheck bool `yaml:"gpgcheck,omitempty" json:"gpgcheck,omitempty"`

	// Gpgkey
	// A URL pointing to the ASCII-armored GPG key file for the repository.
	// It can also be a list of multiple URLs.
	//
	// Default: <no value>
	// Required: false
	Gpgkey []string `yaml:"gpgkey,omitempty" json:"gpgkey,omitempty"`

	// HttpCaching
	// Determines how upstream HTTP caches are instructed to handle any HTTP downloads that Yum does.
	// C(all) means that all HTTP downloads should be cached.
	// C(packages) means that only RPM package downloads should be cached (but not repository metadata downloads).
	// C(none) means that no HTTP downloads should be cached.
	//
	// Default: all
	// Required: false
	HttpCaching string `yaml:"http_caching,omitempty" json:"http_caching,omitempty"`

	// Include
	// Include external configuration file. Both, local path and URL is supported. Configuration file will be inserted at the position of the I(include=) line. Included files may contain further include lines. Yum will abort with an error if an inclusion loop is detected.
	//
	// Default: <no value>
	// Required: false
	Include string `yaml:"include,omitempty" json:"include,omitempty"`

	// Includepkgs
	// List of packages you want to only use from a repository. This should be a space separated list. Shell globs using wildcards (eg. C(*) and C(?)) are allowed. Substitution variables (e.g. C($releasever)) are honored here.
	// The list can also be a regular YAML array.
	//
	// Default: <no value>
	// Required: false
	Includepkgs []string `yaml:"includepkgs,omitempty" json:"includepkgs,omitempty"`

	// IpResolve
	// Determines how yum resolves host names.
	// C(4) or C(IPv4) - resolve to IPv4 addresses only.
	// C(6) or C(IPv6) - resolve to IPv6 addresses only.
	//
	// Default: whatever
	// Required: false
	IpResolve string `yaml:"ip_resolve,omitempty" json:"ip_resolve,omitempty"`

	// Keepalive
	// This tells yum whether or not HTTP/1.1 keepalive should be used with this repository. This can improve transfer speeds by using one connection when downloading multiple files from a repository.
	//
	// Default: no
	// Required: false
	Keepalive bool `yaml:"keepalive,omitempty" json:"keepalive,omitempty"`

	// Keepcache
	// Either C(1) or C(0). Determines whether or not yum keeps the cache of headers and packages after successful installation.
	//
	// Default: 1
	// Required: false
	Keepcache string `yaml:"keepcache,omitempty" json:"keepcache,omitempty"`

	// MetadataExpire
	// Time (in seconds) after which the metadata will expire.
	// Default value is 6 hours.
	//
	// Default: 21600
	// Required: false
	MetadataExpire string `yaml:"metadata_expire,omitempty" json:"metadata_expire,omitempty"`

	// MetadataExpireFilter
	// Filter the I(metadata_expire) time, allowing a trade of speed for accuracy if a command doesn't require it. Each yum command can specify that it requires a certain level of timeliness quality from the remote repos. from "I'm about to install/upgrade, so this better be current" to "Anything that's available is good enough".
	// C(never) - Nothing is filtered, always obey I(metadata_expire).
	// C(read-only:past) - Commands that only care about past information are filtered from metadata expiring. Eg. I(yum history) info (if history needs to lookup anything about a previous transaction, then by definition the remote package was available in the past).
	// C(read-only:present) - Commands that are balanced between past and future. Eg. I(yum list yum).
	// C(read-only:future) - Commands that are likely to result in running other commands which will require the latest metadata. Eg. I(yum check-update).
	// Note that this option does not override "yum clean expire-cache".
	//
	// Default: read-only:present
	// Required: false
	MetadataExpireFilter string `yaml:"metadata_expire_filter,omitempty" json:"metadata_expire_filter,omitempty"`

	// Metalink
	// Specifies a URL to a metalink file for the repomd.xml, a list of mirrors for the entire repository are generated by converting the mirrors for the repomd.xml file to a I(baseurl).
	// This, the I(baseurl) or I(mirrorlist) parameters are required if I(state) is set to C(present).
	//
	// Default: <no value>
	// Required: false
	Metalink string `yaml:"metalink,omitempty" json:"metalink,omitempty"`

	// Mirrorlist
	// Specifies a URL to a file containing a list of baseurls.
	// This, the I(baseurl) or I(metalink) parameters are required if I(state) is set to C(present).
	//
	// Default: <no value>
	// Required: false
	Mirrorlist string `yaml:"mirrorlist,omitempty" json:"mirrorlist,omitempty"`

	// MirrorlistExpire
	// Time (in seconds) after which the mirrorlist locally cached will expire.
	// Default value is 6 hours.
	//
	// Default: 21600
	// Required: false
	MirrorlistExpire string `yaml:"mirrorlist_expire,omitempty" json:"mirrorlist_expire,omitempty"`

	// ModuleHotfixes
	// Disable module RPM filtering and make all RPMs from the repository available. The default is C(None).
	//
	// Default: <no value>
	// Required: false
	ModuleHotfixes bool `yaml:"module_hotfixes,omitempty" json:"module_hotfixes,omitempty"`

	// Name
	// Unique repository ID. This option builds the section name of the repository in the repo file.
	// This parameter is only required if I(state) is set to C(present) or C(absent).
	//
	// Default: <no value>
	// Required: true
	Name string `yaml:"name,omitempty" json:"name,omitempty"`

	// Password
	// Password to use with the username for basic authentication.
	//
	// Default: <no value>
	// Required: false
	Password string `yaml:"password,omitempty" json:"password,omitempty"`

	// Priority
	// Enforce ordered protection of repositories. The value is an integer from 1 to 99.
	// This option only works if the YUM Priorities plugin is installed.
	//
	// Default: 99
	// Required: false
	Priority string `yaml:"priority,omitempty" json:"priority,omitempty"`

	// Protect
	// Protect packages from updates from other repositories.
	//
	// Default: no
	// Required: false
	Protect bool `yaml:"protect,omitempty" json:"protect,omitempty"`

	// Proxy
	// URL to the proxy server that yum should use. Set to C(_none_) to disable the global proxy setting.
	//
	// Default: <no value>
	// Required: false
	Proxy string `yaml:"proxy,omitempty" json:"proxy,omitempty"`

	// ProxyPassword
	// Password for this proxy.
	//
	// Default: <no value>
	// Required: false
	ProxyPassword string `yaml:"proxy_password,omitempty" json:"proxy_password,omitempty"`

	// ProxyUsername
	// Username to use for proxy.
	//
	// Default: <no value>
	// Required: false
	ProxyUsername string `yaml:"proxy_username,omitempty" json:"proxy_username,omitempty"`

	// RepoGpgcheck
	// This tells yum whether or not it should perform a GPG signature check on the repodata from this repository.
	//
	// Default: no
	// Required: false
	RepoGpgcheck bool `yaml:"repo_gpgcheck,omitempty" json:"repo_gpgcheck,omitempty"`

	// Reposdir
	// Directory where the C(.repo) files will be stored.
	//
	// Default: /etc/yum.repos.d
	// Required: false
	Reposdir string `yaml:"reposdir,omitempty" json:"reposdir,omitempty"`

	// Retries
	// Set the number of times any attempt to retrieve a file should retry before returning an error. Setting this to C(0) makes yum try forever.
	//
	// Default: 10
	// Required: false
	Retries string `yaml:"retries,omitempty" json:"retries,omitempty"`

	// S3Enabled
	// Enables support for S3 repositories.
	// This option only works if the YUM S3 plugin is installed.
	//
	// Default: no
	// Required: false
	S3Enabled bool `yaml:"s3_enabled,omitempty" json:"s3_enabled,omitempty"`

	// SkipIfUnavailable
	// If set to C(yes) yum will continue running if this repository cannot be contacted for any reason. This should be set carefully as all repos are consulted for any given command.
	//
	// Default: no
	// Required: false
	SkipIfUnavailable bool `yaml:"skip_if_unavailable,omitempty" json:"skip_if_unavailable,omitempty"`

	// SslCheckCertPermissions
	// Whether yum should check the permissions on the paths for the certificates on the repository (both remote and local).
	// If we can't read any of the files then yum will force I(skip_if_unavailable) to be C(yes). This is most useful for non-root processes which use yum on repos that have client cert files which are readable only by root.
	//
	// Default: no
	// Required: false
	SslCheckCertPermissions bool `yaml:"ssl_check_cert_permissions,omitempty" json:"ssl_check_cert_permissions,omitempty"`

	// Sslcacert
	// Path to the directory containing the databases of the certificate authorities yum should use to verify SSL certificates.
	//
	// Default: <no value>
	// Required: false
	Sslcacert string `yaml:"sslcacert,omitempty" json:"sslcacert,omitempty"`

	// Sslclientcert
	// Path to the SSL client certificate yum should use to connect to repos/remote sites.
	//
	// Default: <no value>
	// Required: false
	Sslclientcert string `yaml:"sslclientcert,omitempty" json:"sslclientcert,omitempty"`

	// Sslclientkey
	// Path to the SSL client key yum should use to connect to repos/remote sites.
	//
	// Default: <no value>
	// Required: false
	Sslclientkey string `yaml:"sslclientkey,omitempty" json:"sslclientkey,omitempty"`

	// Sslverify
	// Defines whether yum should verify SSL certificates/hosts at all.
	//
	// Default: yes
	// Required: false
	Sslverify bool `yaml:"sslverify,omitempty" json:"sslverify,omitempty"`

	// State
	// State of the repo file.
	//
	// Default: present
	// Required: false
	State string `yaml:"state,omitempty" json:"state,omitempty"`

	// Throttle
	// Enable bandwidth throttling for downloads.
	// This option can be expressed as a absolute data rate in bytes/sec. An SI prefix (k, M or G) may be appended to the bandwidth value.
	//
	// Default: <no value>
	// Required: false
	Throttle string `yaml:"throttle,omitempty" json:"throttle,omitempty"`

	// Timeout
	// Number of seconds to wait for a connection before timing out.
	//
	// Default: 30
	// Required: false
	Timeout string `yaml:"timeout,omitempty" json:"timeout,omitempty"`

	// UiRepoidVars
	// When a repository id is displayed, append these yum variables to the string if they are used in the I(baseurl)/etc. Variables are appended in the order listed (and found).
	//
	// Default: releasever basearch
	// Required: false
	UiRepoidVars string `yaml:"ui_repoid_vars,omitempty" json:"ui_repoid_vars,omitempty"`

	// Username
	// Username to use for basic authentication to a repo or really any url.
	//
	// Default: <no value>
	// Required: false
	Username string `yaml:"username,omitempty" json:"username,omitempty"`

	values map[string]types.Value
}

func (p *YumRepositoryParams) Names() []string {
	names := []string{}
	for name := range p.values {
		names = append(names, name)
	}
	return names
}

func (p *YumRepositoryParams) Set(name string, value interface{}) error {
	v, ok := p.values[name]
	if !ok {
		return fmt.Errorf("no param with name %q", name)
	}
	return v.Set(value)
}

func (p *YumRepositoryParams) Get(name string) (interface{}, error) {
	v, ok := p.values[name]
	if !ok {
		return nil, fmt.Errorf("no param with name %q", name)
	}
	return v.Get(), nil
}

type YumRepositoryResult struct {
	types.CommonReturn
	Raw string

	// Repo
	// repository name
	Repo string `yaml:"repo,omitempty" json:"repo,omitempty"`

	// State
	// state of the target, after execution
	State string `yaml:"state,omitempty" json:"state,omitempty"`

	values map[string]types.Value
}

func (r *YumRepositoryResult) Names() []string {
	names := []string{}
	for name := range r.values {
		names = append(names, name)
	}
	return names
}

func (r *YumRepositoryResult) Set(name string, value interface{}) error {
	v, ok := r.values[name]
	if !ok {
		return fmt.Errorf("no param with name %q", name)
	}
	return v.Set(value)
}

func (r *YumRepositoryResult) Get(name string) (interface{}, error) {
	v, ok := r.values[name]
	if !ok {
		return nil, fmt.Errorf("no param with name %q", name)
	}
	return v.Get(), nil
}

func (m *YumRepository) GetResult() types.Result {
	return &m.Result
}

func (m *YumRepository) GetResultRaw() string {
	return m.Result.Raw
}

func (m *YumRepository) GetCommonResult() types.CommonReturn {
	return m.Result.CommonReturn
}

func (m *YumRepository) GetParams() types.Params {
	return &m.Params
}

func (m *YumRepository) GetType() string {
	return "yum_repository"
}
