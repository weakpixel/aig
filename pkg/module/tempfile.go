package module

// Autogenerated file

import (
	"github.com/weakpixel/aig/pkg/types"
)

func init() {
	addModuleFactory("tempfile", func() Module {
		return NewTempfile()
	})
}

//
// Tempfile (tempfile) - Creates temporary files and directories
//
func NewTempfile() *Tempfile {
	return &Tempfile{}
}

// Tempfile (tempfile) - Creates temporary files and directories
//
// The C(tempfile) module creates temporary files and directories. C(mktemp) command takes different parameters on various systems, this module helps to avoid troubles related to that. Files/directories created by module are accessible only by creator. In case you need to make them world-accessible you need to use M(ansible.builtin.file) module.
// For Windows targets, use the M(ansible.windows.win_tempfile) module instead.
//
// Source: https://github.com/ansible/ansible/blob/v2.13.1/lib/ansible/modules/tempfile.py
type Tempfile struct {
	Params TempfileParams
	Result TempfileResult
}

type TempfileParams struct {

	// Path
	// Location where temporary file or directory should be created.
	// If path is not specified, the default system temporary directory will be used.
	//
	// Default: <no value>
	// Required: false
	Path string `yaml:"path,omitempty" json:"path,omitempty"`

	// Prefix
	// Prefix of file/directory name created by module.
	//
	// Default: ansible.
	// Required: false
	Prefix string `yaml:"prefix,omitempty" json:"prefix,omitempty"`

	// State
	// Whether to create file or directory.
	//
	// Default: file
	// Required: false
	State string `yaml:"state,omitempty" json:"state,omitempty"`

	// Suffix
	// Suffix of file/directory name created by module.
	//
	// Default:
	// Required: false
	Suffix string `yaml:"suffix,omitempty" json:"suffix,omitempty"`
}

type TempfileResult struct {
	types.CommonReturn
	Raw string

	// Path
	// Path to created file or directory.
	Path string `yaml:"path,omitempty" json:"path,omitempty"`
}

func (m *Tempfile) GetResult() interface{} {
	return &m.Result
}

func (m *Tempfile) GetResultRaw() string {
	return m.Result.Raw
}

func (m *Tempfile) GetCommonResult() types.CommonReturn {
	return m.Result.CommonReturn
}

func (m *Tempfile) GetParams() interface{} {
	return &m.Params
}

func (m *Tempfile) GetType() string {
	return "tempfile"
}
