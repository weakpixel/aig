package module

// Autogenerated file

import (
	"fmt"
	"github.com/weakpixel/aig/pkg/types"
)

func init() {
	addModuleFactory("dpkg_selections", func() types.Module {
		return NewDpkgSelections()
	})
}

//
// DpkgSelections (dpkg_selections) - Dpkg package selection selections
//
func NewDpkgSelections() *DpkgSelections {
	module := DpkgSelections{}
	// Create dynamic param values
	paramValues := map[string]types.Value{}
	paramValues["name"] = types.NewStringValue(&module.Params.Name)
	paramValues["selection"] = types.NewStringValue(&module.Params.Selection)
	module.Params.values = paramValues

	// Create dynamic result values
	resultValues := map[string]types.Value{}

	module.Result.values = resultValues

	return &module
}

// DpkgSelections (dpkg_selections) - Dpkg package selection selections
//
// Change dpkg package selection state via --get-selections and --set-selections.
//
//
// Source: https://github.com/ansible/ansible/blob/v2.13.1/lib/ansible/modules/dpkg_selections.py
type DpkgSelections struct {
	Params DpkgSelectionsParams
	Result DpkgSelectionsResult
}

type DpkgSelectionsParams struct {

	// Name
	// Name of the package.
	//
	// Default: <no value>
	// Required: true
	Name string `yaml:"name,omitempty" json:"name,omitempty"`

	// Selection
	// The selection state to set the package to.
	//
	// Default: <no value>
	// Required: true
	Selection string `yaml:"selection,omitempty" json:"selection,omitempty"`

	values map[string]types.Value
}

func (p *DpkgSelectionsParams) Names() []string {
	names := []string{}
	for name := range p.values {
		names = append(names, name)
	}
	return []string{}
}

func (p *DpkgSelectionsParams) Set(name string, value interface{}) error {
	v, ok := p.values[name]
	if !ok {
		return fmt.Errorf("no param with name %q", name)
	}
	return v.Set(value)
}

func (p *DpkgSelectionsParams) Get(name string) (interface{}, error) {
	v, ok := p.values[name]
	if !ok {
		return nil, fmt.Errorf("no param with name %q", name)
	}
	return v.Get(), nil
}

type DpkgSelectionsResult struct {
	types.CommonReturn
	Raw string

	values map[string]types.Value
}

func (r *DpkgSelectionsResult) Names() []string {
	names := []string{}
	for name := range r.values {
		names = append(names, name)
	}
	return []string{}
}

func (r *DpkgSelectionsResult) Set(name string, value interface{}) error {
	v, ok := r.values[name]
	if !ok {
		return fmt.Errorf("no param with name %q", name)
	}
	return v.Set(value)
}

func (r *DpkgSelectionsResult) Get(name string) (interface{}, error) {
	v, ok := r.values[name]
	if !ok {
		return nil, fmt.Errorf("no param with name %q", name)
	}
	return v.Get(), nil
}

func (m *DpkgSelections) GetResult() types.Result {
	return &m.Result
}

func (m *DpkgSelections) GetResultRaw() string {
	return m.Result.Raw
}

func (m *DpkgSelections) GetCommonResult() types.CommonReturn {
	return m.Result.CommonReturn
}

func (m *DpkgSelections) GetParams() types.Params {
	return &m.Params
}

func (m *DpkgSelections) GetType() string {
	return "dpkg_selections"
}
