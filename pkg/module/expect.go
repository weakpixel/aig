package module

// Autogenerated file

import (
	"fmt"
	"github.com/weakpixel/aig/pkg/types"
)

func init() {
	addModuleFactory("expect", func() types.Module {
		return NewExpect()
	})
}

//
// Expect (expect) - Executes a command and responds to prompts
//
func NewExpect() *Expect {
	module := Expect{}
	// Create dynamic param values
	paramValues := map[string]types.Value{}
	paramValues["chdir"] = types.NewStringValue(&module.Params.Chdir)
	paramValues["command"] = types.NewStringValue(&module.Params.Command)
	paramValues["creates"] = types.NewStringValue(&module.Params.Creates)
	paramValues["echo"] = types.NewBoolValue(&module.Params.Echo)
	paramValues["removes"] = types.NewStringValue(&module.Params.Removes)
	paramValues["timeout"] = types.NewIntValue(&module.Params.Timeout)
	module.Params.values = paramValues

	// Create dynamic result values
	resultValues := map[string]types.Value{}

	module.Result.values = resultValues

	return &module
}

// Expect (expect) - Executes a command and responds to prompts
//
// The C(expect) module executes a command and responds to prompts.
//
// The given command will be executed on all selected nodes. It will not be processed through the shell, so variables like C($HOME) and operations like C("<"), C(">"), C("|"), and C("&") will not work.
//
//
// Source: https://github.com/ansible/ansible/blob/v2.13.1/lib/ansible/modules/expect.py
type Expect struct {
	Params ExpectParams
	Result ExpectResult
}

type ExpectParams struct {

	// Chdir
	// Change into this directory before running the command.
	//
	// Default: <no value>
	// Required: false
	Chdir string `yaml:"chdir,omitempty" json:"chdir,omitempty"`

	// Command
	// The command module takes command to run.
	//
	// Default: <no value>
	// Required: true
	Command string `yaml:"command,omitempty" json:"command,omitempty"`

	// Creates
	// A filename, when it already exists, this step will B(not) be run.
	//
	// Default: <no value>
	// Required: false
	Creates string `yaml:"creates,omitempty" json:"creates,omitempty"`

	// Echo
	// Whether or not to echo out your response strings.
	//
	// Default: false
	// Required: false
	Echo bool `yaml:"echo,omitempty" json:"echo,omitempty"`

	// Removes
	// A filename, when it does not exist, this step will B(not) be run.
	//
	// Default: <no value>
	// Required: false
	Removes string `yaml:"removes,omitempty" json:"removes,omitempty"`

	// Responses
	// Mapping of expected string/regex and string to respond with. If the response is a list, successive matches return successive responses. List functionality is new in 2.1.
	//
	// Default: <no value>
	// Required: true
	Responses map[string]interface{} `yaml:"responses,omitempty" json:"responses,omitempty"`

	// Timeout
	// Amount of time in seconds to wait for the expected strings. Use C(null) to disable timeout.
	//
	// Default: 30
	// Required: false
	Timeout int `yaml:"timeout,omitempty" json:"timeout,omitempty"`

	values map[string]types.Value
}

func (p *ExpectParams) Names() []string {
	names := []string{}
	for name := range p.values {
		names = append(names, name)
	}
	return []string{}
}

func (p *ExpectParams) Set(name string, value interface{}) error {
	v, ok := p.values[name]
	if !ok {
		return fmt.Errorf("no param with name %q", name)
	}
	return v.Set(value)
}

func (p *ExpectParams) Get(name string) (interface{}, error) {
	v, ok := p.values[name]
	if !ok {
		return nil, fmt.Errorf("no param with name %q", name)
	}
	return v.Get(), nil
}

type ExpectResult struct {
	types.CommonReturn
	Raw string

	values map[string]types.Value
}

func (r *ExpectResult) Names() []string {
	names := []string{}
	for name := range r.values {
		names = append(names, name)
	}
	return []string{}
}

func (r *ExpectResult) Set(name string, value interface{}) error {
	v, ok := r.values[name]
	if !ok {
		return fmt.Errorf("no param with name %q", name)
	}
	return v.Set(value)
}

func (r *ExpectResult) Get(name string) (interface{}, error) {
	v, ok := r.values[name]
	if !ok {
		return nil, fmt.Errorf("no param with name %q", name)
	}
	return v.Get(), nil
}

func (m *Expect) GetResult() types.Result {
	return &m.Result
}

func (m *Expect) GetResultRaw() string {
	return m.Result.Raw
}

func (m *Expect) GetCommonResult() types.CommonReturn {
	return m.Result.CommonReturn
}

func (m *Expect) GetParams() types.Params {
	return &m.Params
}

func (m *Expect) GetType() string {
	return "expect"
}
