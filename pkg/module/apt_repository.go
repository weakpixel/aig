package module

// Autogenerated file

import (
	"fmt"
	"github.com/weakpixel/aig/pkg/types"
)

func init() {
	addModuleFactory("apt_repository", func() types.Module {
		return NewAptRepository()
	})
}

//
// AptRepository (apt_repository) - Add and remove APT repositories
//
func NewAptRepository() *AptRepository {
	module := AptRepository{}
	// Create dynamic param values
	paramValues := map[string]types.Value{}
	paramValues["codename"] = types.NewStringValue(&module.Params.Codename)
	paramValues["filename"] = types.NewStringValue(&module.Params.Filename)
	paramValues["install_python_apt"] = types.NewBoolValue(&module.Params.InstallPythonApt)
	paramValues["mode"] = types.NewStringValue(&module.Params.Mode)
	paramValues["repo"] = types.NewStringValue(&module.Params.Repo)
	paramValues["state"] = types.NewStringValue(&module.Params.State)
	paramValues["update_cache"] = types.NewBoolValue(&module.Params.UpdateCache)
	paramValues["update_cache_retries"] = types.NewIntValue(&module.Params.UpdateCacheRetries)
	paramValues["update_cache_retry_max_delay"] = types.NewIntValue(&module.Params.UpdateCacheRetryMaxDelay)
	paramValues["validate_certs"] = types.NewBoolValue(&module.Params.ValidateCerts)
	module.Params.values = paramValues

	// Create dynamic result values
	resultValues := map[string]types.Value{}

	module.Result.values = resultValues

	return &module
}

// AptRepository (apt_repository) - Add and remove APT repositories
//
// Add or remove an APT repositories in Ubuntu and Debian.
//
//
// Source: https://github.com/ansible/ansible/blob/v2.13.1/lib/ansible/modules/apt_repository.py
type AptRepository struct {
	Params AptRepositoryParams
	Result AptRepositoryResult
}

type AptRepositoryParams struct {

	// Codename
	// Override the distribution codename to use for PPA repositories. Should usually only be set when working with a PPA on a non-Ubuntu target (for example, Debian or Mint).
	//
	// Default: <no value>
	// Required: false
	Codename string `yaml:"codename,omitempty" json:"codename,omitempty" cty:"codename"`

	// Filename
	// Sets the name of the source list file in sources.list.d. Defaults to a file name based on the repository source url. The .list extension will be automatically added.
	//
	// Default: <no value>
	// Required: false
	Filename string `yaml:"filename,omitempty" json:"filename,omitempty" cty:"filename"`

	// InstallPythonApt
	// Whether to automatically try to install the Python apt library or not, if it is not already installed. Without this library, the module does not work.
	// Runs C(apt-get install python-apt) for Python 2, and C(apt-get install python3-apt) for Python 3.
	// Only works with the system Python 2 or Python 3. If you are using a Python on the remote that is not the system Python, set I(install_python_apt=false) and ensure that the Python apt library for your Python version is installed some other way.
	//
	// Default: true
	// Required: false
	InstallPythonApt bool `yaml:"install_python_apt,omitempty" json:"install_python_apt,omitempty" cty:"install_python_apt"`

	// Mode
	// The octal mode for newly created files in sources.list.d.
	// Default is what system uses (probably 0644).
	//
	// Default: <no value>
	// Required: false
	Mode string `yaml:"mode,omitempty" json:"mode,omitempty" cty:"mode"`

	// Repo
	// A source string for the repository.
	//
	// Default: <no value>
	// Required: true
	Repo string `yaml:"repo,omitempty" json:"repo,omitempty" cty:"repo"`

	// State
	// A source string state.
	//
	// Default: present
	// Required: false
	State string `yaml:"state,omitempty" json:"state,omitempty" cty:"state"`

	// UpdateCache
	// Run the equivalent of C(apt-get update) when a change occurs.  Cache updates are run after making changes.
	//
	// Default: yes
	// Required: false
	UpdateCache bool `yaml:"update_cache,omitempty" json:"update_cache,omitempty" cty:"update_cache"`

	// UpdateCacheRetries
	// Amount of retries if the cache update fails. Also see I(update_cache_retry_max_delay).
	//
	// Default: 5
	// Required: false
	UpdateCacheRetries int `yaml:"update_cache_retries,omitempty" json:"update_cache_retries,omitempty" cty:"update_cache_retries"`

	// UpdateCacheRetryMaxDelay
	// Use an exponential backoff delay for each retry (see I(update_cache_retries)) up to this max delay in seconds.
	//
	// Default: 12
	// Required: false
	UpdateCacheRetryMaxDelay int `yaml:"update_cache_retry_max_delay,omitempty" json:"update_cache_retry_max_delay,omitempty" cty:"update_cache_retry_max_delay"`

	// ValidateCerts
	// If C(no), SSL certificates for the target repo will not be validated. This should only be used on personally controlled sites using self-signed certificates.
	//
	// Default: yes
	// Required: false
	ValidateCerts bool `yaml:"validate_certs,omitempty" json:"validate_certs,omitempty" cty:"validate_certs"`

	values map[string]types.Value
}

func (p *AptRepositoryParams) Names() []string {
	names := []string{}
	for name := range p.values {
		names = append(names, name)
	}
	return names
}

func (p *AptRepositoryParams) Set(name string, value interface{}) error {
	v, ok := p.values[name]
	if !ok {
		return fmt.Errorf("no param with name %q", name)
	}
	return v.Set(value)
}

func (p *AptRepositoryParams) Get(name string) (interface{}, error) {
	v, ok := p.values[name]
	if !ok {
		return nil, fmt.Errorf("no param with name %q", name)
	}
	return v.Get(), nil
}

type AptRepositoryResult struct {
	types.CommonReturn
	Raw string

	values map[string]types.Value
}

func (r *AptRepositoryResult) Names() []string {
	names := []string{}
	for name := range r.values {
		names = append(names, name)
	}
	return names
}

func (r *AptRepositoryResult) Set(name string, value interface{}) error {
	v, ok := r.values[name]
	if !ok {
		return fmt.Errorf("no param with name %q", name)
	}
	return v.Set(value)
}

func (r *AptRepositoryResult) Get(name string) (interface{}, error) {
	v, ok := r.values[name]
	if !ok {
		return nil, fmt.Errorf("no param with name %q", name)
	}
	return v.Get(), nil
}

func (m *AptRepository) GetResult() types.Result {
	return &m.Result
}

func (m *AptRepository) GetResultRaw() string {
	return m.Result.Raw
}

func (m *AptRepository) GetCommonResult() types.CommonReturn {
	return m.Result.CommonReturn
}

func (m *AptRepository) GetParams() types.Params {
	return &m.Params
}

func (m *AptRepository) GetType() string {
	return "apt_repository"
}
