package module

// Autogenerated file

import (
	"github.com/weakpixel/aig/pkg/types"
)

func init() {
	addModuleFactory("apt_repository", func() Module {
		return NewAptRepository()
	})
}

//
// AptRepository (apt_repository) - Add and remove APT repositories
//
func NewAptRepository() *AptRepository {
	return &AptRepository{}
}

// AptRepository (apt_repository) - Add and remove APT repositories
//
// Add or remove an APT repositories in Ubuntu and Debian.
//
// Source: https://github.com/ansible/ansible/blob/v2.13.1/lib/ansible/modules/apt_repository.py
type AptRepository struct {
	Params AptRepositoryParams
	Result AptRepositoryResult
}

type AptRepositoryParams struct {

	// Codename
	// Override the distribution codename to use for PPA repositories. Should usually only be set when working with a PPA on a non-Ubuntu target (for example, Debian or Mint).
	//
	// Default: <no value>
	// Required: false
	Codename string `yaml:"codename,omitempty" json:"codename,omitempty"`

	// Filename
	// Sets the name of the source list file in sources.list.d. Defaults to a file name based on the repository source url. The .list extension will be automatically added.
	//
	// Default: <no value>
	// Required: false
	Filename string `yaml:"filename,omitempty" json:"filename,omitempty"`

	// InstallPythonApt
	// Whether to automatically try to install the Python apt library or not, if it is not already installed. Without this library, the module does not work.
	// Runs C(apt-get install python-apt) for Python 2, and C(apt-get install python3-apt) for Python 3.
	// Only works with the system Python 2 or Python 3. If you are using a Python on the remote that is not the system Python, set I(install_python_apt=false) and ensure that the Python apt library for your Python version is installed some other way.
	//
	// Default: true
	// Required: false
	InstallPythonApt bool `yaml:"install_python_apt,omitempty" json:"install_python_apt,omitempty"`

	// Mode
	// The octal mode for newly created files in sources.list.d.
	// Default is what system uses (probably 0644).
	//
	// Default: <no value>
	// Required: false
	Mode string `yaml:"mode,omitempty" json:"mode,omitempty"`

	// Repo
	// A source string for the repository.
	//
	// Default: <no value>
	// Required: true
	Repo string `yaml:"repo,omitempty" json:"repo,omitempty"`

	// State
	// A source string state.
	//
	// Default: present
	// Required: false
	State string `yaml:"state,omitempty" json:"state,omitempty"`

	// UpdateCache
	// Run the equivalent of C(apt-get update) when a change occurs.  Cache updates are run after making changes.
	//
	// Default: yes
	// Required: false
	UpdateCache bool `yaml:"update_cache,omitempty" json:"update_cache,omitempty"`

	// UpdateCacheRetries
	// Amount of retries if the cache update fails. Also see I(update_cache_retry_max_delay).
	//
	// Default: 5
	// Required: false
	UpdateCacheRetries int `yaml:"update_cache_retries,omitempty" json:"update_cache_retries,omitempty"`

	// UpdateCacheRetryMaxDelay
	// Use an exponential backoff delay for each retry (see I(update_cache_retries)) up to this max delay in seconds.
	//
	// Default: 12
	// Required: false
	UpdateCacheRetryMaxDelay int `yaml:"update_cache_retry_max_delay,omitempty" json:"update_cache_retry_max_delay,omitempty"`

	// ValidateCerts
	// If C(no), SSL certificates for the target repo will not be validated. This should only be used on personally controlled sites using self-signed certificates.
	//
	// Default: yes
	// Required: false
	ValidateCerts bool `yaml:"validate_certs,omitempty" json:"validate_certs,omitempty"`
}

type AptRepositoryResult struct {
	types.CommonReturn
	Raw string
}

func (m *AptRepository) GetResult() interface{} {
	return &m.Result
}

func (m *AptRepository) GetResultRaw() string {
	return m.Result.Raw
}

func (m *AptRepository) GetCommonResult() types.CommonReturn {
	return m.Result.CommonReturn
}

func (m *AptRepository) GetParams() interface{} {
	return &m.Params
}

func (m *AptRepository) GetType() string {
	return "apt_repository"
}
