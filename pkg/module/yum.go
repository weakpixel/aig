package module

// Autogenerated file

import (
	"github.com/weakpixel/aig/pkg/types"
)

func init() {
	addModuleFactory("yum", func() Module {
		return NewYum()
	})
}

//
// Yum (yum) - Manages packages with the I(yum) package manager
//
func NewYum() *Yum {
	return &Yum{}
}

// Yum (yum) - Manages packages with the I(yum) package manager
//
// Installs, upgrade, downgrades, removes, and lists packages and groups with the I(yum) package manager.
// This module only works on Python 2. If you require Python 3 support see the M(ansible.builtin.dnf) module.
//
// Source: https://github.com/ansible/ansible/blob/v2.13.1/lib/ansible/modules/yum.py
type Yum struct {
	Params YumParams
	Result YumResult
}

type YumParams struct {

	// AllowDowngrade
	// Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction).
	//
	// Default: no
	// Required: false
	AllowDowngrade bool `yaml:"allow_downgrade,omitempty" json:"allow_downgrade,omitempty"`

	// Autoremove
	// If C(yes), removes all "leaf" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)
	// NOTE: This feature requires yum >= 3.4.3 (RHEL/CentOS 7+)
	//
	// Default: no
	// Required: false
	Autoremove bool `yaml:"autoremove,omitempty" json:"autoremove,omitempty"`

	// Bugfix
	// If set to C(yes), and C(state=latest) then only installs updates that have been marked bugfix related.
	//
	// Default: no
	// Required: false
	Bugfix bool `yaml:"bugfix,omitempty" json:"bugfix,omitempty"`

	// Cacheonly
	// Tells yum to run entirely from system cache; does not download or update metadata.
	//
	// Default: no
	// Required: false
	Cacheonly bool `yaml:"cacheonly,omitempty" json:"cacheonly,omitempty"`

	// ConfFile
	// The remote yum configuration file to use for the transaction.
	//
	// Default: <no value>
	// Required: false
	ConfFile string `yaml:"conf_file,omitempty" json:"conf_file,omitempty"`

	// DisableExcludes
	// Disable the excludes defined in YUM config files.
	// If set to C(all), disables all excludes.
	// If set to C(main), disable excludes defined in [main] in yum.conf.
	// If set to C(repoid), disable excludes defined for given repo id.
	//
	// Default: <no value>
	// Required: false
	DisableExcludes string `yaml:"disable_excludes,omitempty" json:"disable_excludes,omitempty"`

	// DisableGpgCheck
	// Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest).
	//
	// Default: no
	// Required: false
	DisableGpgCheck bool `yaml:"disable_gpg_check,omitempty" json:"disable_gpg_check,omitempty"`

	// DisablePlugin
	// I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction.
	//
	// Default: <no value>
	// Required: false
	DisablePlugin []string `yaml:"disable_plugin,omitempty" json:"disable_plugin,omitempty"`

	// Disablerepo
	// I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(",").
	// As of Ansible 2.7, this can alternatively be a list instead of C(",") separated string
	//
	// Default: <no value>
	// Required: false
	Disablerepo []string `yaml:"disablerepo,omitempty" json:"disablerepo,omitempty"`

	// DownloadDir
	// Specifies an alternate directory to store packages.
	// Has an effect only if I(download_only) is specified.
	//
	// Default: <no value>
	// Required: false
	DownloadDir string `yaml:"download_dir,omitempty" json:"download_dir,omitempty"`

	// DownloadOnly
	// Only download the packages, do not install them.
	//
	// Default: no
	// Required: false
	DownloadOnly bool `yaml:"download_only,omitempty" json:"download_only,omitempty"`

	// EnablePlugin
	// I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction.
	//
	// Default: <no value>
	// Required: false
	EnablePlugin []string `yaml:"enable_plugin,omitempty" json:"enable_plugin,omitempty"`

	// Enablerepo
	// I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(",").
	// As of Ansible 2.7, this can alternatively be a list instead of C(",") separated string
	//
	// Default: <no value>
	// Required: false
	Enablerepo []string `yaml:"enablerepo,omitempty" json:"enablerepo,omitempty"`

	// Exclude
	// Package name(s) to exclude when state=present, or latest
	//
	// Default: <no value>
	// Required: false
	Exclude []string `yaml:"exclude,omitempty" json:"exclude,omitempty"`

	// InstallRepoquery
	// If repoquery is not available, install yum-utils. If the system is registered to RHN or an RHN Satellite, repoquery allows for querying all channels assigned to the system. It is also required to use the 'list' parameter.
	// NOTE: This will run and be logged as a separate yum transation which takes place before any other installation or removal.
	// NOTE: This will use the system's default enabled repositories without regard for disablerepo/enablerepo given to the module.
	//
	// Default: yes
	// Required: false
	InstallRepoquery bool `yaml:"install_repoquery,omitempty" json:"install_repoquery,omitempty"`

	// InstallWeakDeps
	// Will also install all packages linked by a weak dependency relation.
	// NOTE: This feature requires yum >= 4 (RHEL/CentOS 8+)
	//
	// Default: yes
	// Required: false
	InstallWeakDeps bool `yaml:"install_weak_deps,omitempty" json:"install_weak_deps,omitempty"`

	// Installroot
	// Specifies an alternative installroot, relative to which all packages will be installed.
	//
	// Default: /
	// Required: false
	Installroot string `yaml:"installroot,omitempty" json:"installroot,omitempty"`

	// List
	// Package name to run the equivalent of yum list C(--show-duplicates <package>) against. In addition to listing packages, use can also list the following: C(installed), C(updates), C(available) and C(repos).
	// This parameter is mutually exclusive with I(name).
	//
	// Default: <no value>
	// Required: false
	List string `yaml:"list,omitempty" json:"list,omitempty"`

	// LockTimeout
	// Amount of time to wait for the yum lockfile to be freed.
	//
	// Default: 30
	// Required: false
	LockTimeout int `yaml:"lock_timeout,omitempty" json:"lock_timeout,omitempty"`

	// Name
	// A package name or package specifier with version, like C(name-1.0).
	// Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name>=1.0)
	// If a previous version is specified, the task also needs to turn C(allow_downgrade) on. See the C(allow_downgrade) documentation for caveats with downgrading packages.
	// When using state=latest, this can be C('*') which means run C(yum -y update).
	// You can also pass a url or a local path to a rpm file (using state=present). To operate on several packages this can accept a comma separated string of packages or (as of 2.0) a list of packages.
	//
	// Default: <no value>
	// Required: false
	Name []string `yaml:"name,omitempty" json:"name,omitempty"`

	// Releasever
	// Specifies an alternative release from which all packages will be installed.
	//
	// Default: <no value>
	// Required: false
	Releasever string `yaml:"releasever,omitempty" json:"releasever,omitempty"`

	// Security
	// If set to C(yes), and C(state=latest) then only installs updates that have been marked security related.
	//
	// Default: no
	// Required: false
	Security bool `yaml:"security,omitempty" json:"security,omitempty"`

	// SkipBroken
	// Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option.
	//
	// Default: no
	// Required: false
	SkipBroken bool `yaml:"skip_broken,omitempty" json:"skip_broken,omitempty"`

	// Sslverify
	// Disables SSL validation of the repository server for this transaction.
	// This should be set to C(no) if one of the configured repositories is using an untrusted or self-signed certificate.
	//
	// Default: yes
	// Required: false
	Sslverify bool `yaml:"sslverify,omitempty" json:"sslverify,omitempty"`

	// State
	// Whether to install (C(present) or C(installed), C(latest)), or remove (C(absent) or C(removed)) a package.
	// C(present) and C(installed) will simply ensure that a desired package is installed.
	// C(latest) will update the specified package if it's not of the latest available version.
	// C(absent) and C(removed) will remove the specified package.
	// Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred.
	//
	// Default: <no value>
	// Required: false
	State string `yaml:"state,omitempty" json:"state,omitempty"`

	// UpdateCache
	// Force yum to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest).
	//
	// Default: no
	// Required: false
	UpdateCache bool `yaml:"update_cache,omitempty" json:"update_cache,omitempty"`

	// UpdateOnly
	// When using latest, only update installed packages. Do not install packages.
	// Has an effect only if state is I(latest)
	//
	// Default: no
	// Required: false
	UpdateOnly bool `yaml:"update_only,omitempty" json:"update_only,omitempty"`

	// UseBackend
	// This module supports C(yum) (as it always has), this is known as C(yum3)/C(YUM3)/C(yum-deprecated) by upstream yum developers. As of Ansible 2.7+, this module also supports C(YUM4), which is the "new yum" and it has an C(dnf) backend.
	// By default, this module will select the backend based on the C(ansible_pkg_mgr) fact.
	//
	// Default: auto
	// Required: false
	UseBackend string `yaml:"use_backend,omitempty" json:"use_backend,omitempty"`

	// ValidateCerts
	// This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(no), the SSL certificates will not be validated.
	// This should only set to C(no) used on personally controlled sites using self-signed certificates as it avoids verifying the source site.
	// Prior to 2.1 the code worked as if this was set to C(yes).
	//
	// Default: yes
	// Required: false
	ValidateCerts bool `yaml:"validate_certs,omitempty" json:"validate_certs,omitempty"`
}

type YumResult struct {
	types.CommonReturn
	Raw string
}

func (m *Yum) GetResult() interface{} {
	return &m.Result
}

func (m *Yum) GetResultRaw() string {
	return m.Result.Raw
}

func (m *Yum) GetCommonResult() types.CommonReturn {
	return m.Result.CommonReturn
}

func (m *Yum) GetParams() interface{} {
	return &m.Params
}

func (m *Yum) GetType() string {
	return "yum"
}
