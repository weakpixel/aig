package module

// Autogenerated file

import (
	"fmt"
	"github.com/weakpixel/aig/pkg/types"
)

func init() {
	addModuleFactory("rpm_key", func() types.Module {
		return NewRpmKey()
	})
}

//
// RpmKey (rpm_key) - Adds or removes a gpg key from the rpm db
//
func NewRpmKey() *RpmKey {
	module := RpmKey{}
	// Create dynamic param values
	paramValues := map[string]types.Value{}
	paramValues["fingerprint"] = types.NewStringValue(&module.Params.Fingerprint)
	paramValues["key"] = types.NewStringValue(&module.Params.Key)
	paramValues["state"] = types.NewStringValue(&module.Params.State)
	paramValues["validate_certs"] = types.NewBoolValue(&module.Params.ValidateCerts)
	module.Params.values = paramValues

	// Create dynamic result values
	resultValues := map[string]types.Value{}

	module.Result.values = resultValues

	return &module
}

// RpmKey (rpm_key) - Adds or removes a gpg key from the rpm db
//
// Adds or removes (rpm --import) a gpg key to your rpm database.
//
//
// Source: https://github.com/ansible/ansible/blob/v2.13.1/lib/ansible/modules/rpm_key.py
type RpmKey struct {
	Params RpmKeyParams
	Result RpmKeyResult
}

type RpmKeyParams struct {

	// Fingerprint
	// The long-form fingerprint of the key being imported.
	// This will be used to verify the specified key.
	//
	// Default: <no value>
	// Required: false
	Fingerprint string `yaml:"fingerprint,omitempty" json:"fingerprint,omitempty"`

	// Key
	// Key that will be modified. Can be a url, a file on the managed node, or a keyid if the key already exists in the database.
	//
	// Default: <no value>
	// Required: true
	Key string `yaml:"key,omitempty" json:"key,omitempty"`

	// State
	// If the key will be imported or removed from the rpm db.
	//
	// Default: present
	// Required: false
	State string `yaml:"state,omitempty" json:"state,omitempty"`

	// ValidateCerts
	// If C(no) and the C(key) is a url starting with https, SSL certificates will not be validated.
	// This should only be used on personally controlled sites using self-signed certificates.
	//
	// Default: yes
	// Required: false
	ValidateCerts bool `yaml:"validate_certs,omitempty" json:"validate_certs,omitempty"`

	values map[string]types.Value
}

func (p *RpmKeyParams) Names() []string {
	names := []string{}
	for name := range p.values {
		names = append(names, name)
	}
	return names
}

func (p *RpmKeyParams) Set(name string, value interface{}) error {
	v, ok := p.values[name]
	if !ok {
		return fmt.Errorf("no param with name %q", name)
	}
	return v.Set(value)
}

func (p *RpmKeyParams) Get(name string) (interface{}, error) {
	v, ok := p.values[name]
	if !ok {
		return nil, fmt.Errorf("no param with name %q", name)
	}
	return v.Get(), nil
}

type RpmKeyResult struct {
	types.CommonReturn
	Raw string

	values map[string]types.Value
}

func (r *RpmKeyResult) Names() []string {
	names := []string{}
	for name := range r.values {
		names = append(names, name)
	}
	return names
}

func (r *RpmKeyResult) Set(name string, value interface{}) error {
	v, ok := r.values[name]
	if !ok {
		return fmt.Errorf("no param with name %q", name)
	}
	return v.Set(value)
}

func (r *RpmKeyResult) Get(name string) (interface{}, error) {
	v, ok := r.values[name]
	if !ok {
		return nil, fmt.Errorf("no param with name %q", name)
	}
	return v.Get(), nil
}

func (m *RpmKey) GetResult() types.Result {
	return &m.Result
}

func (m *RpmKey) GetResultRaw() string {
	return m.Result.Raw
}

func (m *RpmKey) GetCommonResult() types.CommonReturn {
	return m.Result.CommonReturn
}

func (m *RpmKey) GetParams() types.Params {
	return &m.Params
}

func (m *RpmKey) GetType() string {
	return "rpm_key"
}
