// Autogenerated
package module

import (
	"github.com/weakpixel/aig/pkg/ansible"
)

func init() {
	addModuleFactory("systemd", func() Module {
		return NewSystemd()
	})
}

type Systemd struct {
	ModuleName string
	Params     SystemdParams
	Result     SystemdResult
}

type SystemdParams struct {

	// DaemonReexec
	DaemonReexec bool `yaml:"daemon_reexec,omitempty" json:"daemon_reexec,omitempty"`

	// DaemonReload
	DaemonReload bool `yaml:"daemon_reload,omitempty" json:"daemon_reload,omitempty"`

	// Enabled
	Enabled bool `yaml:"enabled,omitempty" json:"enabled,omitempty"`

	// Force
	Force bool `yaml:"force,omitempty" json:"force,omitempty"`

	// Masked
	Masked bool `yaml:"masked,omitempty" json:"masked,omitempty"`

	// Name
	Name string `yaml:"name,omitempty" json:"name,omitempty"`

	// NoBlock
	NoBlock bool `yaml:"no_block,omitempty" json:"no_block,omitempty"`

	// Scope
	Scope string `yaml:"scope,omitempty" json:"scope,omitempty"`

	// State
	State string `yaml:"state,omitempty" json:"state,omitempty"`
}

type SystemdResult struct {
	Raw string

	// Status
	Status interface{} `yaml:"status,omitempty" json:"status,omitempty"`
}

func (m *Systemd) Run() error {
	raw, err := ansible.Execute(m.ModuleName, m.Params, &m.Result)
	m.Result.Raw = raw
	return err
}

func (m *Systemd) GetResult() interface{} {
	return &m.Result
}

func (m *Systemd) GetResultRaw() string {
	return m.Result.Raw
}

func (m *Systemd) GetParams() interface{} {
	return &m.Params
}

func (m *Systemd) GetType() string {
	return m.ModuleName
}

func NewSystemd() *Systemd {
	return &Systemd{
		ModuleName: "systemd",
	}
}
