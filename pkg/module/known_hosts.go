package module

// Autogenerated file

import (
	"fmt"
	"github.com/weakpixel/aig/pkg/types"
)

func init() {
	addModuleFactory("known_hosts", func() types.Module {
		return NewKnownHosts()
	})
}

//
// KnownHosts (known_hosts) - Add or remove a host from the C(known_hosts) file
//
func NewKnownHosts() *KnownHosts {
	module := KnownHosts{}
	// Create dynamic param values
	paramValues := map[string]types.Value{}
	paramValues["hash_host"] = types.NewBoolValue(&module.Params.HashHost)
	paramValues["key"] = types.NewStringValue(&module.Params.Key)
	paramValues["name"] = types.NewStringValue(&module.Params.Name)
	paramValues["path"] = types.NewStringValue(&module.Params.Path)
	paramValues["state"] = types.NewStringValue(&module.Params.State)
	module.Params.values = paramValues

	// Create dynamic result values
	resultValues := map[string]types.Value{}

	module.Result.values = resultValues

	return &module
}

// KnownHosts (known_hosts) - Add or remove a host from the C(known_hosts) file
//
// The C(known_hosts) module lets you add or remove a host keys from the C(known_hosts) file.
//
// Starting at Ansible 2.2, multiple entries per host are allowed, but only one for each key type supported by ssh. This is useful if you're going to want to use the M(ansible.builtin.git) module over ssh, for example.
//
// If you have a very large number of host keys to manage, you will find the M(ansible.builtin.template) module more useful.
//
//
// Source: https://github.com/ansible/ansible/blob/v2.13.1/lib/ansible/modules/known_hosts.py
type KnownHosts struct {
	Params KnownHostsParams
	Result KnownHostsResult
}

type KnownHostsParams struct {

	// HashHost
	// Hash the hostname in the known_hosts file.
	//
	// Default: no
	// Required: false
	HashHost bool `yaml:"hash_host,omitempty" json:"hash_host,omitempty"`

	// Key
	// The SSH public host key, as a string.
	// Required if C(state=present), optional when C(state=absent), in which case all keys for the host are removed.
	// The key must be in the right format for SSH (see sshd(8), section "SSH_KNOWN_HOSTS FILE FORMAT").
	// Specifically, the key should not match the format that is found in an SSH pubkey file, but should rather have the hostname prepended to a line that includes the pubkey, the same way that it would appear in the known_hosts file. The value prepended to the line must also match the value of the name parameter.
	// Should be of format C(<hostname[,IP]> ssh-rsa <pubkey>).
	// For custom SSH port, C(key) needs to specify port as well. See example section.
	//
	// Default: <no value>
	// Required: false
	Key string `yaml:"key,omitempty" json:"key,omitempty"`

	// Name
	// The host to add or remove (must match a host specified in key). It will be converted to lowercase so that ssh-keygen can find it.
	// Must match with <hostname> or <ip> present in key attribute.
	// For custom SSH port, C(name) needs to specify port as well. See example section.
	//
	// Default: <no value>
	// Required: true
	Name string `yaml:"name,omitempty" json:"name,omitempty"`

	// Path
	// The known_hosts file to edit.
	// The known_hosts file will be created if needed. The rest of the path must exist prior to running the module.
	//
	// Default: ~/.ssh/known_hosts
	// Required: false
	Path string `yaml:"path,omitempty" json:"path,omitempty"`

	// State
	// I(present) to add the host key.
	// I(absent) to remove it.
	//
	// Default: present
	// Required: false
	State string `yaml:"state,omitempty" json:"state,omitempty"`

	values map[string]types.Value
}

func (p *KnownHostsParams) Names() []string {
	names := []string{}
	for name := range p.values {
		names = append(names, name)
	}
	return []string{}
}

func (p *KnownHostsParams) Set(name string, value interface{}) error {
	v, ok := p.values[name]
	if !ok {
		return fmt.Errorf("no param with name %q", name)
	}
	return v.Set(value)
}

func (p *KnownHostsParams) Get(name string) (interface{}, error) {
	v, ok := p.values[name]
	if !ok {
		return nil, fmt.Errorf("no param with name %q", name)
	}
	return v.Get(), nil
}

type KnownHostsResult struct {
	types.CommonReturn
	Raw string

	values map[string]types.Value
}

func (r *KnownHostsResult) Names() []string {
	names := []string{}
	for name := range r.values {
		names = append(names, name)
	}
	return []string{}
}

func (r *KnownHostsResult) Set(name string, value interface{}) error {
	v, ok := r.values[name]
	if !ok {
		return fmt.Errorf("no param with name %q", name)
	}
	return v.Set(value)
}

func (r *KnownHostsResult) Get(name string) (interface{}, error) {
	v, ok := r.values[name]
	if !ok {
		return nil, fmt.Errorf("no param with name %q", name)
	}
	return v.Get(), nil
}

func (m *KnownHosts) GetResult() types.Result {
	return &m.Result
}

func (m *KnownHosts) GetResultRaw() string {
	return m.Result.Raw
}

func (m *KnownHosts) GetCommonResult() types.CommonReturn {
	return m.Result.CommonReturn
}

func (m *KnownHosts) GetParams() types.Params {
	return &m.Params
}

func (m *KnownHosts) GetType() string {
	return "known_hosts"
}
