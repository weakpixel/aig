package module

// Autogenerated file

import (
	"github.com/weakpixel/aig/pkg/types"
)

func init() {
	addModuleFactory("ping", func() Module {
		return NewPing()
	})
}

//
// Ping (ping) - Try to connect to host, verify a usable python and return C(pong) on success
//
func NewPing() *Ping {
	return &Ping{}
}

// Ping (ping) - Try to connect to host, verify a usable python and return C(pong) on success
//
// A trivial test module, this module always returns C(pong) on successful contact. It does not make sense in playbooks, but it is useful from C(/usr/bin/ansible) to verify the ability to login and that a usable Python is configured.
// This is NOT ICMP ping, this is just a trivial test module that requires Python on the remote-node.
// For Windows targets, use the M(ansible.windows.win_ping) module instead.
// For Network targets, use the M(ansible.netcommon.net_ping) module instead.
type Ping struct {
	Params PingParams
	Result PingResult
}

type PingParams struct {

	// Data
	// Data to return for the C(ping) return value.
	// If this parameter is set to C(crash), the module will cause an exception.
	//
	// Default: pong
	// Required: false
	Data string `yaml:"data,omitempty" json:"data,omitempty"`
}

type PingResult struct {
	types.CommonReturn
	Raw string

	// Ping
	// Value provided with the data parameter.
	Ping string `yaml:"ping,omitempty" json:"ping,omitempty"`
}

func (m *Ping) GetResult() interface{} {
	return &m.Result
}

func (m *Ping) GetResultRaw() string {
	return m.Result.Raw
}

func (m *Ping) GetCommonResult() types.CommonReturn {
	return m.Result.CommonReturn
}

func (m *Ping) GetParams() interface{} {
	return &m.Params
}

func (m *Ping) GetType() string {
	return "ping"
}
