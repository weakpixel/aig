// Autogenerated
package module

import (
	"aig/pkg/ansible"
)

type SystemdService struct {
	ModuleName string
	Params     SystemdServiceParams
	Result     SystemdServiceResult
}

type SystemdServiceParams struct {

	// DaemonReexec
	DaemonReexec bool `yaml:"daemon_reexec,omitempty" json:"daemon_reexec,omitempty"`

	// DaemonReload
	DaemonReload bool `yaml:"daemon_reload,omitempty" json:"daemon_reload,omitempty"`

	// Enabled
	Enabled bool `yaml:"enabled,omitempty" json:"enabled,omitempty"`

	// Force
	Force bool `yaml:"force,omitempty" json:"force,omitempty"`

	// Masked
	Masked bool `yaml:"masked,omitempty" json:"masked,omitempty"`

	// Name
	Name string `yaml:"name,omitempty" json:"name,omitempty"`

	// NoBlock
	NoBlock bool `yaml:"no_block,omitempty" json:"no_block,omitempty"`

	// Scope
	Scope string `yaml:"scope,omitempty" json:"scope,omitempty"`

	// State
	State string `yaml:"state,omitempty" json:"state,omitempty"`
}

type SystemdServiceResult struct {
	Raw string

	// Status
	Status interface{} `yaml:"status,omitempty" json:"status,omitempty"`
}

func (m *SystemdService) Run() error {
	raw, err := ansible.Execute(m.ModuleName, m.Params, &m.Result)
	m.Result.Raw = raw
	return err
}

func NewSystemdService() *SystemdService {
	return &SystemdService{
		ModuleName: "systemd_service",
	}
}
