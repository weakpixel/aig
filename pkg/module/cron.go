package module

// Autogenerated file

import (
	"fmt"
	"github.com/weakpixel/aig/pkg/types"
)

func init() {
	addModuleFactory("cron", func() types.Module {
		return NewCron()
	})
}

//
// Cron (cron) - Manage cron.d and crontab entries
//
func NewCron() *Cron {
	module := Cron{}
	// Create dynamic param values
	paramValues := map[string]types.Value{}
	paramValues["backup"] = types.NewBoolValue(&module.Params.Backup)
	paramValues["cron_file"] = types.NewStringValue(&module.Params.CronFile)
	paramValues["day"] = types.NewStringValue(&module.Params.Day)
	paramValues["disabled"] = types.NewBoolValue(&module.Params.Disabled)
	paramValues["env"] = types.NewBoolValue(&module.Params.Env)
	paramValues["hour"] = types.NewStringValue(&module.Params.Hour)
	paramValues["insertafter"] = types.NewStringValue(&module.Params.Insertafter)
	paramValues["insertbefore"] = types.NewStringValue(&module.Params.Insertbefore)
	paramValues["job"] = types.NewStringValue(&module.Params.Job)
	paramValues["minute"] = types.NewStringValue(&module.Params.Minute)
	paramValues["month"] = types.NewStringValue(&module.Params.Month)
	paramValues["name"] = types.NewStringValue(&module.Params.Name)
	paramValues["special_time"] = types.NewStringValue(&module.Params.SpecialTime)
	paramValues["state"] = types.NewStringValue(&module.Params.State)
	paramValues["user"] = types.NewStringValue(&module.Params.User)
	paramValues["weekday"] = types.NewStringValue(&module.Params.Weekday)
	module.Params.values = paramValues

	// Create dynamic result values
	resultValues := map[string]types.Value{}

	module.Result.values = resultValues

	return &module
}

// Cron (cron) - Manage cron.d and crontab entries
//
// Use this module to manage crontab and environment variables entries. This module allows you to create environment variables and named crontab entries, update, or delete them.
//
// When crontab jobs are managed: the module includes one line with the description of the crontab entry C("#Ansible: <name>") corresponding to the "name" passed to the module, which is used by future ansible/module calls to find/check the state. The "name" parameter should be unique, and changing the "name" value will result in a new cron task being created (or a different one being removed).
//
// When environment variables are managed, no comment line is added, but, when the module needs to find/check the state, it uses the "name" parameter to find the environment variable definition line.
//
// When using symbols such as %, they must be properly escaped.
//
//
// Source: https://github.com/ansible/ansible/blob/v2.13.1/lib/ansible/modules/cron.py
type Cron struct {
	Params CronParams
	Result CronResult
}

type CronParams struct {

	// Backup
	// If set, create a backup of the crontab before it is modified. The location of the backup is returned in the C(backup_file) variable by this module.
	//
	// Default: no
	// Required: false
	Backup bool `yaml:"backup,omitempty" json:"backup,omitempty" cty:"backup"`

	// CronFile
	// If specified, uses this file instead of an individual user's crontab. The assumption is that this file is exclusively managed by the module, do not use if the file contains multiple entries, NEVER use for /etc/crontab.
	// If this is a relative path, it is interpreted with respect to I(/etc/cron.d).
	// Many linux distros expect (and some require) the filename portion to consist solely of upper- and lower-case letters, digits, underscores, and hyphens.
	// Using this parameter requires you to specify the I(user) as well, unless I(state) is not I(present).
	// Either this parameter or I(name) is required
	//
	// Default: <no value>
	// Required: false
	CronFile string `yaml:"cron_file,omitempty" json:"cron_file,omitempty" cty:"cron_file"`

	// Day
	// Day of the month the job should run (C(1-31), C(*), C(*/2), and so on).
	//
	// Default: *
	// Required: false
	Day string `yaml:"day,omitempty" json:"day,omitempty" cty:"day"`

	// Disabled
	// If the job should be disabled (commented out) in the crontab.
	// Only has effect if I(state=present).
	//
	// Default: no
	// Required: false
	Disabled bool `yaml:"disabled,omitempty" json:"disabled,omitempty" cty:"disabled"`

	// Env
	// If set, manages a crontab's environment variable.
	// New variables are added on top of crontab.
	// I(name) and I(value) parameters are the name and the value of environment variable.
	//
	// Default: false
	// Required: false
	Env bool `yaml:"env,omitempty" json:"env,omitempty" cty:"env"`

	// Hour
	// Hour when the job should run (C(0-23), C(*), C(*/2), and so on).
	//
	// Default: *
	// Required: false
	Hour string `yaml:"hour,omitempty" json:"hour,omitempty" cty:"hour"`

	// Insertafter
	// Used with I(state=present) and I(env).
	// If specified, the environment variable will be inserted after the declaration of specified environment variable.
	//
	// Default: <no value>
	// Required: false
	Insertafter string `yaml:"insertafter,omitempty" json:"insertafter,omitempty" cty:"insertafter"`

	// Insertbefore
	// Used with I(state=present) and I(env).
	// If specified, the environment variable will be inserted before the declaration of specified environment variable.
	//
	// Default: <no value>
	// Required: false
	Insertbefore string `yaml:"insertbefore,omitempty" json:"insertbefore,omitempty" cty:"insertbefore"`

	// Job
	// The command to execute or, if env is set, the value of environment variable.
	// The command should not contain line breaks.
	// Required if I(state=present).
	//
	// Default: <no value>
	// Required: false
	Job string `yaml:"job,omitempty" json:"job,omitempty" cty:"job"`

	// Minute
	// Minute when the job should run (C(0-59), C(*), C(*/2), and so on).
	//
	// Default: *
	// Required: false
	Minute string `yaml:"minute,omitempty" json:"minute,omitempty" cty:"minute"`

	// Month
	// Month of the year the job should run (C(1-12), C(*), C(*/2), and so on).
	//
	// Default: *
	// Required: false
	Month string `yaml:"month,omitempty" json:"month,omitempty" cty:"month"`

	// Name
	// Description of a crontab entry or, if env is set, the name of environment variable.
	// This parameter is always required as of ansible-core 2.12.
	//
	// Default: <no value>
	// Required: true
	Name string `yaml:"name,omitempty" json:"name,omitempty" cty:"name"`

	// SpecialTime
	// Special time specification nickname.
	//
	// Default: <no value>
	// Required: false
	SpecialTime string `yaml:"special_time,omitempty" json:"special_time,omitempty" cty:"special_time"`

	// State
	// Whether to ensure the job or environment variable is present or absent.
	//
	// Default: present
	// Required: false
	State string `yaml:"state,omitempty" json:"state,omitempty" cty:"state"`

	// User
	// The specific user whose crontab should be modified.
	// When unset, this parameter defaults to the current user.
	//
	// Default: <no value>
	// Required: false
	User string `yaml:"user,omitempty" json:"user,omitempty" cty:"user"`

	// Weekday
	// Day of the week that the job should run (C(0-6) for Sunday-Saturday, C(*), and so on).
	//
	// Default: *
	// Required: false
	Weekday string `yaml:"weekday,omitempty" json:"weekday,omitempty" cty:"weekday"`

	values map[string]types.Value
}

func (p *CronParams) Names() []string {
	names := []string{}
	for name := range p.values {
		names = append(names, name)
	}
	return names
}

func (p *CronParams) Set(name string, value interface{}) error {
	v, ok := p.values[name]
	if !ok {
		return fmt.Errorf("no param with name %q", name)
	}
	return v.Set(value)
}

func (p *CronParams) Get(name string) (interface{}, error) {
	v, ok := p.values[name]
	if !ok {
		return nil, fmt.Errorf("no param with name %q", name)
	}
	return v.Get(), nil
}

type CronResult struct {
	types.CommonReturn
	Raw string

	values map[string]types.Value
}

func (r *CronResult) Names() []string {
	names := []string{}
	for name := range r.values {
		names = append(names, name)
	}
	return names
}

func (r *CronResult) Set(name string, value interface{}) error {
	v, ok := r.values[name]
	if !ok {
		return fmt.Errorf("no param with name %q", name)
	}
	return v.Set(value)
}

func (r *CronResult) Get(name string) (interface{}, error) {
	v, ok := r.values[name]
	if !ok {
		return nil, fmt.Errorf("no param with name %q", name)
	}
	return v.Get(), nil
}

func (m *Cron) GetResult() types.Result {
	return &m.Result
}

func (m *Cron) GetResultRaw() string {
	return m.Result.Raw
}

func (m *Cron) GetCommonResult() types.CommonReturn {
	return m.Result.CommonReturn
}

func (m *Cron) GetParams() types.Params {
	return &m.Params
}

func (m *Cron) GetType() string {
	return "cron"
}
