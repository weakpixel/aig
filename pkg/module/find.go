package module

// Autogenerated file

import (
	"github.com/weakpixel/aig/pkg/types"
)

func init() {
	addModuleFactory("find", func() Module {
		return NewFind()
	})
}

//
// Find (find) - Return a list of files based on specific criteria
//
func NewFind() *Find {
	return &Find{}
}

// Find (find) - Return a list of files based on specific criteria
//
// Return a list of files based on specific criteria. Multiple criteria are AND'd together.
// For Windows targets, use the M(ansible.windows.win_find) module instead.
type Find struct {
	Params FindParams
	Result FindResult
}

type FindParams struct {

	// Age
	// Select files whose age is equal to or greater than the specified time.
	// Use a negative age to find files equal to or less than the specified time.
	// You can choose seconds, minutes, hours, days, or weeks by specifying the first letter of any of those words (e.g., "1w").
	//
	// Default: <no value>
	// Required: false
	Age string `yaml:"age,omitempty" json:"age,omitempty"`

	// AgeStamp
	// Choose the file property against which we compare age.
	//
	// Default: mtime
	// Required: false
	AgeStamp string `yaml:"age_stamp,omitempty" json:"age_stamp,omitempty"`

	// Contains
	// A regular expression or pattern which should be matched against the file content.
	// Works only when I(file_type) is C(file).
	//
	// Default: <no value>
	// Required: false
	Contains string `yaml:"contains,omitempty" json:"contains,omitempty"`

	// Depth
	// Set the maximum number of levels to descend into.
	// Setting recurse to C(no) will override this value, which is effectively depth 1.
	// Default is unlimited depth.
	//
	// Default: <no value>
	// Required: false
	Depth int `yaml:"depth,omitempty" json:"depth,omitempty"`

	// Excludes
	// One or more (shell or regex) patterns, which type is controlled by C(use_regex) option.
	// Items whose basenames match an C(excludes) pattern are culled from C(patterns) matches. Multiple patterns can be specified using a list.
	//
	// Default: <no value>
	// Required: false
	Excludes []string `yaml:"excludes,omitempty" json:"excludes,omitempty"`

	// FileType
	// Type of file to select.
	// The 'link' and 'any' choices were added in Ansible 2.3.
	//
	// Default: file
	// Required: false
	FileType string `yaml:"file_type,omitempty" json:"file_type,omitempty"`

	// Follow
	// Set this to C(yes) to follow symlinks in path for systems with python 2.6+.
	//
	// Default: no
	// Required: false
	Follow bool `yaml:"follow,omitempty" json:"follow,omitempty"`

	// GetChecksum
	// Set this to C(yes) to retrieve a file's SHA1 checksum.
	//
	// Default: no
	// Required: false
	GetChecksum bool `yaml:"get_checksum,omitempty" json:"get_checksum,omitempty"`

	// Hidden
	// Set this to C(yes) to include hidden files, otherwise they will be ignored.
	//
	// Default: no
	// Required: false
	Hidden bool `yaml:"hidden,omitempty" json:"hidden,omitempty"`

	// Paths
	// List of paths of directories to search. All paths must be fully qualified.
	//
	// Default: <no value>
	// Required: true
	Paths []string `yaml:"paths,omitempty" json:"paths,omitempty"`

	// Patterns
	// One or more (shell or regex) patterns, which type is controlled by C(use_regex) option.
	// The patterns restrict the list of files to be returned to those whose basenames match at least one of the patterns specified. Multiple patterns can be specified using a list.
	// The pattern is matched against the file base name, excluding the directory.
	// When using regexen, the pattern MUST match the ENTIRE file name, not just parts of it. So if you are looking to match all files ending in .default, you'd need to use '.*\.default' as a regexp and not just '\.default'.
	// This parameter expects a list, which can be either comma separated or YAML. If any of the patterns contain a comma, make sure to put them in a list to avoid splitting the patterns in undesirable ways.
	// Defaults to '*' when C(use_regex=False), or '.*' when C(use_regex=True).
	//
	// Default: []
	// Required: false
	Patterns []string `yaml:"patterns,omitempty" json:"patterns,omitempty"`

	// ReadWholeFile
	// When doing a C(contains) search, determines whether the whole file should be read into memory or if the regex should be applied to the file line-by-line.
	// Setting this to C(true) can have performance and memory implications for large files.
	// This uses C(re.search()) instead of C(re.match()).
	//
	// Default: false
	// Required: false
	ReadWholeFile bool `yaml:"read_whole_file,omitempty" json:"read_whole_file,omitempty"`

	// Recurse
	// If target is a directory, recursively descend into the directory looking for files.
	//
	// Default: no
	// Required: false
	Recurse bool `yaml:"recurse,omitempty" json:"recurse,omitempty"`

	// Size
	// Select files whose size is equal to or greater than the specified size.
	// Use a negative size to find files equal to or less than the specified size.
	// Unqualified values are in bytes but b, k, m, g, and t can be appended to specify bytes, kilobytes, megabytes, gigabytes, and terabytes, respectively.
	// Size is not evaluated for directories.
	//
	// Default: <no value>
	// Required: false
	Size string `yaml:"size,omitempty" json:"size,omitempty"`

	// UseRegex
	// If C(no), the patterns are file globs (shell).
	// If C(yes), they are python regexes.
	//
	// Default: no
	// Required: false
	UseRegex bool `yaml:"use_regex,omitempty" json:"use_regex,omitempty"`
}

type FindResult struct {
	types.CommonReturn
	Raw string

	// Examined
	// Number of filesystem objects looked at
	Examined int `yaml:"examined,omitempty" json:"examined,omitempty"`

	// Files
	// All matches found with the specified criteria (see stat module for full output of each dictionary)
	Files []map[string]interface{} `yaml:"files,omitempty" json:"files,omitempty"`

	// Matched
	// Number of matches
	Matched int `yaml:"matched,omitempty" json:"matched,omitempty"`

	// SkippedPaths
	// skipped paths and reasons they were skipped
	SkippedPaths map[string]interface{} `yaml:"skipped_paths,omitempty" json:"skipped_paths,omitempty"`
}

func (m *Find) GetResult() interface{} {
	return &m.Result
}

func (m *Find) GetResultRaw() string {
	return m.Result.Raw
}

func (m *Find) GetCommonResult() types.CommonReturn {
	return m.Result.CommonReturn
}

func (m *Find) GetParams() interface{} {
	return &m.Params
}

func (m *Find) GetType() string {
	return "find"
}
