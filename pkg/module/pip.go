// Autogenerated
package module

import (
	"github.com/weakpixel/aig/pkg/ansible"
	"github.com/weakpixel/aig/pkg/types"
)

func init() {
	addModuleFactory("pip", func() Module {
		return NewPip()
	})
}

type Pip struct {
	ModuleName string
	Params     PipParams
	Result     PipResult
}

type PipParams struct {

	// Chdir
	Chdir string `yaml:"chdir,omitempty" json:"chdir,omitempty"`

	// Editable
	Editable bool `yaml:"editable,omitempty" json:"editable,omitempty"`

	// Executable
	Executable string `yaml:"executable,omitempty" json:"executable,omitempty"`

	// ExtraArgs
	ExtraArgs string `yaml:"extra_args,omitempty" json:"extra_args,omitempty"`

	// Name
	Name []string `yaml:"name,omitempty" json:"name,omitempty"`

	// Requirements
	Requirements string `yaml:"requirements,omitempty" json:"requirements,omitempty"`

	// State
	State string `yaml:"state,omitempty" json:"state,omitempty"`

	// Umask
	Umask string `yaml:"umask,omitempty" json:"umask,omitempty"`

	// Version
	Version string `yaml:"version,omitempty" json:"version,omitempty"`

	// Virtualenv
	Virtualenv string `yaml:"virtualenv,omitempty" json:"virtualenv,omitempty"`

	// VirtualenvCommand
	VirtualenvCommand string `yaml:"virtualenv_command,omitempty" json:"virtualenv_command,omitempty"`

	// VirtualenvPython
	VirtualenvPython string `yaml:"virtualenv_python,omitempty" json:"virtualenv_python,omitempty"`

	// VirtualenvSitePackages
	VirtualenvSitePackages bool `yaml:"virtualenv_site_packages,omitempty" json:"virtualenv_site_packages,omitempty"`
}

type PipResult struct {
	types.CommonReturn
	Raw string

	// Cmd
	Cmd string `yaml:"cmd,omitempty" json:"cmd,omitempty"`

	// Name
	Name []map[string]interface{} `yaml:"name,omitempty" json:"name,omitempty"`

	// Requirements
	Requirements string `yaml:"requirements,omitempty" json:"requirements,omitempty"`

	// Version
	Version string `yaml:"version,omitempty" json:"version,omitempty"`

	// Virtualenv
	Virtualenv string `yaml:"virtualenv,omitempty" json:"virtualenv,omitempty"`
}

func (m *Pip) Run() error {
	raw, err := ansible.Execute(m.ModuleName, m.Params, &m.Result)
	m.Result.Raw = raw
	return err
}

func (m *Pip) GetResult() interface{} {
	return &m.Result
}

func (m *Pip) GetResultRaw() string {
	return m.Result.Raw
}

func (m *Pip) GetCommonResult() types.CommonReturn {
	return m.Result.CommonReturn
}

func (m *Pip) GetParams() interface{} {
	return &m.Params
}

func (m *Pip) GetType() string {
	return m.ModuleName
}

func NewPip() *Pip {
	return &Pip{
		ModuleName: "pip",
	}
}
